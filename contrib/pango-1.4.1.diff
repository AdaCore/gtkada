Fri Jun 17 2005  Arnaud Charlet  <charlet@adacore.com>

	* pango/pangowin32-fontmap.c: integrate patch from PR 110521
	Fix E607-006

Thu Dec 06 2004  Arnaud Charlet  <charlet@adacore.com>

	* pango/pango-context.c, pango/glyphstring.c, pango/pangowin32.c: Avoid
	dereferencing null font.

Thu Nov 27 2003  Arnaud Charlet  <charlet@adacore.com>

	* configure: Add missing G_DISABLE_CAST_CHECKS when
	using --disable-debug

	* pango/pango-layout.c: Do not call utf8_validate when assertions
	are disabled.

	To be submitted.

--- configure	2003/11/26 13:59:18	1.1
+++ configure	2003/11/26 13:59:29
@@ -18533,7 +18533,7 @@
   PANGO_DEBUG_FLAGS="-DG_DISABLE_CAST_CHECKS"
 
   if test "x$enable_debug" = "xno"; then
-    PANGO_DEBUG_FLAGS="$GLIB_DEBUG_FLAGS -DG_DISABLE_ASSERT -DG_DISABLE_CHECKS"
+    PANGO_DEBUG_FLAGS="$GLIB_DEBUG_FLAGS -DG_DISABLE_ASSERT -DG_DISABLE_CHECKS $PANGO_DEBUG_FLAGS"
   fi
 fi
 
--- pango/pango-layout.c	2003/11/26 14:16:48	1.1
+++ pango/pango-layout.c	2003/11/22 14:37:36
@@ -730,7 +730,11 @@ pango_layout_set_text (PangoLayout *layo
 
   old_text = layout->text;
 
+#ifdef G_DISABLE_ASSERT
+  if (length == -1)
+#else
   if (length != 0)
+#endif
     {
       if (!g_utf8_validate (text, length, &end))
 	g_warning ("Invalid UTF8 string passed to pango_layout_set_text()");
--- pango/pango-context.c.old	2004-12-06 16:01:05.000000000 +0100
+++ pango/pango-context.c	2004-12-06 16:01:49.000000000 +0100
@@ -722,7 +722,10 @@ itemize_state_fill_shaper (ItemizeState 
       PangoItem *item = l->data;
       if (item->analysis.shape_engine)
 	break;
-      item->analysis.font = g_object_ref (font);
+      if (font == NULL)
+	item->analysis.font = NULL;
+      else
+	item->analysis.font = g_object_ref (font);
       item->analysis.shape_engine = shape_engine;
     }
 }
--- pango/glyphstring.c.old	2004-12-06 17:35:56.000000000 +0100
+++ pango/glyphstring.c	2004-12-06 17:36:28.000000000 +0100
@@ -182,6 +182,9 @@ pango_glyph_string_extents_range (PangoG
       
       PangoGlyphGeometry *geometry = &glyphs->glyphs[i].geometry;
 
+      if (font == NULL)
+	goto skip_font;
+
       pango_font_get_glyph_extents (font, glyphs->glyphs[i].glyph,
 				    ink_rect ? &glyph_ink : NULL,
 				    logical_rect ? &glyph_logical : NULL);
@@ -229,6 +232,7 @@ pango_glyph_string_extents_range (PangoG
 	    }
 	}
 
+skip_font:
       x_pos += geometry->width;
     }
 }
--- pango/pangowin32.c.old	2004-12-06 17:43:37.000000000 +0100
+++ pango/pangowin32.c	2004-12-06 17:44:23.000000000 +0100
@@ -89,6 +89,9 @@ pango_win32_get_hfont (PangoFont *font)
   PangoWin32FontCache *cache;
   TEXTMETRIC tm;
 
+  if (!win32font)
+    return NULL;
+
   if (!win32font->hfont)
     {
       cache = pango_win32_font_map_get_font_cache (win32font->fontmap);
--- pango/pangowin32-fontmap.c.old	2005-06-16 16:42:50.000000000 +0100
+++ pango/pangowin32-fontmap.c	2005-06-16 16:47:26.000000000 +0100
@@ -206,7 +206,18 @@
 			     DWORD       fontType,
 			     LPARAM      lParam)
 {
-  pango_win32_insert_font (fontmap, lfp);
+  /* Bold and italic variants can always (?) be simulated,
+     so insert them. */
+  lfp->lfItalic = 0;
+  lfp->lfWeight = FW_NORMAL;
+  pango_win32_insert_font (fontmap, lfp); // normal
+  lfp->lfItalic = 1;
+  pango_win32_insert_font (fontmap, lfp); // italic
+  lfp->lfItalic = 0;
+  lfp->lfWeight = FW_BOLD;
+  pango_win32_insert_font (fontmap, lfp); // bold
+  lfp->lfItalic = 1;
+  pango_win32_insert_font (fontmap, lfp); // bold+italic
 
   return 1;
 }
