<?xml version="1.0"?>
<!-- This file was automatically generated from C sources - DO NOT EDIT!
To affect the contents of this file, edit the original C definitions,
and/or use gtk-doc annotations.  -->
<repository version="1.2"
            xmlns="http://www.gtk.org/introspection/core/1.0"
            xmlns:c="http://www.gtk.org/introspection/c/1.0"
            xmlns:glib="http://www.gtk.org/introspection/glib/1.0">
  <include name="GObject" version="2.0"/>
  <include name="HarfBuzz" version="0.0"/>
  <include name="cairo" version="1.0"/>
  <package name="pango"/>
  <c:include name="pango/pango.h"/>
  <namespace name="Pango"
             version="1.0"
             shared-library="libpango-1.0.so.0"
             c:identifier-prefixes="Pango"
             c:symbol-prefixes="pango">
    <alias name="Glyph" c:type="PangoGlyph">
      <doc xml:space="preserve"
           filename="../pango/pango-types.h"
           line="45">A #PangoGlyph represents a single glyph in the output form of a string.</doc>
      <source-position filename="../pango/pango-types.h" line="50"/>
      <type name="guint32" c:type="guint32"/>
    </alias>
    <alias name="GlyphUnit" c:type="PangoGlyphUnit">
      <doc xml:space="preserve"
           filename="../pango/pango-glyph.h"
           line="36">The #PangoGlyphUnit type is used to store dimensions within
Pango. Dimensions are stored in 1/%PANGO_SCALE of a device unit.
(A device unit might be a pixel for screen display, or
a point on a printer.) %PANGO_SCALE is currently 1024, and
may change in the future (unlikely though), but you should not
depend on its exact value. The PANGO_PIXELS() macro can be used
to convert from glyph units into device units with correct rounding.</doc>
      <source-position filename="../pango/pango-glyph.h" line="47"/>
      <type name="gint32" c:type="gint32"/>
    </alias>
    <alias name="LayoutRun" c:type="PangoLayoutRun">
      <doc xml:space="preserve"
           filename="../pango/pango-layout.h"
           line="36">The #PangoLayoutRun structure represents a single run within
a #PangoLayoutLine; it is simply an alternate name for
#PangoGlyphItem.
See the #PangoGlyphItem docs for details on the fields.</doc>
      <source-position filename="../pango/pango-layout.h" line="44"/>
      <type name="GlyphItem" c:type="PangoGlyphItem"/>
    </alias>
    <constant name="ANALYSIS_FLAG_CENTERED_BASELINE"
              value="1"
              c:type="PANGO_ANALYSIS_FLAG_CENTERED_BASELINE"
              version="1.16">
      <doc xml:space="preserve"
           filename="../pango/pango-item.h"
           line="33">Whether the segment should be shifted to center around the baseline.
Used in vertical writing directions mostly.</doc>
      <source-position filename="../pango/pango-item.h" line="41"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="ANALYSIS_FLAG_IS_ELLIPSIS"
              value="2"
              c:type="PANGO_ANALYSIS_FLAG_IS_ELLIPSIS"
              version="1.36.7">
      <doc xml:space="preserve"
           filename="../pango/pango-item.h"
           line="43">This flag is used to mark runs that hold ellipsized text,
in an ellipsized layout.</doc>
      <source-position filename="../pango/pango-item.h" line="51"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="ANALYSIS_FLAG_NEED_HYPHEN"
              value="4"
              c:type="PANGO_ANALYSIS_FLAG_NEED_HYPHEN"
              version="1.44">
      <doc xml:space="preserve"
           filename="../pango/pango-item.h"
           line="53">This flag tells Pango to add a hyphen at the end of the
run during shaping.</doc>
      <source-position filename="../pango/pango-item.h" line="61"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <function-macro name="ASCENT"
                    c:identifier="PANGO_ASCENT"
                    introspectable="0">
      <doc xml:space="preserve"
           filename="../pango/pango-types.h"
           line="148">Extracts the &lt;firstterm&gt;ascent&lt;/firstterm&gt; from a #PangoRectangle
representing glyph extents. The ascent is the distance from the
baseline to the highest point of the character. This is positive if the
glyph ascends above the baseline.</doc>
      <source-position filename="../pango/pango-types.h" line="186"/>
      <parameters>
        <parameter name="rect">
          <doc xml:space="preserve"
               filename="../pango/pango-types.h"
               line="150">a #PangoRectangle</doc>
        </parameter>
      </parameters>
    </function-macro>
    <constant name="ATTR_INDEX_FROM_TEXT_BEGINNING"
              value="0"
              c:type="PANGO_ATTR_INDEX_FROM_TEXT_BEGINNING"
              version="1.24">
      <doc xml:space="preserve"
           filename="../pango/pango-attributes.h"
           line="262">This value can be used to set the start_index member of a #PangoAttribute
such that the attribute covers from the beginning of the text.</doc>
      <source-position filename="../pango/pango-attributes.h" line="278"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <enumeration name="Alignment"
                 glib:type-name="PangoAlignment"
                 glib:get-type="pango_alignment_get_type"
                 c:type="PangoAlignment">
      <doc xml:space="preserve"
           filename="../pango/pango-layout.h"
           line="46">A #PangoAlignment describes how to align the lines of a #PangoLayout within the
available space. If the #PangoLayout is set to justify
using pango_layout_set_justify(), this only has effect for partial lines.</doc>
      <member name="left"
              value="0"
              c:identifier="PANGO_ALIGN_LEFT"
              glib:nick="left">
        <doc xml:space="preserve"
             filename="../pango/pango-layout.h"
             line="48">Put all available space on the right</doc>
      </member>
      <member name="center"
              value="1"
              c:identifier="PANGO_ALIGN_CENTER"
              glib:nick="center">
        <doc xml:space="preserve"
             filename="../pango/pango-layout.h"
             line="49">Center the line within the available space</doc>
      </member>
      <member name="right"
              value="2"
              c:identifier="PANGO_ALIGN_RIGHT"
              glib:nick="right">
        <doc xml:space="preserve"
             filename="../pango/pango-layout.h"
             line="50">Put all available space on the left</doc>
      </member>
    </enumeration>
    <record name="Analysis" c:type="PangoAnalysis">
      <doc xml:space="preserve"
           filename="../pango/pango-item.h"
           line="63">The #PangoAnalysis structure stores information about
the properties of a segment of text.</doc>
      <source-position filename="../pango/pango-item.h" line="92"/>
      <field name="shape_engine" writable="1">
        <doc xml:space="preserve"
             filename="../pango/pango-item.h"
             line="65">unused</doc>
        <type name="EngineShape" c:type="PangoEngineShape*"/>
      </field>
      <field name="lang_engine" writable="1">
        <doc xml:space="preserve"
             filename="../pango/pango-item.h"
             line="66">unused</doc>
        <type name="EngineLang" c:type="PangoEngineLang*"/>
      </field>
      <field name="font" writable="1">
        <doc xml:space="preserve"
             filename="../pango/pango-item.h"
             line="67">the font for this segment.</doc>
        <type name="Font" c:type="PangoFont*"/>
      </field>
      <field name="level" writable="1">
        <doc xml:space="preserve"
             filename="../pango/pango-item.h"
             line="68">the bidirectional level for this segment.</doc>
        <type name="guint8" c:type="guint8"/>
      </field>
      <field name="gravity" writable="1">
        <doc xml:space="preserve"
             filename="../pango/pango-item.h"
             line="69">the glyph orientation for this segment (A #PangoGravity).</doc>
        <type name="guint8" c:type="guint8"/>
      </field>
      <field name="flags" writable="1">
        <doc xml:space="preserve"
             filename="../pango/pango-item.h"
             line="70">boolean flags for this segment (Since: 1.16).</doc>
        <type name="guint8" c:type="guint8"/>
      </field>
      <field name="script" writable="1">
        <doc xml:space="preserve"
             filename="../pango/pango-item.h"
             line="71">the detected script for this segment (A #PangoScript) (Since: 1.18).</doc>
        <type name="guint8" c:type="guint8"/>
      </field>
      <field name="language" writable="1">
        <doc xml:space="preserve"
             filename="../pango/pango-item.h"
             line="72">the detected language for this segment.</doc>
        <type name="Language" c:type="PangoLanguage*"/>
      </field>
      <field name="extra_attrs" writable="1">
        <doc xml:space="preserve"
             filename="../pango/pango-item.h"
             line="73">extra attributes for this segment.</doc>
        <type name="GLib.SList" c:type="GSList*">
          <type name="gpointer" c:type="gpointer"/>
        </type>
      </field>
    </record>
    <record name="AttrClass" c:type="PangoAttrClass">
      <doc xml:space="preserve"
           filename="../pango/pango-attributes.h"
           line="325">The #PangoAttrClass structure stores the type and operations for
a particular type of attribute. The functions in this structure should
not be called directly. Instead, one should use the wrapper functions
provided for #PangoAttribute.</doc>
      <source-position filename="../pango/pango-attributes.h" line="344"/>
      <field name="type" writable="1">
        <doc xml:space="preserve"
             filename="../pango/pango-attributes.h"
             line="327">the type ID for this attribute</doc>
        <type name="AttrType" c:type="PangoAttrType"/>
      </field>
      <field name="copy">
        <callback name="copy">
          <source-position filename="../pango/pango-attributes.h" line="341"/>
          <return-value transfer-ownership="full">
            <type name="Attribute" c:type="PangoAttribute*"/>
          </return-value>
          <parameters>
            <parameter name="attr" transfer-ownership="none">
              <type name="Attribute" c:type="const PangoAttribute*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="destroy">
        <callback name="destroy">
          <source-position filename="../pango/pango-attributes.h" line="342"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="attr" transfer-ownership="none">
              <type name="Attribute" c:type="PangoAttribute*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="equal">
        <callback name="equal">
          <source-position filename="../pango/pango-attributes.h" line="343"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="attr1" transfer-ownership="none">
              <type name="Attribute" c:type="const PangoAttribute*"/>
            </parameter>
            <parameter name="attr2" transfer-ownership="none">
              <type name="Attribute" c:type="const PangoAttribute*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <record name="AttrColor" c:type="PangoAttrColor">
      <doc xml:space="preserve"
           filename="../pango/pango-attributes.h"
           line="398">The #PangoAttrColor structure is used to represent attributes that
are colors.</doc>
      <source-position filename="../pango/pango-attributes.h" line="410"/>
      <field name="attr" writable="1">
        <doc xml:space="preserve"
             filename="../pango/pango-attributes.h"
             line="400">the common portion of the attribute</doc>
        <type name="Attribute" c:type="PangoAttribute"/>
      </field>
      <field name="color" writable="1">
        <doc xml:space="preserve"
             filename="../pango/pango-attributes.h"
             line="401">the #PangoColor which is the value of the attribute</doc>
        <type name="Color" c:type="PangoColor"/>
      </field>
    </record>
    <callback name="AttrDataCopyFunc" c:type="PangoAttrDataCopyFunc">
      <doc xml:space="preserve"
           filename="../pango/pango-attributes.h"
           line="315">Type of a function that can duplicate user data for an attribute.</doc>
      <source-position filename="../pango/pango-attributes.h" line="323"/>
      <return-value transfer-ownership="none" nullable="1">
        <doc xml:space="preserve"
             filename="../pango/pango-attributes.h"
             line="321">new copy of @user_data.</doc>
        <type name="gpointer" c:type="gpointer"/>
      </return-value>
      <parameters>
        <parameter name="user_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   closure="0">
          <doc xml:space="preserve"
               filename="../pango/pango-attributes.h"
               line="317">user data to copy</doc>
          <type name="gpointer" c:type="gconstpointer"/>
        </parameter>
      </parameters>
    </callback>
    <callback name="AttrFilterFunc" c:type="PangoAttrFilterFunc">
      <doc xml:space="preserve"
           filename="../pango/pango-attributes.h"
           line="302">Type of a function filtering a list of attributes.</doc>
      <source-position filename="../pango/pango-attributes.h" line="312"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../pango/pango-attributes.h"
             line="309">%TRUE if the attribute should be selected for
filtering, %FALSE otherwise.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="attribute" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../pango/pango-attributes.h"
               line="304">a Pango attribute</doc>
          <type name="Attribute" c:type="PangoAttribute*"/>
        </parameter>
        <parameter name="user_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   closure="1">
          <doc xml:space="preserve"
               filename="../pango/pango-attributes.h"
               line="305">user data passed to the function</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <record name="AttrFloat" c:type="PangoAttrFloat">
      <doc xml:space="preserve"
           filename="../pango/pango-attributes.h"
           line="385">The #PangoAttrFloat structure is used to represent attributes with
a float or double value.</doc>
      <source-position filename="../pango/pango-attributes.h" line="397"/>
      <field name="attr" writable="1">
        <doc xml:space="preserve"
             filename="../pango/pango-attributes.h"
             line="387">the common portion of the attribute</doc>
        <type name="Attribute" c:type="PangoAttribute"/>
      </field>
      <field name="value" writable="1">
        <doc xml:space="preserve"
             filename="../pango/pango-attributes.h"
             line="388">the value of the attribute</doc>
        <type name="gdouble" c:type="double"/>
      </field>
    </record>
    <record name="AttrFontDesc" c:type="PangoAttrFontDesc">
      <doc xml:space="preserve"
           filename="../pango/pango-attributes.h"
           line="455">The #PangoAttrFontDesc structure is used to store an attribute that
sets all aspects of the font description at once.</doc>
      <source-position filename="../pango/pango-attributes.h" line="467"/>
      <field name="attr" writable="1">
        <doc xml:space="preserve"
             filename="../pango/pango-attributes.h"
             line="457">the common portion of the attribute</doc>
        <type name="Attribute" c:type="PangoAttribute"/>
      </field>
      <field name="desc" writable="1">
        <doc xml:space="preserve"
             filename="../pango/pango-attributes.h"
             line="458">the font description which is the value of this attribute</doc>
        <type name="FontDescription" c:type="PangoFontDescription*"/>
      </field>
      <function name="new" c:identifier="pango_attr_font_desc_new">
        <doc xml:space="preserve"
             filename="../pango/pango-attributes.c"
             line="692">Create a new font description attribute. This attribute
allows setting family, style, weight, variant, stretch,
and size simultaneously.</doc>
        <source-position filename="../pango/pango-attributes.h" line="526"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../pango/pango-attributes.c"
               line="700">the newly allocated #PangoAttribute,
              which should be freed with pango_attribute_destroy().</doc>
          <type name="Attribute" c:type="PangoAttribute*"/>
        </return-value>
        <parameters>
          <parameter name="desc" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-attributes.c"
                 line="694">the font description</doc>
            <type name="FontDescription" c:type="const PangoFontDescription*"/>
          </parameter>
        </parameters>
      </function>
    </record>
    <record name="AttrFontFeatures"
            c:type="PangoAttrFontFeatures"
            version="1.38">
      <doc xml:space="preserve"
           filename="../pango/pango-attributes.h"
           line="469">The #PangoAttrFontFeatures structure is used to represent OpenType
font features as an attribute.</doc>
      <source-position filename="../pango/pango-attributes.h" line="483"/>
      <field name="attr" writable="1">
        <doc xml:space="preserve"
             filename="../pango/pango-attributes.h"
             line="471">the common portion of the attribute</doc>
        <type name="Attribute" c:type="PangoAttribute"/>
      </field>
      <field name="features" writable="1">
        <doc xml:space="preserve"
             filename="../pango/pango-attributes.h"
             line="472">the featues, as a string in CSS syntax</doc>
        <type name="utf8" c:type="gchar*"/>
      </field>
      <function name="new"
                c:identifier="pango_attr_font_features_new"
                version="1.38">
        <doc xml:space="preserve"
             filename="../pango/pango-attributes.c"
             line="1094">Create a new font features tag attribute.</doc>
        <source-position filename="../pango/pango-attributes.h" line="565"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../pango/pango-attributes.c"
               line="1100">the newly allocated #PangoAttribute,
              which should be freed with pango_attribute_destroy().</doc>
          <type name="Attribute" c:type="PangoAttribute*"/>
        </return-value>
        <parameters>
          <parameter name="features" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-attributes.c"
                 line="1096">a string with OpenType font features, in CSS syntax</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </function>
    </record>
    <record name="AttrInt" c:type="PangoAttrInt">
      <doc xml:space="preserve"
           filename="../pango/pango-attributes.h"
           line="372">The #PangoAttrInt structure is used to represent attributes with
an integer or enumeration value.</doc>
      <source-position filename="../pango/pango-attributes.h" line="384"/>
      <field name="attr" writable="1">
        <doc xml:space="preserve"
             filename="../pango/pango-attributes.h"
             line="374">the common portion of the attribute</doc>
        <type name="Attribute" c:type="PangoAttribute"/>
      </field>
      <field name="value" writable="1">
        <doc xml:space="preserve"
             filename="../pango/pango-attributes.h"
             line="375">the value of the attribute</doc>
        <type name="gint" c:type="int"/>
      </field>
    </record>
    <record name="AttrIterator"
            c:type="PangoAttrIterator"
            glib:type-name="PangoAttrIterator"
            glib:get-type="pango_attr_iterator_get_type"
            c:symbol-prefix="attr_iterator">
      <doc xml:space="preserve"
           filename="../pango/pango-attributes.h"
           line="99">The #PangoAttrIterator structure is used to represent an
iterator through a #PangoAttrList. A new iterator is created
with pango_attr_list_get_iterator(). Once the iterator
is created, it can be advanced through the style changes
in the text using pango_attr_iterator_next(). At each
style change, the range of the current style segment and the
attributes currently in effect can be queried.</doc>
      <source-position filename="../pango/pango-attributes.h" line="125"/>
      <method name="copy" c:identifier="pango_attr_iterator_copy">
        <doc xml:space="preserve"
             filename="../pango/pango-attributes.c"
             line="2065">Copy a #PangoAttrIterator</doc>
        <source-position filename="../pango/pango-attributes.h" line="658"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../pango/pango-attributes.c"
               line="2071">the newly allocated
              #PangoAttrIterator, which should be freed with
              pango_attr_iterator_destroy().</doc>
          <type name="AttrIterator" c:type="PangoAttrIterator*"/>
        </return-value>
        <parameters>
          <instance-parameter name="iterator" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-attributes.c"
                 line="2067">a #PangoAttrIterator.</doc>
            <type name="AttrIterator" c:type="PangoAttrIterator*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="destroy" c:identifier="pango_attr_iterator_destroy">
        <doc xml:space="preserve"
             filename="../pango/pango-attributes.c"
             line="2101">Destroy a #PangoAttrIterator and free all associated memory.</doc>
        <source-position filename="../pango/pango-attributes.h" line="660"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="iterator" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-attributes.c"
                 line="2103">a #PangoAttrIterator.</doc>
            <type name="AttrIterator" c:type="PangoAttrIterator*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get" c:identifier="pango_attr_iterator_get">
        <doc xml:space="preserve"
             filename="../pango/pango-attributes.c"
             line="2116">Find the current attribute of a particular type at the iterator
location. When multiple attributes of the same type overlap,
the attribute whose range starts closest to the current location
is used.</doc>
        <source-position filename="../pango/pango-attributes.h" line="662"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="../pango/pango-attributes.c"
               line="2126">the current attribute of the given type,
              or %NULL if no attribute of that type applies to the
              current location.</doc>
          <type name="Attribute" c:type="PangoAttribute*"/>
        </return-value>
        <parameters>
          <instance-parameter name="iterator" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-attributes.c"
                 line="2118">a #PangoAttrIterator</doc>
            <type name="AttrIterator" c:type="PangoAttrIterator*"/>
          </instance-parameter>
          <parameter name="type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-attributes.c"
                 line="2119">the type of attribute to find.</doc>
            <type name="AttrType" c:type="PangoAttrType"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_attrs"
              c:identifier="pango_attr_iterator_get_attrs"
              version="1.2">
        <doc xml:space="preserve"
             filename="../pango/pango-attributes.c"
             line="2369">Gets a list of all attributes at the current position of the
iterator.</doc>
        <source-position filename="../pango/pango-attributes.h" line="670"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../pango/pango-attributes.c"
               line="2376">a list of
  all attributes for the current range.
  To free this value, call pango_attribute_destroy() on
  each value and g_slist_free() on the list.</doc>
          <type name="GLib.SList" c:type="GSList*">
            <type name="Attribute"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="iterator" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-attributes.c"
                 line="2371">a #PangoAttrIterator</doc>
            <type name="AttrIterator" c:type="PangoAttrIterator*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_font" c:identifier="pango_attr_iterator_get_font">
        <doc xml:space="preserve"
             filename="../pango/pango-attributes.c"
             line="2152">Get the font and other attributes at the current iterator position.</doc>
        <source-position filename="../pango/pango-attributes.h" line="665"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="iterator" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-attributes.c"
                 line="2154">a #PangoAttrIterator</doc>
            <type name="AttrIterator" c:type="PangoAttrIterator*"/>
          </instance-parameter>
          <parameter name="desc" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-attributes.c"
                 line="2155">a #PangoFontDescription to fill in with the current values.
       The family name in this structure will be set using
       pango_font_description_set_family_static() using values from
       an attribute in the #PangoAttrList associated with the iterator,
       so if you plan to keep it around, you must call:
       &lt;literal&gt;pango_font_description_set_family (desc, pango_font_description_get_family (desc))&lt;/literal&gt;.</doc>
            <type name="FontDescription" c:type="PangoFontDescription*"/>
          </parameter>
          <parameter name="language"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../pango/pango-attributes.c"
                 line="2161">if non-%NULL, location to store language tag for item, or %NULL
           if none is found.</doc>
            <type name="Language" c:type="PangoLanguage**"/>
          </parameter>
          <parameter name="extra_attrs"
                     transfer-ownership="full"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../pango/pango-attributes.c"
                 line="2163">if non-%NULL,
          location in which to store a list of non-font
          attributes at the the current position; only the highest priority
          value of each attribute will be added to this list. In order
          to free this value, you must call pango_attribute_destroy() on
          each member.</doc>
            <type name="GLib.SList" c:type="GSList**">
              <type name="Attribute"/>
            </type>
          </parameter>
        </parameters>
      </method>
      <method name="next" c:identifier="pango_attr_iterator_next">
        <doc xml:space="preserve"
             filename="../pango/pango-attributes.c"
             line="1995">Advance the iterator until the next change of style.</doc>
        <source-position filename="../pango/pango-attributes.h" line="656"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../pango/pango-attributes.c"
               line="2001">%FALSE if the iterator is at the end of the list, otherwise %TRUE</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="iterator" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-attributes.c"
                 line="1997">a #PangoAttrIterator</doc>
            <type name="AttrIterator" c:type="PangoAttrIterator*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="range" c:identifier="pango_attr_iterator_range">
        <doc xml:space="preserve"
             filename="../pango/pango-attributes.c"
             line="1970">Get the range of the current segment. Note that the
stored return values are signed, not unsigned like
the values in #PangoAttribute. To deal with this API
oversight, stored return values that wouldn't fit into
a signed integer are clamped to %G_MAXINT.</doc>
        <source-position filename="../pango/pango-attributes.h" line="652"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="iterator" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-attributes.c"
                 line="1972">a #PangoAttrIterator</doc>
            <type name="AttrIterator" c:type="PangoAttrIterator*"/>
          </instance-parameter>
          <parameter name="start"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="../pango/pango-attributes.c"
                 line="1973">location to store the start of the range</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
          <parameter name="end"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="../pango/pango-attributes.c"
                 line="1974">location to store the end of the range</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
        </parameters>
      </method>
    </record>
    <record name="AttrLanguage" c:type="PangoAttrLanguage">
      <doc xml:space="preserve"
           filename="../pango/pango-attributes.h"
           line="359">The #PangoAttrLanguage structure is used to represent attributes that
are languages.</doc>
      <source-position filename="../pango/pango-attributes.h" line="371"/>
      <field name="attr" writable="1">
        <doc xml:space="preserve"
             filename="../pango/pango-attributes.h"
             line="361">the common portion of the attribute</doc>
        <type name="Attribute" c:type="PangoAttribute"/>
      </field>
      <field name="value" writable="1">
        <doc xml:space="preserve"
             filename="../pango/pango-attributes.h"
             line="362">the #PangoLanguage which is the value of the attribute</doc>
        <type name="Language" c:type="PangoLanguage*"/>
      </field>
      <function name="new" c:identifier="pango_attr_language_new">
        <doc xml:space="preserve"
             filename="../pango/pango-attributes.c"
             line="287">Create a new language tag attribute.</doc>
        <source-position filename="../pango/pango-attributes.h" line="502"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../pango/pango-attributes.c"
               line="293">the newly allocated #PangoAttribute,
              which should be freed with pango_attribute_destroy().</doc>
          <type name="Attribute" c:type="PangoAttribute*"/>
        </return-value>
        <parameters>
          <parameter name="language" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-attributes.c"
                 line="289">language tag</doc>
            <type name="Language" c:type="PangoLanguage*"/>
          </parameter>
        </parameters>
      </function>
    </record>
    <record name="AttrList"
            c:type="PangoAttrList"
            glib:type-name="PangoAttrList"
            glib:get-type="pango_attr_list_get_type"
            c:symbol-prefix="attr_list">
      <doc xml:space="preserve"
           filename="../pango/pango-attributes.h"
           line="110">The #PangoAttrList structure represents a list of attributes
that apply to a section of text. The attributes are, in general,
allowed to overlap in an arbitrary fashion, however, if the
attributes are manipulated only through pango_attr_list_change(),
the overlap between properties will meet stricter criteria.

Since the #PangoAttrList structure is stored as a linear list,
it is not suitable for storing attributes for large amounts
of text. In general, you should not use a single #PangoAttrList
for more than one paragraph of text.</doc>
      <source-position filename="../pango/pango-attributes.h" line="124"/>
      <constructor name="new" c:identifier="pango_attr_list_new">
        <doc xml:space="preserve"
             filename="../pango/pango-attributes.c"
             line="1316">Create a new empty attribute list with a reference count of one.</doc>
        <source-position filename="../pango/pango-attributes.h" line="606"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../pango/pango-attributes.c"
               line="1321">the newly allocated #PangoAttrList,
              which should be freed with pango_attr_list_unref().</doc>
          <type name="AttrList" c:type="PangoAttrList*"/>
        </return-value>
      </constructor>
      <method name="change" c:identifier="pango_attr_list_change">
        <doc xml:space="preserve"
             filename="../pango/pango-attributes.c"
             line="1508">Insert the given attribute into the #PangoAttrList. It will
replace any attributes of the same type on that segment
and be merged with any adjoining attributes that are identical.

This function is slower than pango_attr_list_insert() for
creating an attribute list in order (potentially much slower
for large lists). However, pango_attr_list_insert() is not
suitable for continually changing a set of attributes
since it never removes or combines existing attributes.</doc>
        <source-position filename="../pango/pango-attributes.h" line="620"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="list" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-attributes.c"
                 line="1510">a #PangoAttrList</doc>
            <type name="AttrList" c:type="PangoAttrList*"/>
          </instance-parameter>
          <parameter name="attr" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="../pango/pango-attributes.c"
                 line="1511">the attribute to insert. Ownership of this
       value is assumed by the list.</doc>
            <type name="Attribute" c:type="PangoAttribute*"/>
          </parameter>
        </parameters>
      </method>
      <method name="copy" c:identifier="pango_attr_list_copy">
        <doc xml:space="preserve"
             filename="../pango/pango-attributes.c"
             line="1396">Copy @list and return an identical new list.</doc>
        <source-position filename="../pango/pango-attributes.h" line="612"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="../pango/pango-attributes.c"
               line="1402">the newly allocated #PangoAttrList, with a
              reference count of one, which should
              be freed with pango_attr_list_unref().
              Returns %NULL if @list was %NULL.</doc>
          <type name="AttrList" c:type="PangoAttrList*"/>
        </return-value>
        <parameters>
          <instance-parameter name="list"
                              transfer-ownership="none"
                              nullable="1"
                              allow-none="1">
            <doc xml:space="preserve"
                 filename="../pango/pango-attributes.c"
                 line="1398">a #PangoAttrList, may be %NULL</doc>
            <type name="AttrList" c:type="PangoAttrList*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="equal" c:identifier="pango_attr_list_equal" version="1.46">
        <doc xml:space="preserve"
             filename="../pango/pango-attributes.c"
             line="1852">Checks whether @list and @other_list contain the same attributes and
whether those attributes apply to the same ranges. Beware that this
will return wrong values if any list contains duplicates.</doc>
        <source-position filename="../pango/pango-attributes.h" line="642"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../pango/pango-attributes.c"
               line="1861">%TRUE if the lists are equal, %FALSE if they aren't.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="list" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-attributes.c"
                 line="1854">a #PangoAttrList</doc>
            <type name="AttrList" c:type="PangoAttrList*"/>
          </instance-parameter>
          <parameter name="other_list" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-attributes.c"
                 line="1855">the other #PangoAttrList</doc>
            <type name="AttrList" c:type="PangoAttrList*"/>
          </parameter>
        </parameters>
      </method>
      <method name="filter"
              c:identifier="pango_attr_list_filter"
              version="1.2">
        <doc xml:space="preserve"
             filename="../pango/pango-attributes.c"
             line="2316">Given a #PangoAttrList and callback function, removes any elements
of @list for which @func returns %TRUE and inserts them into
a new list.</doc>
        <source-position filename="../pango/pango-attributes.h" line="634"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="../pango/pango-attributes.c"
               line="2327">the new #PangoAttrList or
 %NULL if no attributes of the given types were found.</doc>
          <type name="AttrList" c:type="PangoAttrList*"/>
        </return-value>
        <parameters>
          <instance-parameter name="list" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-attributes.c"
                 line="2318">a #PangoAttrList</doc>
            <type name="AttrList" c:type="PangoAttrList*"/>
          </instance-parameter>
          <parameter name="func"
                     transfer-ownership="none"
                     scope="call"
                     closure="1">
            <doc xml:space="preserve"
                 filename="../pango/pango-attributes.c"
                 line="2319">callback function; returns %TRUE
       if an attribute should be filtered out.</doc>
            <type name="AttrFilterFunc" c:type="PangoAttrFilterFunc"/>
          </parameter>
          <parameter name="data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../pango/pango-attributes.c"
                 line="2321">Data to be passed to @func</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_attributes"
              c:identifier="pango_attr_list_get_attributes"
              version="1.44">
        <doc xml:space="preserve"
             filename="../pango/pango-attributes.c"
             line="1818">Gets a list of all attributes in @list.</doc>
        <source-position filename="../pango/pango-attributes.h" line="639"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../pango/pango-attributes.c"
               line="1824">
  a list of all attributes in @list. To free this value, call
  pango_attribute_destroy() on each value and g_slist_free()
  on the list.</doc>
          <type name="GLib.SList" c:type="GSList*">
            <type name="Attribute"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="list" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-attributes.c"
                 line="1820">a #PangoAttrList</doc>
            <type name="AttrList" c:type="PangoAttrList*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_iterator" c:identifier="pango_attr_list_get_iterator">
        <doc xml:space="preserve"
             filename="../pango/pango-attributes.c"
             line="1947">Create a iterator initialized to the beginning of the list.
@list must not be modified until this iterator is freed.</doc>
        <source-position filename="../pango/pango-attributes.h" line="649"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../pango/pango-attributes.c"
               line="1954">the newly allocated #PangoAttrIterator, which should
              be freed with pango_attr_iterator_destroy().</doc>
          <type name="AttrIterator" c:type="PangoAttrIterator*"/>
        </return-value>
        <parameters>
          <instance-parameter name="list" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-attributes.c"
                 line="1949">a #PangoAttrList</doc>
            <type name="AttrList" c:type="PangoAttrList*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="insert" c:identifier="pango_attr_list_insert">
        <doc xml:space="preserve"
             filename="../pango/pango-attributes.c"
             line="1468">Insert the given attribute into the #PangoAttrList. It will
be inserted after all other attributes with a matching
@start_index.</doc>
        <source-position filename="../pango/pango-attributes.h" line="614"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="list" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-attributes.c"
                 line="1470">a #PangoAttrList</doc>
            <type name="AttrList" c:type="PangoAttrList*"/>
          </instance-parameter>
          <parameter name="attr" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="../pango/pango-attributes.c"
                 line="1471">the attribute to insert. Ownership of this
       value is assumed by the list.</doc>
            <type name="Attribute" c:type="PangoAttribute*"/>
          </parameter>
        </parameters>
      </method>
      <method name="insert_before"
              c:identifier="pango_attr_list_insert_before">
        <doc xml:space="preserve"
             filename="../pango/pango-attributes.c"
             line="1488">Insert the given attribute into the #PangoAttrList. It will
be inserted before all other attributes with a matching
@start_index.</doc>
        <source-position filename="../pango/pango-attributes.h" line="617"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="list" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-attributes.c"
                 line="1490">a #PangoAttrList</doc>
            <type name="AttrList" c:type="PangoAttrList*"/>
          </instance-parameter>
          <parameter name="attr" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="../pango/pango-attributes.c"
                 line="1491">the attribute to insert. Ownership of this
       value is assumed by the list.</doc>
            <type name="Attribute" c:type="PangoAttribute*"/>
          </parameter>
        </parameters>
      </method>
      <method name="ref" c:identifier="pango_attr_list_ref" version="1.10">
        <doc xml:space="preserve"
             filename="../pango/pango-attributes.c"
             line="1334">Increase the reference count of the given attribute list by one.</doc>
        <source-position filename="../pango/pango-attributes.h" line="608"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../pango/pango-attributes.c"
               line="1340">The attribute list passed in</doc>
          <type name="AttrList" c:type="PangoAttrList*"/>
        </return-value>
        <parameters>
          <instance-parameter name="list"
                              transfer-ownership="none"
                              nullable="1"
                              allow-none="1">
            <doc xml:space="preserve"
                 filename="../pango/pango-attributes.c"
                 line="1336">a #PangoAttrList, may be %NULL</doc>
            <type name="AttrList" c:type="PangoAttrList*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="splice" c:identifier="pango_attr_list_splice">
        <doc xml:space="preserve"
             filename="../pango/pango-attributes.c"
             line="1737">This function opens up a hole in @list, fills it in with attributes from
the left, and then merges @other on top of the hole.

This operation is equivalent to stretching every attribute
that applies at position @pos in @list by an amount @len,
and then calling pango_attr_list_change() with a copy
of each attribute in @other in sequence (offset in position by @pos).

This operation proves useful for, for instance, inserting
a pre-edit string in the middle of an edit buffer.</doc>
        <source-position filename="../pango/pango-attributes.h" line="623"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="list" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-attributes.c"
                 line="1739">a #PangoAttrList</doc>
            <type name="AttrList" c:type="PangoAttrList*"/>
          </instance-parameter>
          <parameter name="other" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-attributes.c"
                 line="1740">another #PangoAttrList</doc>
            <type name="AttrList" c:type="PangoAttrList*"/>
          </parameter>
          <parameter name="pos" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-attributes.c"
                 line="1741">the position in @list at which to insert @other</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="len" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-attributes.c"
                 line="1742">the length of the spliced segment. (Note that this
      must be specified since the attributes in @other
      may only be present at some subsection of this range)</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="unref" c:identifier="pango_attr_list_unref">
        <doc xml:space="preserve"
             filename="../pango/pango-attributes.c"
             line="1373">Decrease the reference count of the given attribute list by one.
If the result is zero, free the attribute list and the attributes
it contains.</doc>
        <source-position filename="../pango/pango-attributes.h" line="610"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="list"
                              transfer-ownership="none"
                              nullable="1"
                              allow-none="1">
            <doc xml:space="preserve"
                 filename="../pango/pango-attributes.c"
                 line="1375">a #PangoAttrList, may be %NULL</doc>
            <type name="AttrList" c:type="PangoAttrList*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="update"
              c:identifier="pango_attr_list_update"
              version="1.44">
        <doc xml:space="preserve"
             filename="../pango/pango-attributes.c"
             line="1666">Update indices of attributes in @list for
a change in the text they refer to.

The change that this function applies is
removing @remove bytes at position @pos
and inserting @add bytes instead.

Attributes that fall entirely in the
(@pos, @pos + @remove) range are removed.

Attributes that start or end inside the
(@pos, @pos + @remove) range are shortened to
reflect the removal.

Attributes start and end positions are updated
if they are behind @pos + @remove.</doc>
        <source-position filename="../pango/pango-attributes.h" line="628"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="list" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-attributes.c"
                 line="1668">a #PangoAttrList</doc>
            <type name="AttrList" c:type="PangoAttrList*"/>
          </instance-parameter>
          <parameter name="pos" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-attributes.c"
                 line="1669">the position of the change</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="remove" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-attributes.c"
                 line="1670">the number of removed bytes</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="add" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-attributes.c"
                 line="1671">the number of added bytes</doc>
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </method>
    </record>
    <record name="AttrShape" c:type="PangoAttrShape">
      <doc xml:space="preserve"
           filename="../pango/pango-attributes.h"
           line="432">The #PangoAttrShape structure is used to represent attributes which
impose shape restrictions.</doc>
      <source-position filename="../pango/pango-attributes.h" line="453"/>
      <field name="attr" writable="1">
        <doc xml:space="preserve"
             filename="../pango/pango-attributes.h"
             line="434">the common portion of the attribute</doc>
        <type name="Attribute" c:type="PangoAttribute"/>
      </field>
      <field name="ink_rect" writable="1">
        <doc xml:space="preserve"
             filename="../pango/pango-attributes.h"
             line="435">the ink rectangle to restrict to</doc>
        <type name="Rectangle" c:type="PangoRectangle"/>
      </field>
      <field name="logical_rect" writable="1">
        <doc xml:space="preserve"
             filename="../pango/pango-attributes.h"
             line="436">the logical rectangle to restrict to</doc>
        <type name="Rectangle" c:type="PangoRectangle"/>
      </field>
      <field name="data" writable="1">
        <doc xml:space="preserve"
             filename="../pango/pango-attributes.h"
             line="437">user data set (see pango_attr_shape_new_with_data())</doc>
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="copy_func" writable="1">
        <doc xml:space="preserve"
             filename="../pango/pango-attributes.h"
             line="438">copy function for the user data</doc>
        <type name="AttrDataCopyFunc" c:type="PangoAttrDataCopyFunc"/>
      </field>
      <field name="destroy_func" writable="1">
        <doc xml:space="preserve"
             filename="../pango/pango-attributes.h"
             line="439">destroy function for the user data</doc>
        <type name="GLib.DestroyNotify" c:type="GDestroyNotify"/>
      </field>
      <function name="new" c:identifier="pango_attr_shape_new">
        <doc xml:space="preserve"
             filename="../pango/pango-attributes.c"
             line="1020">Create a new shape attribute. A shape is used to impose a
particular ink and logical rectangle on the result of shaping a
particular glyph. This might be used, for instance, for
embedding a picture or a widget inside a #PangoLayout.</doc>
        <source-position filename="../pango/pango-attributes.h" line="551"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../pango/pango-attributes.c"
               line="1030">the newly allocated #PangoAttribute,
              which should be freed with pango_attribute_destroy().</doc>
          <type name="Attribute" c:type="PangoAttribute*"/>
        </return-value>
        <parameters>
          <parameter name="ink_rect" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-attributes.c"
                 line="1022">ink rectangle to assign to each character</doc>
            <type name="Rectangle" c:type="const PangoRectangle*"/>
          </parameter>
          <parameter name="logical_rect" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-attributes.c"
                 line="1023">logical rectangle to assign to each character</doc>
            <type name="Rectangle" c:type="const PangoRectangle*"/>
          </parameter>
        </parameters>
      </function>
      <function name="new_with_data"
                c:identifier="pango_attr_shape_new_with_data"
                version="1.8">
        <doc xml:space="preserve"
             filename="../pango/pango-attributes.c"
             line="970">Like pango_attr_shape_new(), but a user data pointer is also
provided; this pointer can be accessed when later
rendering the glyph.</doc>
        <source-position filename="../pango/pango-attributes.h" line="554"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../pango/pango-attributes.c"
               line="985">the newly allocated #PangoAttribute, which should be
              freed with pango_attribute_destroy().</doc>
          <type name="Attribute" c:type="PangoAttribute*"/>
        </return-value>
        <parameters>
          <parameter name="ink_rect" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-attributes.c"
                 line="972">ink rectangle to assign to each character</doc>
            <type name="Rectangle" c:type="const PangoRectangle*"/>
          </parameter>
          <parameter name="logical_rect" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-attributes.c"
                 line="973">logical rectangle to assign to each character</doc>
            <type name="Rectangle" c:type="const PangoRectangle*"/>
          </parameter>
          <parameter name="data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../pango/pango-attributes.c"
                 line="974">user data pointer</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="copy_func"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="notified"
                     destroy="4">
            <doc xml:space="preserve"
                 filename="../pango/pango-attributes.c"
                 line="975">function to copy @data when the
               attribute is copied. If %NULL, @data is simply
               copied as a pointer.</doc>
            <type name="AttrDataCopyFunc" c:type="PangoAttrDataCopyFunc"/>
          </parameter>
          <parameter name="destroy_func"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async">
            <doc xml:space="preserve"
                 filename="../pango/pango-attributes.c"
                 line="978">function to free @data when the
               attribute is freed, or %NULL</doc>
            <type name="GLib.DestroyNotify" c:type="GDestroyNotify"/>
          </parameter>
        </parameters>
      </function>
    </record>
    <record name="AttrSize" c:type="PangoAttrSize">
      <doc xml:space="preserve"
           filename="../pango/pango-attributes.h"
           line="412">The #PangoAttrSize structure is used to represent attributes which
set font size.</doc>
      <source-position filename="../pango/pango-attributes.h" line="430"/>
      <field name="attr" writable="1">
        <doc xml:space="preserve"
             filename="../pango/pango-attributes.h"
             line="414">the common portion of the attribute</doc>
        <type name="Attribute" c:type="PangoAttribute"/>
      </field>
      <field name="size" writable="1">
        <doc xml:space="preserve"
             filename="../pango/pango-attributes.h"
             line="415">size of font, in units of 1/%PANGO_SCALE of a point (for
%PANGO_ATTR_SIZE) or of a device uni (for %PANGO_ATTR_ABSOLUTE_SIZE)</doc>
        <type name="gint" c:type="int"/>
      </field>
      <field name="absolute" writable="1" bits="1">
        <doc xml:space="preserve"
             filename="../pango/pango-attributes.h"
             line="417">whether the font size is in device units or points.
This field is only present for compatibility with Pango-1.8.0
(%PANGO_ATTR_ABSOLUTE_SIZE was added in 1.8.1); and always will
be %FALSE for %PANGO_ATTR_SIZE and %TRUE for %PANGO_ATTR_ABSOLUTE_SIZE.</doc>
        <type name="guint" c:type="guint"/>
      </field>
      <function name="new" c:identifier="pango_attr_size_new">
        <doc xml:space="preserve"
             filename="../pango/pango-attributes.c"
             line="543">Create a new font-size attribute in fractional points.</doc>
        <source-position filename="../pango/pango-attributes.h" line="514"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../pango/pango-attributes.c"
               line="549">the newly allocated #PangoAttribute,
              which should be freed with pango_attribute_destroy().</doc>
          <type name="Attribute" c:type="PangoAttribute*"/>
        </return-value>
        <parameters>
          <parameter name="size" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-attributes.c"
                 line="545">the font size, in %PANGO_SCALEths of a point.</doc>
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </function>
      <function name="new_absolute"
                c:identifier="pango_attr_size_new_absolute"
                version="1.8">
        <doc xml:space="preserve"
             filename="../pango/pango-attributes.c"
             line="558">Create a new font-size attribute in device units.</doc>
        <source-position filename="../pango/pango-attributes.h" line="516"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../pango/pango-attributes.c"
               line="564">the newly allocated #PangoAttribute, which should be
              freed with pango_attribute_destroy().</doc>
          <type name="Attribute" c:type="PangoAttribute*"/>
        </return-value>
        <parameters>
          <parameter name="size" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-attributes.c"
                 line="560">the font size, in %PANGO_SCALEths of a device unit.</doc>
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </function>
    </record>
    <record name="AttrString" c:type="PangoAttrString">
      <doc xml:space="preserve"
           filename="../pango/pango-attributes.h"
           line="346">The #PangoAttrString structure is used to represent attributes with
a string value.</doc>
      <source-position filename="../pango/pango-attributes.h" line="358"/>
      <field name="attr" writable="1">
        <doc xml:space="preserve"
             filename="../pango/pango-attributes.h"
             line="348">the common portion of the attribute</doc>
        <type name="Attribute" c:type="PangoAttribute"/>
      </field>
      <field name="value" writable="1">
        <doc xml:space="preserve"
             filename="../pango/pango-attributes.h"
             line="349">the string which is the value of the attribute</doc>
        <type name="utf8" c:type="char*"/>
      </field>
    </record>
    <enumeration name="AttrType"
                 glib:type-name="PangoAttrType"
                 glib:get-type="pango_attr_type_get_type"
                 c:type="PangoAttrType">
      <doc xml:space="preserve"
           filename="../pango/pango-attributes.h"
           line="127">The #PangoAttrType
distinguishes between different types of attributes. Along with the
predefined values, it is possible to allocate additional values
for custom attributes using pango_attr_type_register(). The predefined
values are given below. The type of structure used to store the
attribute is listed in parentheses after the description.</doc>
      <member name="invalid"
              value="0"
              c:identifier="PANGO_ATTR_INVALID"
              glib:nick="invalid">
        <doc xml:space="preserve"
             filename="../pango/pango-attributes.h"
             line="129">does not happen</doc>
      </member>
      <member name="language"
              value="1"
              c:identifier="PANGO_ATTR_LANGUAGE"
              glib:nick="language">
        <doc xml:space="preserve"
             filename="../pango/pango-attributes.h"
             line="130">language (#PangoAttrLanguage)</doc>
      </member>
      <member name="family"
              value="2"
              c:identifier="PANGO_ATTR_FAMILY"
              glib:nick="family">
        <doc xml:space="preserve"
             filename="../pango/pango-attributes.h"
             line="131">font family name list (#PangoAttrString)</doc>
      </member>
      <member name="style"
              value="3"
              c:identifier="PANGO_ATTR_STYLE"
              glib:nick="style">
        <doc xml:space="preserve"
             filename="../pango/pango-attributes.h"
             line="132">font slant style (#PangoAttrInt)</doc>
      </member>
      <member name="weight"
              value="4"
              c:identifier="PANGO_ATTR_WEIGHT"
              glib:nick="weight">
        <doc xml:space="preserve"
             filename="../pango/pango-attributes.h"
             line="133">font weight (#PangoAttrInt)</doc>
      </member>
      <member name="variant"
              value="5"
              c:identifier="PANGO_ATTR_VARIANT"
              glib:nick="variant">
        <doc xml:space="preserve"
             filename="../pango/pango-attributes.h"
             line="134">font variant (normal or small caps) (#PangoAttrInt)</doc>
      </member>
      <member name="stretch"
              value="6"
              c:identifier="PANGO_ATTR_STRETCH"
              glib:nick="stretch">
        <doc xml:space="preserve"
             filename="../pango/pango-attributes.h"
             line="135">font stretch (#PangoAttrInt)</doc>
      </member>
      <member name="size"
              value="7"
              c:identifier="PANGO_ATTR_SIZE"
              glib:nick="size">
        <doc xml:space="preserve"
             filename="../pango/pango-attributes.h"
             line="136">font size in points scaled by %PANGO_SCALE (#PangoAttrInt)</doc>
      </member>
      <member name="font_desc"
              value="8"
              c:identifier="PANGO_ATTR_FONT_DESC"
              glib:nick="font-desc">
        <doc xml:space="preserve"
             filename="../pango/pango-attributes.h"
             line="137">font description (#PangoAttrFontDesc)</doc>
      </member>
      <member name="foreground"
              value="9"
              c:identifier="PANGO_ATTR_FOREGROUND"
              glib:nick="foreground">
        <doc xml:space="preserve"
             filename="../pango/pango-attributes.h"
             line="138">foreground color (#PangoAttrColor)</doc>
      </member>
      <member name="background"
              value="10"
              c:identifier="PANGO_ATTR_BACKGROUND"
              glib:nick="background">
        <doc xml:space="preserve"
             filename="../pango/pango-attributes.h"
             line="139">background color (#PangoAttrColor)</doc>
      </member>
      <member name="underline"
              value="11"
              c:identifier="PANGO_ATTR_UNDERLINE"
              glib:nick="underline">
        <doc xml:space="preserve"
             filename="../pango/pango-attributes.h"
             line="140">whether the text has an underline (#PangoAttrInt)</doc>
      </member>
      <member name="strikethrough"
              value="12"
              c:identifier="PANGO_ATTR_STRIKETHROUGH"
              glib:nick="strikethrough">
        <doc xml:space="preserve"
             filename="../pango/pango-attributes.h"
             line="141">whether the text is struck-through (#PangoAttrInt)</doc>
      </member>
      <member name="rise"
              value="13"
              c:identifier="PANGO_ATTR_RISE"
              glib:nick="rise">
        <doc xml:space="preserve"
             filename="../pango/pango-attributes.h"
             line="142">baseline displacement (#PangoAttrInt)</doc>
      </member>
      <member name="shape"
              value="14"
              c:identifier="PANGO_ATTR_SHAPE"
              glib:nick="shape">
        <doc xml:space="preserve"
             filename="../pango/pango-attributes.h"
             line="143">shape (#PangoAttrShape)</doc>
      </member>
      <member name="scale"
              value="15"
              c:identifier="PANGO_ATTR_SCALE"
              glib:nick="scale">
        <doc xml:space="preserve"
             filename="../pango/pango-attributes.h"
             line="144">font size scale factor (#PangoAttrFloat)</doc>
      </member>
      <member name="fallback"
              value="16"
              c:identifier="PANGO_ATTR_FALLBACK"
              glib:nick="fallback">
        <doc xml:space="preserve"
             filename="../pango/pango-attributes.h"
             line="145">whether fallback is enabled (#PangoAttrInt)</doc>
      </member>
      <member name="letter_spacing"
              value="17"
              c:identifier="PANGO_ATTR_LETTER_SPACING"
              glib:nick="letter-spacing">
        <doc xml:space="preserve"
             filename="../pango/pango-attributes.h"
             line="146">letter spacing (#PangoAttrInt)</doc>
      </member>
      <member name="underline_color"
              value="18"
              c:identifier="PANGO_ATTR_UNDERLINE_COLOR"
              glib:nick="underline-color">
        <doc xml:space="preserve"
             filename="../pango/pango-attributes.h"
             line="147">underline color (#PangoAttrColor)</doc>
      </member>
      <member name="strikethrough_color"
              value="19"
              c:identifier="PANGO_ATTR_STRIKETHROUGH_COLOR"
              glib:nick="strikethrough-color">
        <doc xml:space="preserve"
             filename="../pango/pango-attributes.h"
             line="148">strikethrough color (#PangoAttrColor)</doc>
      </member>
      <member name="absolute_size"
              value="20"
              c:identifier="PANGO_ATTR_ABSOLUTE_SIZE"
              glib:nick="absolute-size">
        <doc xml:space="preserve"
             filename="../pango/pango-attributes.h"
             line="149">font size in pixels scaled by %PANGO_SCALE (#PangoAttrInt)</doc>
      </member>
      <member name="gravity"
              value="21"
              c:identifier="PANGO_ATTR_GRAVITY"
              glib:nick="gravity">
        <doc xml:space="preserve"
             filename="../pango/pango-attributes.h"
             line="150">base text gravity (#PangoAttrInt)</doc>
      </member>
      <member name="gravity_hint"
              value="22"
              c:identifier="PANGO_ATTR_GRAVITY_HINT"
              glib:nick="gravity-hint">
        <doc xml:space="preserve"
             filename="../pango/pango-attributes.h"
             line="151">gravity hint (#PangoAttrInt)</doc>
      </member>
      <member name="font_features"
              value="23"
              c:identifier="PANGO_ATTR_FONT_FEATURES"
              glib:nick="font-features">
        <doc xml:space="preserve"
             filename="../pango/pango-attributes.h"
             line="152">OpenType font features (#PangoAttrString). Since 1.38</doc>
      </member>
      <member name="foreground_alpha"
              value="24"
              c:identifier="PANGO_ATTR_FOREGROUND_ALPHA"
              glib:nick="foreground-alpha">
        <doc xml:space="preserve"
             filename="../pango/pango-attributes.h"
             line="153">foreground alpha (#PangoAttrInt). Since 1.38</doc>
      </member>
      <member name="background_alpha"
              value="25"
              c:identifier="PANGO_ATTR_BACKGROUND_ALPHA"
              glib:nick="background-alpha">
        <doc xml:space="preserve"
             filename="../pango/pango-attributes.h"
             line="154">background alpha (#PangoAttrInt). Since 1.38</doc>
      </member>
      <member name="allow_breaks"
              value="26"
              c:identifier="PANGO_ATTR_ALLOW_BREAKS"
              glib:nick="allow-breaks">
        <doc xml:space="preserve"
             filename="../pango/pango-attributes.h"
             line="155">whether breaks are allowed (#PangoAttrInt). Since 1.44</doc>
      </member>
      <member name="show"
              value="27"
              c:identifier="PANGO_ATTR_SHOW"
              glib:nick="show">
        <doc xml:space="preserve"
             filename="../pango/pango-attributes.h"
             line="156">how to render invisible characters (#PangoAttrInt). Since 1.44</doc>
      </member>
      <member name="insert_hyphens"
              value="28"
              c:identifier="PANGO_ATTR_INSERT_HYPHENS"
              glib:nick="insert-hyphens">
        <doc xml:space="preserve"
             filename="../pango/pango-attributes.h"
             line="157">whether to insert hyphens at intra-word line breaks (#PangoAttrInt). Since 1.44</doc>
      </member>
      <member name="overline"
              value="29"
              c:identifier="PANGO_ATTR_OVERLINE"
              glib:nick="overline">
        <doc xml:space="preserve"
             filename="../pango/pango-attributes.h"
             line="158">whether the text has an overline (#PangoAttrInt). Since 1.46</doc>
      </member>
      <member name="overline_color"
              value="30"
              c:identifier="PANGO_ATTR_OVERLINE_COLOR"
              glib:nick="overline-color">
        <doc xml:space="preserve"
             filename="../pango/pango-attributes.h"
             line="159">overline color (#PangoAttrColor). Since 1.46</doc>
      </member>
      <function name="get_name"
                c:identifier="pango_attr_type_get_name"
                version="1.22">
        <doc xml:space="preserve"
             filename="../pango/pango-attributes.c"
             line="89">Fetches the attribute type name passed in when registering the type using
pango_attr_type_register().

The returned value is an interned string (see g_intern_string() for what
that means) that should not be modified or freed.</doc>
        <source-position filename="../pango/pango-attributes.h" line="488"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="../pango/pango-attributes.c"
               line="99">the type ID name (which may be %NULL), or
%NULL if @type is a built-in Pango attribute type or invalid.</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <parameter name="type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-attributes.c"
                 line="91">an attribute type ID to fetch the name for</doc>
            <type name="AttrType" c:type="PangoAttrType"/>
          </parameter>
        </parameters>
      </function>
      <function name="register" c:identifier="pango_attr_type_register">
        <doc xml:space="preserve"
             filename="../pango/pango-attributes.c"
             line="57">Allocate a new attribute type ID.  The attribute type name can be accessed
later by using pango_attr_type_get_name().</doc>
        <source-position filename="../pango/pango-attributes.h" line="486"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../pango/pango-attributes.c"
               line="64">the new type ID.</doc>
          <type name="AttrType" c:type="PangoAttrType"/>
        </return-value>
        <parameters>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-attributes.c"
                 line="59">an identifier for the type</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </function>
    </enumeration>
    <record name="Attribute"
            c:type="PangoAttribute"
            glib:type-name="PangoAttribute"
            glib:get-type="pango_attribute_get_type"
            c:symbol-prefix="attribute">
      <doc xml:space="preserve"
           filename="../pango/pango-attributes.h"
           line="281">The #PangoAttribute structure represents the common portions of all
attributes. Particular types of attributes include this structure
as their initial portion. The common portion of the attribute holds
the range to which the value in the type-specific part of the attribute
applies and should be initialized using pango_attribute_init().
By default an attribute will have an all-inclusive range of [0,%G_MAXUINT].</doc>
      <source-position filename="../pango/pango-attributes.h" line="300"/>
      <field name="klass" writable="1">
        <doc xml:space="preserve"
             filename="../pango/pango-attributes.h"
             line="283">the class structure holding information about the type of the attribute</doc>
        <type name="AttrClass" c:type="const PangoAttrClass*"/>
      </field>
      <field name="start_index" writable="1">
        <doc xml:space="preserve"
             filename="../pango/pango-attributes.h"
             line="284">the start index of the range (in bytes).</doc>
        <type name="guint" c:type="guint"/>
      </field>
      <field name="end_index" writable="1">
        <doc xml:space="preserve"
             filename="../pango/pango-attributes.h"
             line="285">end index of the range (in bytes). The character at this index
is not included in the range.</doc>
        <type name="guint" c:type="guint"/>
      </field>
      <method name="copy" c:identifier="pango_attribute_copy">
        <doc xml:space="preserve"
             filename="../pango/pango-attributes.c"
             line="144">Make a copy of an attribute.</doc>
        <source-position filename="../pango/pango-attributes.h" line="494"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../pango/pango-attributes.c"
               line="150">the newly allocated #PangoAttribute,
              which should be freed with pango_attribute_destroy().</doc>
          <type name="Attribute" c:type="PangoAttribute*"/>
        </return-value>
        <parameters>
          <instance-parameter name="attr" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-attributes.c"
                 line="146">a #PangoAttribute</doc>
            <type name="Attribute" c:type="const PangoAttribute*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="destroy" c:identifier="pango_attribute_destroy">
        <doc xml:space="preserve"
             filename="../pango/pango-attributes.c"
             line="167">Destroy a #PangoAttribute and free all associated memory.</doc>
        <source-position filename="../pango/pango-attributes.h" line="496"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="attr" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-attributes.c"
                 line="169">a #PangoAttribute.</doc>
            <type name="Attribute" c:type="PangoAttribute*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="equal" c:identifier="pango_attribute_equal">
        <doc xml:space="preserve"
             filename="../pango/pango-attributes.c"
             line="185">Compare two attributes for equality. This compares only the
actual value of the two attributes and not the ranges that the
attributes apply to.</doc>
        <source-position filename="../pango/pango-attributes.h" line="498"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../pango/pango-attributes.c"
               line="194">%TRUE if the two attributes have the same value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="attr1" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-attributes.c"
                 line="187">a #PangoAttribute</doc>
            <type name="Attribute" c:type="const PangoAttribute*"/>
          </instance-parameter>
          <parameter name="attr2" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-attributes.c"
                 line="188">another #PangoAttribute</doc>
            <type name="Attribute" c:type="const PangoAttribute*"/>
          </parameter>
        </parameters>
      </method>
      <method name="init" c:identifier="pango_attribute_init" version="1.20">
        <doc xml:space="preserve"
             filename="../pango/pango-attributes.c"
             line="119">Initializes @attr's klass to @klass,
it's start_index to %PANGO_ATTR_INDEX_FROM_TEXT_BEGINNING
and end_index to %PANGO_ATTR_INDEX_TO_TEXT_END
such that the attribute applies
to the entire text by default.</doc>
        <source-position filename="../pango/pango-attributes.h" line="491"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="attr" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-attributes.c"
                 line="121">a #PangoAttribute</doc>
            <type name="Attribute" c:type="PangoAttribute*"/>
          </instance-parameter>
          <parameter name="klass" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-attributes.c"
                 line="122">a #PangoAttrClass</doc>
            <type name="AttrClass" c:type="const PangoAttrClass*"/>
          </parameter>
        </parameters>
      </method>
    </record>
    <enumeration name="BidiType"
                 version="1.22"
                 deprecated="1"
                 deprecated-version="1.44"
                 glib:type-name="PangoBidiType"
                 glib:get-type="pango_bidi_type_get_type"
                 c:type="PangoBidiType">
      <doc xml:space="preserve"
           filename="../pango/pango-bidi-type.h"
           line="33">The #PangoBidiType type represents the bidirectional character
type of a Unicode character as specified by the
&lt;ulink url="http://www.unicode.org/reports/tr9/"&gt;Unicode bidirectional algorithm&lt;/ulink&gt;.</doc>
      <doc-deprecated xml:space="preserve">Use fribidi for this information</doc-deprecated>
      <member name="l"
              value="0"
              c:identifier="PANGO_BIDI_TYPE_L"
              glib:nick="l">
        <doc xml:space="preserve"
             filename="../pango/pango-bidi-type.h"
             line="35">Left-to-Right</doc>
      </member>
      <member name="lre"
              value="1"
              c:identifier="PANGO_BIDI_TYPE_LRE"
              glib:nick="lre">
        <doc xml:space="preserve"
             filename="../pango/pango-bidi-type.h"
             line="36">Left-to-Right Embedding</doc>
      </member>
      <member name="lro"
              value="2"
              c:identifier="PANGO_BIDI_TYPE_LRO"
              glib:nick="lro">
        <doc xml:space="preserve"
             filename="../pango/pango-bidi-type.h"
             line="37">Left-to-Right Override</doc>
      </member>
      <member name="r"
              value="3"
              c:identifier="PANGO_BIDI_TYPE_R"
              glib:nick="r">
        <doc xml:space="preserve"
             filename="../pango/pango-bidi-type.h"
             line="38">Right-to-Left</doc>
      </member>
      <member name="al"
              value="4"
              c:identifier="PANGO_BIDI_TYPE_AL"
              glib:nick="al">
        <doc xml:space="preserve"
             filename="../pango/pango-bidi-type.h"
             line="39">Right-to-Left Arabic</doc>
      </member>
      <member name="rle"
              value="5"
              c:identifier="PANGO_BIDI_TYPE_RLE"
              glib:nick="rle">
        <doc xml:space="preserve"
             filename="../pango/pango-bidi-type.h"
             line="40">Right-to-Left Embedding</doc>
      </member>
      <member name="rlo"
              value="6"
              c:identifier="PANGO_BIDI_TYPE_RLO"
              glib:nick="rlo">
        <doc xml:space="preserve"
             filename="../pango/pango-bidi-type.h"
             line="41">Right-to-Left Override</doc>
      </member>
      <member name="pdf"
              value="7"
              c:identifier="PANGO_BIDI_TYPE_PDF"
              glib:nick="pdf">
        <doc xml:space="preserve"
             filename="../pango/pango-bidi-type.h"
             line="42">Pop Directional Format</doc>
      </member>
      <member name="en"
              value="8"
              c:identifier="PANGO_BIDI_TYPE_EN"
              glib:nick="en">
        <doc xml:space="preserve"
             filename="../pango/pango-bidi-type.h"
             line="43">European Number</doc>
      </member>
      <member name="es"
              value="9"
              c:identifier="PANGO_BIDI_TYPE_ES"
              glib:nick="es">
        <doc xml:space="preserve"
             filename="../pango/pango-bidi-type.h"
             line="44">European Number Separator</doc>
      </member>
      <member name="et"
              value="10"
              c:identifier="PANGO_BIDI_TYPE_ET"
              glib:nick="et">
        <doc xml:space="preserve"
             filename="../pango/pango-bidi-type.h"
             line="45">European Number Terminator</doc>
      </member>
      <member name="an"
              value="11"
              c:identifier="PANGO_BIDI_TYPE_AN"
              glib:nick="an">
        <doc xml:space="preserve"
             filename="../pango/pango-bidi-type.h"
             line="46">Arabic Number</doc>
      </member>
      <member name="cs"
              value="12"
              c:identifier="PANGO_BIDI_TYPE_CS"
              glib:nick="cs">
        <doc xml:space="preserve"
             filename="../pango/pango-bidi-type.h"
             line="47">Common Number Separator</doc>
      </member>
      <member name="nsm"
              value="13"
              c:identifier="PANGO_BIDI_TYPE_NSM"
              glib:nick="nsm">
        <doc xml:space="preserve"
             filename="../pango/pango-bidi-type.h"
             line="48">Nonspacing Mark</doc>
      </member>
      <member name="bn"
              value="14"
              c:identifier="PANGO_BIDI_TYPE_BN"
              glib:nick="bn">
        <doc xml:space="preserve"
             filename="../pango/pango-bidi-type.h"
             line="49">Boundary Neutral</doc>
      </member>
      <member name="b"
              value="15"
              c:identifier="PANGO_BIDI_TYPE_B"
              glib:nick="b">
        <doc xml:space="preserve"
             filename="../pango/pango-bidi-type.h"
             line="50">Paragraph Separator</doc>
      </member>
      <member name="s"
              value="16"
              c:identifier="PANGO_BIDI_TYPE_S"
              glib:nick="s">
        <doc xml:space="preserve"
             filename="../pango/pango-bidi-type.h"
             line="51">Segment Separator</doc>
      </member>
      <member name="ws"
              value="17"
              c:identifier="PANGO_BIDI_TYPE_WS"
              glib:nick="ws">
        <doc xml:space="preserve"
             filename="../pango/pango-bidi-type.h"
             line="52">Whitespace</doc>
      </member>
      <member name="on"
              value="18"
              c:identifier="PANGO_BIDI_TYPE_ON"
              glib:nick="on">
        <doc xml:space="preserve"
             filename="../pango/pango-bidi-type.h"
             line="53">Other Neutrals</doc>
      </member>
      <function name="for_unichar"
                c:identifier="pango_bidi_type_for_unichar"
                version="1.22">
        <doc xml:space="preserve"
             filename="../pango/pango-bidi-type.c"
             line="55">Determines the normative bidirectional character type of a
character, as specified in the Unicode Character Database.

A simplified version of this function is available as
pango_unichar_direction().</doc>
        <source-position filename="../pango/pango-bidi-type.h" line="90"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../pango/pango-bidi-type.c"
               line="65">the bidirectional character type, as used in the
Unicode bidirectional algorithm.</doc>
          <type name="BidiType" c:type="PangoBidiType"/>
        </return-value>
        <parameters>
          <parameter name="ch" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-bidi-type.c"
                 line="57">a Unicode character</doc>
            <type name="gunichar" c:type="gunichar"/>
          </parameter>
        </parameters>
      </function>
    </enumeration>
    <function-macro name="CONTEXT"
                    c:identifier="PANGO_CONTEXT"
                    introspectable="0">
      <source-position filename="../pango/pango-context.h" line="40"/>
      <parameters>
        <parameter name="object">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="CONTEXT_CLASS"
                    c:identifier="PANGO_CONTEXT_CLASS"
                    introspectable="0">
      <source-position filename="../pango/pango-context.h" line="41"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="CONTEXT_GET_CLASS"
                    c:identifier="PANGO_CONTEXT_GET_CLASS"
                    introspectable="0">
      <source-position filename="../pango/pango-context.h" line="44"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <record name="Color"
            c:type="PangoColor"
            glib:type-name="PangoColor"
            glib:get-type="pango_color_get_type"
            c:symbol-prefix="color">
      <doc xml:space="preserve"
           filename="../pango/pango-attributes.h"
           line="34">The #PangoColor structure is used to
represent a color in an uncalibrated RGB color-space.</doc>
      <source-position filename="../pango/pango-attributes.h" line="48"/>
      <field name="red" writable="1">
        <doc xml:space="preserve"
             filename="../pango/pango-attributes.h"
             line="36">value of red component</doc>
        <type name="guint16" c:type="guint16"/>
      </field>
      <field name="green" writable="1">
        <doc xml:space="preserve"
             filename="../pango/pango-attributes.h"
             line="37">value of green component</doc>
        <type name="guint16" c:type="guint16"/>
      </field>
      <field name="blue" writable="1">
        <doc xml:space="preserve"
             filename="../pango/pango-attributes.h"
             line="38">value of blue component</doc>
        <type name="guint16" c:type="guint16"/>
      </field>
      <method name="copy" c:identifier="pango_color_copy">
        <doc xml:space="preserve"
             filename="../pango/pango-color.c"
             line="35">Creates a copy of @src, which should be freed with
pango_color_free(). Primarily used by language bindings,
not that useful otherwise (since colors can just be copied
by assignment in C).</doc>
        <source-position filename="../pango/pango-attributes.h" line="63"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="../pango/pango-color.c"
               line="44">the newly allocated #PangoColor, which
              should be freed with pango_color_free(), or %NULL if
              @src was %NULL.</doc>
          <type name="Color" c:type="PangoColor*"/>
        </return-value>
        <parameters>
          <instance-parameter name="src"
                              transfer-ownership="none"
                              nullable="1"
                              allow-none="1">
            <doc xml:space="preserve"
                 filename="../pango/pango-color.c"
                 line="37">color to copy, may be %NULL</doc>
            <type name="Color" c:type="const PangoColor*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="free" c:identifier="pango_color_free">
        <doc xml:space="preserve"
             filename="../pango/pango-color.c"
             line="63">Frees a color allocated by pango_color_copy().</doc>
        <source-position filename="../pango/pango-attributes.h" line="65"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="color"
                              transfer-ownership="none"
                              nullable="1"
                              allow-none="1">
            <doc xml:space="preserve"
                 filename="../pango/pango-color.c"
                 line="65">an allocated #PangoColor, may be %NULL</doc>
            <type name="Color" c:type="PangoColor*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="parse" c:identifier="pango_color_parse">
        <doc xml:space="preserve"
             filename="../pango/pango-color.c"
             line="320">Fill in the fields of a color from a string specification. The
string can either one of a large set of standard names. (Taken
from the CSS &lt;ulink url="http://dev.w3.org/csswg/css-color/#named-colors"&gt;specification&lt;/ulink&gt;), or it can be a hexadecimal
value in the
form '&amp;num;rgb' '&amp;num;rrggbb' '&amp;num;rrrgggbbb' or '&amp;num;rrrrggggbbbb' where
'r', 'g' and 'b' are hex digits of the red, green, and blue
components of the color, respectively. (White in the four
forms is '&amp;num;fff' '&amp;num;ffffff' '&amp;num;fffffffff' and '&amp;num;ffffffffffff')</doc>
        <source-position filename="../pango/pango-attributes.h" line="67"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../pango/pango-color.c"
               line="335">%TRUE if parsing of the specifier succeeded,
  otherwise false.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="color"
                              transfer-ownership="none"
                              nullable="1"
                              allow-none="1">
            <doc xml:space="preserve"
                 filename="../pango/pango-color.c"
                 line="322">a #PangoColor structure in which to store the
  result, or %NULL</doc>
            <type name="Color" c:type="PangoColor*"/>
          </instance-parameter>
          <parameter name="spec" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-color.c"
                 line="324">a string specifying the new color</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="parse_with_alpha"
              c:identifier="pango_color_parse_with_alpha"
              version="1.46">
        <doc xml:space="preserve"
             filename="../pango/pango-color.c"
             line="210">Fill in the fields of a color from a string specification. The
string can either one of a large set of standard names. (Taken
from the CSS &lt;ulink url="http://dev.w3.org/csswg/css-color/#named-colors"&gt;specification&lt;/ulink&gt;), or it can be a hexadecimal
value in the
form '&amp;num;rgb' '&amp;num;rrggbb' '&amp;num;rrrgggbbb' or '&amp;num;rrrrggggbbbb' where
'r', 'g' and 'b' are hex digits of the red, green, and blue
components of the color, respectively. (White in the four
forms is '&amp;num;fff' '&amp;num;ffffff' '&amp;num;fffffffff' and '&amp;num;ffffffffffff')

Additionally, parse strings of the form
'&amp;num;rgba', '&amp;num;rrggbbaa', '&amp;num;rrrrggggbbbbaaaa',
if @alpha is not %NULL, and set @alpha to the value specified
by the hex digits for 'a'. If no alpha component is found
in @spec, @alpha is set to 0xffff (for a solid color).</doc>
        <source-position filename="../pango/pango-attributes.h" line="70"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../pango/pango-color.c"
               line="232">%TRUE if parsing of the specifier succeeded,
  otherwise false.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="color"
                              transfer-ownership="none"
                              nullable="1"
                              allow-none="1">
            <doc xml:space="preserve"
                 filename="../pango/pango-color.c"
                 line="212">a #PangoColor structure in which to store the
  result, or %NULL</doc>
            <type name="Color" c:type="PangoColor*"/>
          </instance-parameter>
          <parameter name="alpha"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../pango/pango-color.c"
                 line="214">return location for alpha, or %NULL</doc>
            <type name="guint16" c:type="guint16*"/>
          </parameter>
          <parameter name="spec" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-color.c"
                 line="215">a string specifying the new color</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="to_string"
              c:identifier="pango_color_to_string"
              version="1.16">
        <doc xml:space="preserve"
             filename="../pango/pango-color.c"
             line="78">Returns a textual specification of @color in the hexadecimal form
&lt;literal&gt;&amp;num;rrrrggggbbbb&lt;/literal&gt;, where &lt;literal&gt;r&lt;/literal&gt;,
&lt;literal&gt;g&lt;/literal&gt; and &lt;literal&gt;b&lt;/literal&gt; are hex digits representing
the red, green, and blue components respectively.</doc>
        <source-position filename="../pango/pango-attributes.h" line="75"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../pango/pango-color.c"
               line="87">a newly-allocated text string that must be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="color" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-color.c"
                 line="80">a #PangoColor</doc>
            <type name="Color" c:type="const PangoColor*"/>
          </instance-parameter>
        </parameters>
      </method>
    </record>
    <class name="Context"
           c:symbol-prefix="context"
           c:type="PangoContext"
           parent="GObject.Object"
           glib:type-name="PangoContext"
           glib:get-type="pango_context_get_type"
           glib:type-struct="ContextClass">
      <doc xml:space="preserve"
           filename="../pango/pango-context.c"
           line="58">The #PangoContext structure stores global information
used to control the itemization process.</doc>
      <source-position filename="../pango/pango-context.h" line="37"/>
      <constructor name="new" c:identifier="pango_context_new">
        <doc xml:space="preserve"
             filename="../pango/pango-context.c"
             line="144">Creates a new #PangoContext initialized to default values.

This function is not particularly useful as it should always
be followed by a pango_context_set_font_map() call, and the
function pango_font_map_create_context() does these two steps
together and hence users are recommended to use that.

If you are using Pango as part of a higher-level system,
that system may have it's own way of create a #PangoContext.
For instance, the GTK+ toolkit has, among others,
gdk_pango_context_get_for_screen(), and
gtk_widget_get_pango_context().  Use those instead.</doc>
        <source-position filename="../pango/pango-context.h" line="55"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../pango/pango-context.c"
               line="160">the newly allocated #PangoContext, which should
              be freed with g_object_unref().</doc>
          <type name="Context" c:type="PangoContext*"/>
        </return-value>
      </constructor>
      <method name="changed"
              c:identifier="pango_context_changed"
              version="1.32.4">
        <doc xml:space="preserve"
             filename="../pango/pango-context.c"
             line="1813">Forces a change in the context, which will cause any #PangoLayout
using this context to re-layout.

This function is only useful when implementing a new backend
for Pango, something applications won't do. Backends should
call this function if they have attached extra data to the context
and such data is changed.</doc>
        <source-position filename="../pango/pango-context.h" line="57"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="context" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-context.c"
                 line="1815">a #PangoContext</doc>
            <type name="Context" c:type="PangoContext*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_base_dir" c:identifier="pango_context_get_base_dir">
        <doc xml:space="preserve"
             filename="../pango/pango-context.c"
             line="471">Retrieves the base direction for the context. See
pango_context_set_base_dir().</doc>
        <source-position filename="../pango/pango-context.h" line="96"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../pango/pango-context.c"
               line="478">the base direction for the context.</doc>
          <type name="Direction" c:type="PangoDirection"/>
        </return-value>
        <parameters>
          <instance-parameter name="context" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-context.c"
                 line="473">a #PangoContext</doc>
            <type name="Context" c:type="PangoContext*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_base_gravity"
              c:identifier="pango_context_get_base_gravity"
              version="1.16">
        <doc xml:space="preserve"
             filename="../pango/pango-context.c"
             line="513">Retrieves the base gravity for the context. See
pango_context_set_base_gravity().</doc>
        <source-position filename="../pango/pango-context.h" line="101"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../pango/pango-context.c"
               line="520">the base gravity for the context.</doc>
          <type name="Gravity" c:type="PangoGravity"/>
        </return-value>
        <parameters>
          <instance-parameter name="context" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-context.c"
                 line="515">a #PangoContext</doc>
            <type name="Context" c:type="PangoContext*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_font_description"
              c:identifier="pango_context_get_font_description">
        <doc xml:space="preserve"
             filename="../pango/pango-context.c"
             line="387">Retrieve the default font description for the context.</doc>
        <source-position filename="../pango/pango-context.h" line="86"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../pango/pango-context.c"
               line="393">a pointer to the context's default font
              description. This value must not be modified or freed.</doc>
          <type name="FontDescription" c:type="PangoFontDescription*"/>
        </return-value>
        <parameters>
          <instance-parameter name="context" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-context.c"
                 line="389">a #PangoContext</doc>
            <type name="Context" c:type="PangoContext*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_font_map"
              c:identifier="pango_context_get_font_map"
              version="1.6">
        <doc xml:space="preserve"
             filename="../pango/pango-context.c"
             line="268">Gets the #PangoFontMap used to look up fonts for this context.</doc>
        <source-position filename="../pango/pango-context.h" line="62"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../pango/pango-context.c"
               line="274">the font map for the #PangoContext.
              This value is owned by Pango and should not be unreferenced.</doc>
          <type name="FontMap" c:type="PangoFontMap*"/>
        </return-value>
        <parameters>
          <instance-parameter name="context" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-context.c"
                 line="270">a #PangoContext</doc>
            <type name="Context" c:type="PangoContext*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_gravity"
              c:identifier="pango_context_get_gravity"
              version="1.16">
        <doc xml:space="preserve"
             filename="../pango/pango-context.c"
             line="532">Retrieves the gravity for the context. This is similar to
pango_context_get_base_gravity(), except for when the base gravity
is %PANGO_GRAVITY_AUTO for which pango_gravity_get_for_matrix() is used
to return the gravity from the current context matrix.</doc>
        <source-position filename="../pango/pango-context.h" line="103"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../pango/pango-context.c"
               line="541">the resolved gravity for the context.</doc>
          <type name="Gravity" c:type="PangoGravity"/>
        </return-value>
        <parameters>
          <instance-parameter name="context" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-context.c"
                 line="534">a #PangoContext</doc>
            <type name="Context" c:type="PangoContext*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_gravity_hint"
              c:identifier="pango_context_get_gravity_hint"
              version="1.16">
        <doc xml:space="preserve"
             filename="../pango/pango-context.c"
             line="578">Retrieves the gravity hint for the context. See
pango_context_set_gravity_hint() for details.</doc>
        <source-position filename="../pango/pango-context.h" line="108"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../pango/pango-context.c"
               line="585">the gravity hint for the context.</doc>
          <type name="GravityHint" c:type="PangoGravityHint"/>
        </return-value>
        <parameters>
          <instance-parameter name="context" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-context.c"
                 line="580">a #PangoContext</doc>
            <type name="Context" c:type="PangoContext*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_language" c:identifier="pango_context_get_language">
        <doc xml:space="preserve"
             filename="../pango/pango-context.c"
             line="429">Retrieves the global language tag for the context.</doc>
        <source-position filename="../pango/pango-context.h" line="88"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../pango/pango-context.c"
               line="435">the global language tag.</doc>
          <type name="Language" c:type="PangoLanguage*"/>
        </return-value>
        <parameters>
          <instance-parameter name="context" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-context.c"
                 line="431">a #PangoContext</doc>
            <type name="Context" c:type="PangoContext*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_matrix"
              c:identifier="pango_context_get_matrix"
              version="1.6">
        <doc xml:space="preserve"
             filename="../pango/pango-context.c"
             line="216">Gets the transformation matrix that will be applied when
rendering with this context. See pango_context_set_matrix().</doc>
        <source-position filename="../pango/pango-context.h" line="114"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="../pango/pango-context.c"
               line="223">the matrix, or %NULL if no matrix has
 been set (which is the same as the identity matrix). The returned
 matrix is owned by Pango and must not be modified or freed.</doc>
          <type name="Matrix" c:type="const PangoMatrix*"/>
        </return-value>
        <parameters>
          <instance-parameter name="context" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-context.c"
                 line="218">a #PangoContext</doc>
            <type name="Context" c:type="PangoContext*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_metrics" c:identifier="pango_context_get_metrics">
        <doc xml:space="preserve"
             filename="../pango/pango-context.c"
             line="1742">Get overall metric information for a particular font
description.  Since the metrics may be substantially different for
different scripts, a language tag can be provided to indicate that
the metrics should be retrieved that correspond to the script(s)
used by that language.

The #PangoFontDescription is interpreted in the same way as
by pango_itemize(), and the family name may be a comma separated
list of figures. If characters from multiple of these families
would be used to render the string, then the returned fonts would
be a composite of the metrics for the fonts loaded for the
individual families.</doc>
        <source-position filename="../pango/pango-context.h" line="78"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../pango/pango-context.c"
               line="1766">a #PangoFontMetrics object. The caller must call pango_font_metrics_unref()
  when finished using the object.</doc>
          <type name="FontMetrics" c:type="PangoFontMetrics*"/>
        </return-value>
        <parameters>
          <instance-parameter name="context" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-context.c"
                 line="1744">a #PangoContext</doc>
            <type name="Context" c:type="PangoContext*"/>
          </instance-parameter>
          <parameter name="desc"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../pango/pango-context.c"
                 line="1745">a #PangoFontDescription structure.  %NULL means that the
           font description from the context will be used.</doc>
            <type name="FontDescription" c:type="const PangoFontDescription*"/>
          </parameter>
          <parameter name="language"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../pango/pango-context.c"
                 line="1747">language tag used to determine which script to get
           the metrics for. %NULL means that the language tag from the context
           will be used. If no language tag is set on the context, metrics
           for the default language (as determined by pango_language_get_default())
           will be returned.</doc>
            <type name="Language" c:type="PangoLanguage*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_round_glyph_positions"
              c:identifier="pango_context_get_round_glyph_positions"
              version="1.44">
        <doc xml:space="preserve"
             filename="../pango/pango-context.c"
             line="1901">Returns whether font rendering with this context should
round glyph positions and widths.</doc>
        <source-position filename="../pango/pango-context.h" line="120"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="context" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-context.c"
                 line="1903">a #PangoContext</doc>
            <type name="Context" c:type="PangoContext*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_serial"
              c:identifier="pango_context_get_serial"
              version="1.32.4">
        <doc xml:space="preserve"
             filename="../pango/pango-context.c"
             line="1847">Returns the current serial number of @context.  The serial number is
initialized to an small number larger than zero when a new context
is created and is increased whenever the context is changed using any
of the setter functions, or the #PangoFontMap it uses to find fonts has
changed. The serial may wrap, but will never have the value 0. Since it
can wrap, never compare it with "less than", always use "not equals".

This can be used to automatically detect changes to a #PangoContext, and
is only useful when implementing objects that need update when their
#PangoContext changes, like #PangoLayout.</doc>
        <source-position filename="../pango/pango-context.h" line="64"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../pango/pango-context.c"
               line="1862">The current serial number of @context.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="context" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-context.c"
                 line="1849">a #PangoContext</doc>
            <type name="Context" c:type="PangoContext*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="list_families" c:identifier="pango_context_list_families">
        <doc xml:space="preserve"
             filename="../pango/pango-context.c"
             line="287">List all families for a context.</doc>
        <source-position filename="../pango/pango-context.h" line="66"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="context" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-context.c"
                 line="289">a #PangoContext</doc>
            <type name="Context" c:type="PangoContext*"/>
          </instance-parameter>
          <parameter name="families"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="container">
            <doc xml:space="preserve"
                 filename="../pango/pango-context.c"
                 line="290">location to store a pointer to
           an array of #PangoFontFamily *. This array should be freed
           with g_free().</doc>
            <array length="1" zero-terminated="0" c:type="PangoFontFamily***">
              <type name="FontFamily" c:type="PangoFontFamily**"/>
            </array>
          </parameter>
          <parameter name="n_families"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="../pango/pango-context.c"
                 line="293">location to store the number of elements in @descs</doc>
            <type name="gint" c:type="int*"/>
          </parameter>
        </parameters>
      </method>
      <method name="load_font" c:identifier="pango_context_load_font">
        <doc xml:space="preserve"
             filename="../pango/pango-context.c"
             line="320">Loads the font in one of the fontmaps in the context
that is the closest match for @desc.</doc>
        <source-position filename="../pango/pango-context.h" line="70"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="../pango/pango-context.c"
               line="328">the newly allocated #PangoFont
         that was loaded, or %NULL if no font matched.</doc>
          <type name="Font" c:type="PangoFont*"/>
        </return-value>
        <parameters>
          <instance-parameter name="context" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-context.c"
                 line="322">a #PangoContext</doc>
            <type name="Context" c:type="PangoContext*"/>
          </instance-parameter>
          <parameter name="desc" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-context.c"
                 line="323">a #PangoFontDescription describing the font to load</doc>
            <type name="FontDescription" c:type="const PangoFontDescription*"/>
          </parameter>
        </parameters>
      </method>
      <method name="load_fontset" c:identifier="pango_context_load_fontset">
        <doc xml:space="preserve"
             filename="../pango/pango-context.c"
             line="341">Load a set of fonts in the context that can be used to render
a font matching @desc.</doc>
        <source-position filename="../pango/pango-context.h" line="73"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="../pango/pango-context.c"
               line="350">the newly allocated
         #PangoFontset loaded, or %NULL if no font matched.</doc>
          <type name="Fontset" c:type="PangoFontset*"/>
        </return-value>
        <parameters>
          <instance-parameter name="context" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-context.c"
                 line="343">a #PangoContext</doc>
            <type name="Context" c:type="PangoContext*"/>
          </instance-parameter>
          <parameter name="desc" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-context.c"
                 line="344">a #PangoFontDescription describing the fonts to load</doc>
            <type name="FontDescription" c:type="const PangoFontDescription*"/>
          </parameter>
          <parameter name="language" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-context.c"
                 line="345">a #PangoLanguage the fonts will be used for</doc>
            <type name="Language" c:type="PangoLanguage*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_base_dir" c:identifier="pango_context_set_base_dir">
        <doc xml:space="preserve"
             filename="../pango/pango-context.c"
             line="445">Sets the base direction for the context.

The base direction is used in applying the Unicode bidirectional
algorithm; if the @direction is %PANGO_DIRECTION_LTR or
%PANGO_DIRECTION_RTL, then the value will be used as the paragraph
direction in the Unicode bidirectional algorithm.  A value of
%PANGO_DIRECTION_WEAK_LTR or %PANGO_DIRECTION_WEAK_RTL is used only
for paragraphs that do not contain any strong characters themselves.</doc>
        <source-position filename="../pango/pango-context.h" line="93"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="context" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-context.c"
                 line="447">a #PangoContext</doc>
            <type name="Context" c:type="PangoContext*"/>
          </instance-parameter>
          <parameter name="direction" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-context.c"
                 line="448">the new base direction</doc>
            <type name="Direction" c:type="PangoDirection"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_base_gravity"
              c:identifier="pango_context_set_base_gravity"
              version="1.16">
        <doc xml:space="preserve"
             filename="../pango/pango-context.c"
             line="488">Sets the base gravity for the context.

The base gravity is used in laying vertical text out.</doc>
        <source-position filename="../pango/pango-context.h" line="98"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="context" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-context.c"
                 line="490">a #PangoContext</doc>
            <type name="Context" c:type="PangoContext*"/>
          </instance-parameter>
          <parameter name="gravity" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-context.c"
                 line="491">the new base gravity</doc>
            <type name="Gravity" c:type="PangoGravity"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_font_description"
              c:identifier="pango_context_set_font_description">
        <doc xml:space="preserve"
             filename="../pango/pango-context.c"
             line="363">Set the default font description for the context</doc>
        <source-position filename="../pango/pango-context.h" line="83"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="context" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-context.c"
                 line="365">a #PangoContext</doc>
            <type name="Context" c:type="PangoContext*"/>
          </instance-parameter>
          <parameter name="desc" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-context.c"
                 line="366">the new pango font description</doc>
            <type name="FontDescription" c:type="const PangoFontDescription*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_font_map" c:identifier="pango_context_set_font_map">
        <doc xml:space="preserve"
             filename="../pango/pango-context.c"
             line="237">Sets the font map to be searched when fonts are looked-up in this context.
This is only for internal use by Pango backends, a #PangoContext obtained
via one of the recommended methods should already have a suitable font map.</doc>
        <source-position filename="../pango/pango-context.h" line="59"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="context" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-context.c"
                 line="239">a #PangoContext</doc>
            <type name="Context" c:type="PangoContext*"/>
          </instance-parameter>
          <parameter name="font_map" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-context.c"
                 line="240">the #PangoFontMap to set.</doc>
            <type name="FontMap" c:type="PangoFontMap*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_gravity_hint"
              c:identifier="pango_context_set_gravity_hint"
              version="1.16">
        <doc xml:space="preserve"
             filename="../pango/pango-context.c"
             line="553">Sets the gravity hint for the context.

The gravity hint is used in laying vertical text out, and is only relevant
if gravity of the context as returned by pango_context_get_gravity()
is set %PANGO_GRAVITY_EAST or %PANGO_GRAVITY_WEST.</doc>
        <source-position filename="../pango/pango-context.h" line="105"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="context" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-context.c"
                 line="555">a #PangoContext</doc>
            <type name="Context" c:type="PangoContext*"/>
          </instance-parameter>
          <parameter name="hint" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-context.c"
                 line="556">the new gravity hint</doc>
            <type name="GravityHint" c:type="PangoGravityHint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_language" c:identifier="pango_context_set_language">
        <doc xml:space="preserve"
             filename="../pango/pango-context.c"
             line="404">Sets the global language tag for the context.  The default language
for the locale of the running process can be found using
pango_language_get_default().</doc>
        <source-position filename="../pango/pango-context.h" line="90"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="context" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-context.c"
                 line="406">a #PangoContext</doc>
            <type name="Context" c:type="PangoContext*"/>
          </instance-parameter>
          <parameter name="language" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-context.c"
                 line="407">the new language tag.</doc>
            <type name="Language" c:type="PangoLanguage*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_matrix"
              c:identifier="pango_context_set_matrix"
              version="1.6">
        <doc xml:space="preserve"
             filename="../pango/pango-context.c"
             line="182">Sets the transformation matrix that will be applied when rendering
with this context. Note that reported metrics are in the user space
coordinates before the application of the matrix, not device-space
coordinates after the application of the matrix. So, they don't scale
with the matrix, though they may change slightly for different
matrices, depending on how the text is fit to the pixel grid.</doc>
        <source-position filename="../pango/pango-context.h" line="111"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="context" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-context.c"
                 line="184">a #PangoContext</doc>
            <type name="Context" c:type="PangoContext*"/>
          </instance-parameter>
          <parameter name="matrix"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../pango/pango-context.c"
                 line="185">a #PangoMatrix, or %NULL to unset any existing
matrix. (No matrix set is the same as setting the identity matrix.)</doc>
            <type name="Matrix" c:type="const PangoMatrix*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_round_glyph_positions"
              c:identifier="pango_context_set_round_glyph_positions"
              version="1.44">
        <doc xml:space="preserve"
             filename="../pango/pango-context.c"
             line="1873">Sets whether font rendering with this context should
round glyph positions and widths to integral positions,
in device units.

This is useful when the renderer can't handle subpixel
positioning of glyphs.

The default value is to round glyph positions, to remain
compatible with previous Pango behavior.</doc>
        <source-position filename="../pango/pango-context.h" line="117"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="context" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-context.c"
                 line="1875">a #PangoContext</doc>
            <type name="Context" c:type="PangoContext*"/>
          </instance-parameter>
          <parameter name="round_positions" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-context.c"
                 line="1876">whether to round glyph positions</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
    </class>
    <record name="ContextClass"
            c:type="PangoContextClass"
            disguised="1"
            glib:is-gtype-struct-for="Context">
      <source-position filename="../pango/pango-context.h" line="37"/>
    </record>
    <class name="Coverage"
           c:symbol-prefix="coverage"
           c:type="PangoCoverage"
           parent="GObject.Object"
           glib:type-name="PangoCoverage"
           glib:get-type="pango_coverage_get_type">
      <doc xml:space="preserve"
           filename="../pango/pango-coverage.h"
           line="32">The #PangoCoverage structure represents a map from Unicode characters
to #PangoCoverageLevel. It is an opaque structure with no public fields.</doc>
      <constructor name="new" c:identifier="pango_coverage_new">
        <doc xml:space="preserve"
             filename="../pango/pango-coverage.c"
             line="117">Create a new #PangoCoverage</doc>
        <source-position filename="../pango/pango-coverage.h" line="69"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../pango/pango-coverage.c"
               line="122">the newly allocated #PangoCoverage,
              initialized to %PANGO_COVERAGE_NONE
              with a reference count of one, which
              should be freed with pango_coverage_unref().</doc>
          <type name="Coverage" c:type="PangoCoverage*"/>
        </return-value>
      </constructor>
      <function name="from_bytes"
                c:identifier="pango_coverage_from_bytes"
                deprecated="1"
                deprecated-version="1.44">
        <doc xml:space="preserve"
             filename="../pango/pango-coverage.c"
             line="246">Convert data generated from pango_coverage_to_bytes() back
to a #PangoCoverage</doc>
        <doc-deprecated xml:space="preserve">This returns %NULL</doc-deprecated>
        <source-position filename="../pango/pango-coverage.h" line="92"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="../pango/pango-coverage.c"
               line="255">a newly allocated
              #PangoCoverage, or %NULL if the data was invalid.</doc>
          <type name="Coverage" c:type="PangoCoverage*"/>
        </return-value>
        <parameters>
          <parameter name="bytes" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-coverage.c"
                 line="248">binary data
  representing a #PangoCoverage</doc>
            <array length="1" zero-terminated="0" c:type="guchar*">
              <type name="guint8"/>
            </array>
          </parameter>
          <parameter name="n_bytes" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-coverage.c"
                 line="250">the size of @bytes in bytes</doc>
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </function>
      <method name="copy" c:identifier="pango_coverage_copy">
        <doc xml:space="preserve"
             filename="../pango/pango-coverage.c"
             line="133">Copy an existing #PangoCoverage. (This function may now be unnecessary
since we refcount the structure. File a bug if you use it.)</doc>
        <source-position filename="../pango/pango-coverage.h" line="75"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../pango/pango-coverage.c"
               line="140">the newly allocated #PangoCoverage,
              with a reference count of one, which should be freed
              with pango_coverage_unref().</doc>
          <type name="Coverage" c:type="PangoCoverage*"/>
        </return-value>
        <parameters>
          <instance-parameter name="coverage" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-coverage.c"
                 line="135">a #PangoCoverage</doc>
            <type name="Coverage" c:type="PangoCoverage*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get" c:identifier="pango_coverage_get">
        <doc xml:space="preserve"
             filename="../pango/pango-coverage.c"
             line="177">Determine whether a particular index is covered by @coverage</doc>
        <source-position filename="../pango/pango-coverage.h" line="77"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../pango/pango-coverage.c"
               line="184">the coverage level of @coverage for character @index_.</doc>
          <type name="CoverageLevel" c:type="PangoCoverageLevel"/>
        </return-value>
        <parameters>
          <instance-parameter name="coverage" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-coverage.c"
                 line="179">a #PangoCoverage</doc>
            <type name="Coverage" c:type="PangoCoverage*"/>
          </instance-parameter>
          <parameter name="index_" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-coverage.c"
                 line="180">the index to check</doc>
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </method>
      <method name="max"
              c:identifier="pango_coverage_max"
              deprecated="1"
              deprecated-version="1.44">
        <doc xml:space="preserve"
             filename="../pango/pango-coverage.c"
             line="209">Set the coverage for each index in @coverage to be the max (better)
value of the current coverage for the index and the coverage for
the corresponding index in @other.</doc>
        <doc-deprecated xml:space="preserve">This function does nothing</doc-deprecated>
        <source-position filename="../pango/pango-coverage.h" line="84"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="coverage" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-coverage.c"
                 line="211">a #PangoCoverage</doc>
            <type name="Coverage" c:type="PangoCoverage*"/>
          </instance-parameter>
          <parameter name="other" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-coverage.c"
                 line="212">another #PangoCoverage</doc>
            <type name="Coverage" c:type="PangoCoverage*"/>
          </parameter>
        </parameters>
      </method>
      <method name="ref" c:identifier="pango_coverage_ref">
        <doc xml:space="preserve"
             filename="../pango/pango-coverage.c"
             line="150">Increase the reference count on the #PangoCoverage by one</doc>
        <source-position filename="../pango/pango-coverage.h" line="71"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../pango/pango-coverage.c"
               line="156">@coverage</doc>
          <type name="Coverage" c:type="PangoCoverage*"/>
        </return-value>
        <parameters>
          <instance-parameter name="coverage" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-coverage.c"
                 line="152">a #PangoCoverage</doc>
            <type name="Coverage" c:type="PangoCoverage*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set" c:identifier="pango_coverage_set">
        <doc xml:space="preserve"
             filename="../pango/pango-coverage.c"
             line="193">Modify a particular index within @coverage</doc>
        <source-position filename="../pango/pango-coverage.h" line="80"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="coverage" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-coverage.c"
                 line="195">a #PangoCoverage</doc>
            <type name="Coverage" c:type="PangoCoverage*"/>
          </instance-parameter>
          <parameter name="index_" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-coverage.c"
                 line="196">the index to modify</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="level" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-coverage.c"
                 line="197">the new level for @index_</doc>
            <type name="CoverageLevel" c:type="PangoCoverageLevel"/>
          </parameter>
        </parameters>
      </method>
      <method name="to_bytes"
              c:identifier="pango_coverage_to_bytes"
              deprecated="1"
              deprecated-version="1.44">
        <doc xml:space="preserve"
             filename="../pango/pango-coverage.c"
             line="226">Convert a #PangoCoverage structure into a flat binary format</doc>
        <doc-deprecated xml:space="preserve">This returns %NULL</doc-deprecated>
        <source-position filename="../pango/pango-coverage.h" line="88"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="coverage" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-coverage.c"
                 line="228">a #PangoCoverage</doc>
            <type name="Coverage" c:type="PangoCoverage*"/>
          </instance-parameter>
          <parameter name="bytes"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="../pango/pango-coverage.c"
                 line="229">
  location to store result (must be freed with g_free())</doc>
            <array length="1" zero-terminated="0" c:type="guchar**">
              <type name="guint8"/>
            </array>
          </parameter>
          <parameter name="n_bytes"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="../pango/pango-coverage.c"
                 line="231">location to store size of result</doc>
            <type name="gint" c:type="int*"/>
          </parameter>
        </parameters>
      </method>
      <method name="unref" c:identifier="pango_coverage_unref">
        <doc xml:space="preserve"
             filename="../pango/pango-coverage.c"
             line="164">Decrease the reference count on the #PangoCoverage by one.
If the result is zero, free the coverage and all associated memory.</doc>
        <source-position filename="../pango/pango-coverage.h" line="73"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="coverage" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="../pango/pango-coverage.c"
                 line="166">a #PangoCoverage</doc>
            <type name="Coverage" c:type="PangoCoverage*"/>
          </instance-parameter>
        </parameters>
      </method>
    </class>
    <enumeration name="CoverageLevel"
                 glib:type-name="PangoCoverageLevel"
                 glib:get-type="pango_coverage_level_get_type"
                 c:type="PangoCoverageLevel">
      <doc xml:space="preserve"
           filename="../pango/pango-coverage.h"
           line="40">Used to indicate how well a font can represent a particular Unicode
character point for a particular script.

Since 1.44, only %PANGO_COVERAGE_NONE and %PANGO_COVERAGE_EXACT
will be returned.</doc>
      <member name="none"
              value="0"
              c:identifier="PANGO_COVERAGE_NONE"
              glib:nick="none">
        <doc xml:space="preserve"
             filename="../pango/pango-coverage.h"
             line="42">The character is not representable with the font.</doc>
      </member>
      <member name="fallback"
              value="1"
              c:identifier="PANGO_COVERAGE_FALLBACK"
              glib:nick="fallback">
        <doc xml:space="preserve"
             filename="../pango/pango-coverage.h"
             line="43">The character is represented in a way that may be
comprehensible but is not the correct graphical form.
For instance, a Hangul character represented as a
a sequence of Jamos, or a Latin transliteration of a Cyrillic word.</doc>
      </member>
      <member name="approximate"
              value="2"
              c:identifier="PANGO_COVERAGE_APPROXIMATE"
              glib:nick="approximate">
        <doc xml:space="preserve"
             filename="../pango/pango-coverage.h"
             line="47">The character is represented as basically the correct
graphical form, but with a stylistic variant inappropriate for
the current script.</doc>
      </member>
      <member name="exact"
              value="3"
              c:identifier="PANGO_COVERAGE_EXACT"
              glib:nick="exact">
        <doc xml:space="preserve"
             filename="../pango/pango-coverage.h"
             line="50">The character is represented as the correct graphical form.</doc>
      </member>
    </enumeration>
    <function-macro name="DEPRECATED_FOR"
                    c:identifier="PANGO_DEPRECATED_FOR"
                    introspectable="0">
      <source-position filename="../pango/pango-version-macros.h" line="362"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_IN_1_10_FOR"
                    c:identifier="PANGO_DEPRECATED_IN_1_10_FOR"
                    introspectable="0">
      <source-position filename="../pango/pango-version-macros.h" line="430"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_IN_1_12_FOR"
                    c:identifier="PANGO_DEPRECATED_IN_1_12_FOR"
                    introspectable="0">
      <source-position filename="../pango/pango-version-macros.h" line="450"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_IN_1_14_FOR"
                    c:identifier="PANGO_DEPRECATED_IN_1_14_FOR"
                    introspectable="0">
      <source-position filename="../pango/pango-version-macros.h" line="464"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_IN_1_16_FOR"
                    c:identifier="PANGO_DEPRECATED_IN_1_16_FOR"
                    introspectable="0">
      <source-position filename="../pango/pango-version-macros.h" line="478"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_IN_1_18_FOR"
                    c:identifier="PANGO_DEPRECATED_IN_1_18_FOR"
                    introspectable="0">
      <source-position filename="../pango/pango-version-macros.h" line="486"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_IN_1_20_FOR"
                    c:identifier="PANGO_DEPRECATED_IN_1_20_FOR"
                    introspectable="0">
      <source-position filename="../pango/pango-version-macros.h" line="500"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_IN_1_22_FOR"
                    c:identifier="PANGO_DEPRECATED_IN_1_22_FOR"
                    introspectable="0">
      <source-position filename="../pango/pango-version-macros.h" line="514"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_IN_1_24_FOR"
                    c:identifier="PANGO_DEPRECATED_IN_1_24_FOR"
                    introspectable="0">
      <source-position filename="../pango/pango-version-macros.h" line="528"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_IN_1_26_FOR"
                    c:identifier="PANGO_DEPRECATED_IN_1_26_FOR"
                    introspectable="0">
      <source-position filename="../pango/pango-version-macros.h" line="542"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_IN_1_28_FOR"
                    c:identifier="PANGO_DEPRECATED_IN_1_28_FOR"
                    introspectable="0">
      <source-position filename="../pango/pango-version-macros.h" line="556"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_IN_1_2_FOR"
                    c:identifier="PANGO_DEPRECATED_IN_1_2_FOR"
                    introspectable="0">
      <source-position filename="../pango/pango-version-macros.h" line="373"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_IN_1_30_FOR"
                    c:identifier="PANGO_DEPRECATED_IN_1_30_FOR"
                    introspectable="0">
      <source-position filename="../pango/pango-version-macros.h" line="570"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_IN_1_32_FOR"
                    c:identifier="PANGO_DEPRECATED_IN_1_32_FOR"
                    introspectable="0">
      <source-position filename="../pango/pango-version-macros.h" line="584"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_IN_1_34_FOR"
                    c:identifier="PANGO_DEPRECATED_IN_1_34_FOR"
                    introspectable="0">
      <source-position filename="../pango/pango-version-macros.h" line="598"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_IN_1_36_FOR"
                    c:identifier="PANGO_DEPRECATED_IN_1_36_FOR"
                    introspectable="0">
      <source-position filename="../pango/pango-version-macros.h" line="612"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_IN_1_38_FOR"
                    c:identifier="PANGO_DEPRECATED_IN_1_38_FOR"
                    introspectable="0">
      <source-position filename="../pango/pango-version-macros.h" line="626"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_IN_1_40_FOR"
                    c:identifier="PANGO_DEPRECATED_IN_1_40_FOR"
                    introspectable="0">
      <source-position filename="../pango/pango-version-macros.h" line="640"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_IN_1_42_FOR"
                    c:identifier="PANGO_DEPRECATED_IN_1_42_FOR"
                    introspectable="0">
      <source-position filename="../pango/pango-version-macros.h" line="654"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_IN_1_44_FOR"
                    c:identifier="PANGO_DEPRECATED_IN_1_44_FOR"
                    introspectable="0">
      <source-position filename="../pango/pango-version-macros.h" line="668"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_IN_1_46_FOR"
                    c:identifier="PANGO_DEPRECATED_IN_1_46_FOR"
                    introspectable="0">
      <source-position filename="../pango/pango-version-macros.h" line="682"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_IN_1_48_FOR"
                    c:identifier="PANGO_DEPRECATED_IN_1_48_FOR"
                    introspectable="0">
      <source-position filename="../pango/pango-version-macros.h" line="696"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_IN_1_4_FOR"
                    c:identifier="PANGO_DEPRECATED_IN_1_4_FOR"
                    introspectable="0">
      <source-position filename="../pango/pango-version-macros.h" line="387"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_IN_1_6_FOR"
                    c:identifier="PANGO_DEPRECATED_IN_1_6_FOR"
                    introspectable="0">
      <source-position filename="../pango/pango-version-macros.h" line="402"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_IN_1_8_FOR"
                    c:identifier="PANGO_DEPRECATED_IN_1_8_FOR"
                    introspectable="0">
      <source-position filename="../pango/pango-version-macros.h" line="416"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DESCENT"
                    c:identifier="PANGO_DESCENT"
                    introspectable="0">
      <doc xml:space="preserve"
           filename="../pango/pango-types.h"
           line="157">Extracts the &lt;firstterm&gt;descent&lt;/firstterm&gt; from a #PangoRectangle
representing glyph extents. The descent is the distance from the
baseline to the lowest point of the character. This is positive if the
glyph descends below the baseline.</doc>
      <source-position filename="../pango/pango-types.h" line="187"/>
      <parameters>
        <parameter name="rect">
          <doc xml:space="preserve"
               filename="../pango/pango-types.h"
               line="159">a #PangoRectangle</doc>
        </parameter>
      </parameters>
    </function-macro>
    <enumeration name="Direction"
                 glib:type-name="PangoDirection"
                 glib:get-type="pango_direction_get_type"
                 c:type="PangoDirection">
      <doc xml:space="preserve"
           filename="../pango/pango-direction.h"
           line="29">The #PangoDirection type represents a direction in the
Unicode bidirectional algorithm; not every value in this
enumeration makes sense for every usage of #PangoDirection;
for example, the return value of pango_unichar_direction()
and pango_find_base_dir() cannot be %PANGO_DIRECTION_WEAK_LTR
or %PANGO_DIRECTION_WEAK_RTL, since every character is either
neutral or has a strong direction; on the other hand
%PANGO_DIRECTION_NEUTRAL doesn't make sense to pass
to pango_itemize_with_base_dir().

The %PANGO_DIRECTION_TTB_LTR, %PANGO_DIRECTION_TTB_RTL
values come from an earlier interpretation of this
enumeration as the writing direction of a block of
text and are no longer used; See #PangoGravity for how
vertical text is handled in Pango.

If you are interested in text direction, you should
really use fribidi directly. PangoDirection is only
retained because it is used in some public apis.</doc>
      <member name="ltr"
              value="0"
              c:identifier="PANGO_DIRECTION_LTR"
              glib:nick="ltr">
        <doc xml:space="preserve"
             filename="../pango/pango-direction.h"
             line="31">A strong left-to-right direction</doc>
      </member>
      <member name="rtl"
              value="1"
              c:identifier="PANGO_DIRECTION_RTL"
              glib:nick="rtl">
        <doc xml:space="preserve"
             filename="../pango/pango-direction.h"
             line="32">A strong right-to-left direction</doc>
      </member>
      <member name="ttb_ltr"
              value="2"
              c:identifier="PANGO_DIRECTION_TTB_LTR"
              glib:nick="ttb-ltr">
        <doc xml:space="preserve"
             filename="../pango/pango-direction.h"
             line="33">Deprecated value; treated the
  same as %PANGO_DIRECTION_RTL.</doc>
      </member>
      <member name="ttb_rtl"
              value="3"
              c:identifier="PANGO_DIRECTION_TTB_RTL"
              glib:nick="ttb-rtl">
        <doc xml:space="preserve"
             filename="../pango/pango-direction.h"
             line="35">Deprecated value; treated the
  same as %PANGO_DIRECTION_LTR</doc>
      </member>
      <member name="weak_ltr"
              value="4"
              c:identifier="PANGO_DIRECTION_WEAK_LTR"
              glib:nick="weak-ltr">
        <doc xml:space="preserve"
             filename="../pango/pango-direction.h"
             line="37">A weak left-to-right direction</doc>
      </member>
      <member name="weak_rtl"
              value="5"
              c:identifier="PANGO_DIRECTION_WEAK_RTL"
              glib:nick="weak-rtl">
        <doc xml:space="preserve"
             filename="../pango/pango-direction.h"
             line="38">A weak right-to-left direction</doc>
      </member>
      <member name="neutral"
              value="6"
              c:identifier="PANGO_DIRECTION_NEUTRAL"
              glib:nick="neutral">
        <doc xml:space="preserve"
             filename="../pango/pango-direction.h"
             line="39">No direction specified</doc>
      </member>
    </enumeration>
    <function-macro name="ENGINE"
                    c:identifier="PANGO_ENGINE"
                    introspectable="0">
      <source-position filename="../pango/pango-engine.h" line="46"/>
      <parameters>
        <parameter name="object">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="ENGINE_CLASS"
                    c:identifier="PANGO_ENGINE_CLASS"
                    introspectable="0">
      <source-position filename="../pango/pango-engine.h" line="48"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="ENGINE_GET_CLASS"
                    c:identifier="PANGO_ENGINE_GET_CLASS"
                    introspectable="0">
      <source-position filename="../pango/pango-engine.h" line="50"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="ENGINE_LANG"
                    c:identifier="PANGO_ENGINE_LANG"
                    introspectable="0">
      <source-position filename="../pango/pango-engine.h" line="96"/>
      <parameters>
        <parameter name="object">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="ENGINE_LANG_CLASS"
                    c:identifier="PANGO_ENGINE_LANG_CLASS"
                    introspectable="0">
      <source-position filename="../pango/pango-engine.h" line="98"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="ENGINE_LANG_GET_CLASS"
                    c:identifier="PANGO_ENGINE_LANG_GET_CLASS"
                    introspectable="0">
      <source-position filename="../pango/pango-engine.h" line="100"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="ENGINE_SHAPE"
                    c:identifier="PANGO_ENGINE_SHAPE"
                    introspectable="0">
      <source-position filename="../pango/pango-engine.h" line="163"/>
      <parameters>
        <parameter name="object">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="ENGINE_SHAPE_CLASS"
                    c:identifier="PANGO_ENGINE_SHAPE_CLASS"
                    introspectable="0">
      <source-position filename="../pango/pango-engine.h" line="165"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="ENGINE_SHAPE_GET_CLASS"
                    c:identifier="PANGO_ENGINE_SHAPE_GET_CLASS"
                    introspectable="0">
      <source-position filename="../pango/pango-engine.h" line="167"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <constant name="ENGINE_TYPE_LANG"
              value="PangoEngineLang"
              c:type="PANGO_ENGINE_TYPE_LANG"
              deprecated="1"
              deprecated-version="1.38">
      <doc xml:space="preserve"
           filename="../pango/pango-engine.h"
           line="85">A string constant defining the engine type for language engines.
These engines derive from #PangoEngineLang.</doc>
      <source-position filename="../pango/pango-engine.h" line="93"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="ENGINE_TYPE_SHAPE"
              value="PangoEngineShape"
              c:type="PANGO_ENGINE_TYPE_SHAPE"
              deprecated="1"
              deprecated-version="1.38">
      <doc xml:space="preserve"
           filename="../pango/pango-engine.h"
           line="152">A string constant defining the engine type for shaping engines.
These engines derive from #PangoEngineShape.</doc>
      <source-position filename="../pango/pango-engine.h" line="160"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <enumeration name="EllipsizeMode"
                 glib:type-name="PangoEllipsizeMode"
                 glib:get-type="pango_ellipsize_mode_get_type"
                 c:type="PangoEllipsizeMode">
      <doc xml:space="preserve"
           filename="../pango/pango-layout.h"
           line="77">The #PangoEllipsizeMode type describes what sort of (if any)
ellipsization should be applied to a line of text. In
the ellipsization process characters are removed from the
text in order to make it fit to a given width and replaced
with an ellipsis.</doc>
      <member name="none"
              value="0"
              c:identifier="PANGO_ELLIPSIZE_NONE"
              glib:nick="none">
        <doc xml:space="preserve"
             filename="../pango/pango-layout.h"
             line="79">No ellipsization</doc>
      </member>
      <member name="start"
              value="1"
              c:identifier="PANGO_ELLIPSIZE_START"
              glib:nick="start">
        <doc xml:space="preserve"
             filename="../pango/pango-layout.h"
             line="80">Omit characters at the start of the text</doc>
      </member>
      <member name="middle"
              value="2"
              c:identifier="PANGO_ELLIPSIZE_MIDDLE"
              glib:nick="middle">
        <doc xml:space="preserve"
             filename="../pango/pango-layout.h"
             line="81">Omit characters in the middle of the text</doc>
      </member>
      <member name="end"
              value="3"
              c:identifier="PANGO_ELLIPSIZE_END"
              glib:nick="end">
        <doc xml:space="preserve"
             filename="../pango/pango-layout.h"
             line="82">Omit characters at the end of the text</doc>
      </member>
    </enumeration>
    <class name="Engine"
           c:symbol-prefix="engine"
           c:type="PangoEngine"
           deprecated="1"
           deprecated-version="1.38"
           parent="GObject.Object"
           abstract="1"
           glib:type-name="PangoEngine"
           glib:get-type="pango_engine_get_type"
           glib:type-struct="EngineClass">
      <doc xml:space="preserve"
           filename="../pango/pango-engine.h"
           line="55">#PangoEngine is the base class for all types of language and
script specific engines. It has no functionality by itself.</doc>
      <source-position filename="../pango/pango-engine.h" line="80"/>
      <field name="parent_instance" readable="0" private="1">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
    </class>
    <record name="EngineClass"
            c:type="PangoEngineClass"
            glib:is-gtype-struct-for="Engine"
            deprecated="1"
            deprecated-version="1.38">
      <doc xml:space="preserve"
           filename="../pango/pango-engine.h"
           line="69">Class structure for #PangoEngine</doc>
      <source-position filename="../pango/pango-engine.h" line="80"/>
      <field name="parent_class" readable="0" private="1">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <record name="EngineInfo"
            c:type="PangoEngineInfo"
            deprecated="1"
            deprecated-version="1.38">
      <doc xml:space="preserve"
           filename="../pango/pango-engine.h"
           line="268">The #PangoEngineInfo structure contains information about a particular
engine. It contains the following fields:</doc>
      <source-position filename="../pango/pango-engine.h" line="288"/>
      <field name="id" writable="1">
        <doc xml:space="preserve"
             filename="../pango/pango-engine.h"
             line="270">a unique string ID for the engine.</doc>
        <type name="utf8" c:type="const gchar*"/>
      </field>
      <field name="engine_type" writable="1">
        <doc xml:space="preserve"
             filename="../pango/pango-engine.h"
             line="271">a string identifying the engine type.</doc>
        <type name="utf8" c:type="const gchar*"/>
      </field>
      <field name="render_type" writable="1">
        <doc xml:space="preserve"
             filename="../pango/pango-engine.h"
             line="272">a string identifying the render type.</doc>
        <type name="utf8" c:type="const gchar*"/>
      </field>
      <field name="scripts" writable="1">
        <doc xml:space="preserve"
             filename="../pango/pango-engine.h"
             line="273">array of scripts this engine supports.</doc>
        <type name="EngineScriptInfo" c:type="PangoEngineScriptInfo*"/>
      </field>
      <field name="n_scripts" writable="1">
        <doc xml:space="preserve"
             filename="../pango/pango-engine.h"
             line="274">number of items in @scripts.</doc>
        <type name="gint" c:type="gint"/>
      </field>
    </record>
    <class name="EngineLang"
           c:symbol-prefix="engine_lang"
           c:type="PangoEngineLang"
           deprecated="1"
           deprecated-version="1.38"
           parent="Engine"
           abstract="1"
           glib:type-name="PangoEngineLang"
           glib:get-type="pango_engine_lang_get_type"
           glib:type-struct="EngineLangClass">
      <doc xml:space="preserve"
           filename="../pango/pango-engine.h"
           line="104">The #PangoEngineLang class is implemented by engines that
customize the rendering-system independent part of the
Pango pipeline for a particular script or language. For
instance, a custom #PangoEngineLang could be provided for
Thai to implement the dictionary-based word boundary
lookups needed for that language.</doc>
      <source-position filename="../pango/pango-engine.h" line="147"/>
      <virtual-method name="script_break">
        <source-position filename="../pango/pango-engine.h" line="141"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="engine" transfer-ownership="none">
            <type name="EngineLang" c:type="PangoEngineLang*"/>
          </instance-parameter>
          <parameter name="text" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="len" transfer-ownership="none">
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="analysis" transfer-ownership="none">
            <type name="Analysis" c:type="PangoAnalysis*"/>
          </parameter>
          <parameter name="attrs" transfer-ownership="none">
            <type name="LogAttr" c:type="PangoLogAttr*"/>
          </parameter>
          <parameter name="attrs_len" transfer-ownership="none">
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </virtual-method>
      <field name="parent_instance" readable="0" private="1">
        <type name="Engine" c:type="PangoEngine"/>
      </field>
    </class>
    <record name="EngineLangClass"
            c:type="PangoEngineLangClass"
            glib:is-gtype-struct-for="EngineLang"
            deprecated="1"
            deprecated-version="1.38">
      <doc xml:space="preserve"
           filename="../pango/pango-engine.h"
           line="122">Class structure for #PangoEngineLang</doc>
      <source-position filename="../pango/pango-engine.h" line="147"/>
      <field name="parent_class" readable="0" private="1">
        <type name="EngineClass" c:type="PangoEngineClass"/>
      </field>
      <field name="script_break">
        <callback name="script_break">
          <source-position filename="../pango/pango-engine.h" line="141"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="engine" transfer-ownership="none">
              <type name="EngineLang" c:type="PangoEngineLang*"/>
            </parameter>
            <parameter name="text" transfer-ownership="none">
              <type name="utf8" c:type="const char*"/>
            </parameter>
            <parameter name="len" transfer-ownership="none">
              <type name="gint" c:type="int"/>
            </parameter>
            <parameter name="analysis" transfer-ownership="none">
              <type name="Analysis" c:type="PangoAnalysis*"/>
            </parameter>
            <parameter name="attrs" transfer-ownership="none">
              <type name="LogAttr" c:type="PangoLogAttr*"/>
            </parameter>
            <parameter name="attrs_len" transfer-ownership="none">
              <type name="gint" c:type="int"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <record name="EngineScriptInfo"
            c:type="PangoEngineScriptInfo"
            deprecated="1"
            deprecated-version="1.38">
      <doc xml:space="preserve"
           filename="../pango/pango-engine.h"
           line="243">The #PangoEngineScriptInfo structure contains
information about how the shaper covers a particular script.</doc>
      <source-position filename="../pango/pango-engine.h" line="266"/>
      <field name="script" writable="1">
        <doc xml:space="preserve"
             filename="../pango/pango-engine.h"
             line="245">a #PangoScript. The value %PANGO_SCRIPT_COMMON has
the special meaning here of "all scripts"</doc>
        <type name="Script" c:type="PangoScript"/>
      </field>
      <field name="langs" writable="1">
        <doc xml:space="preserve"
             filename="../pango/pango-engine.h"
             line="247">a semicolon separated list of languages that this
engine handles for this script. This may be empty,
in which case the engine is saying that it is a
fallback choice for all languages for this range,
but should not be used if another engine
indicates that it is specific for the language for
a given code point. An entry in this list of "*"
indicates that this engine is specific to all
languages for this range.</doc>
        <type name="utf8" c:type="const gchar*"/>
      </field>
    </record>
    <class name="EngineShape"
           c:symbol-prefix="engine_shape"
           c:type="PangoEngineShape"
           deprecated="1"
           deprecated-version="1.38"
           parent="Engine"
           abstract="1"
           glib:type-name="PangoEngineShape"
           glib:get-type="pango_engine_shape_get_type"
           glib:type-struct="EngineShapeClass">
      <doc xml:space="preserve"
           filename="../pango/pango-engine.h"
           line="171">The #PangoEngineShape class is implemented by engines that
customize the rendering-system dependent part of the
Pango pipeline for a particular script or language.
A #PangoEngineShape implementation is then specific to both
a particular rendering system or group of rendering systems
and to a particular script. For instance, there is one
#PangoEngineShape implementation to handle shaping Arabic
for Fontconfig-based backends.</doc>
      <source-position filename="../pango/pango-engine.h" line="235"/>
      <virtual-method name="covers">
        <source-position filename="../pango/pango-engine.h" line="231"/>
        <return-value transfer-ownership="none">
          <type name="CoverageLevel" c:type="PangoCoverageLevel"/>
        </return-value>
        <parameters>
          <instance-parameter name="engine" transfer-ownership="none">
            <type name="EngineShape" c:type="PangoEngineShape*"/>
          </instance-parameter>
          <parameter name="font" transfer-ownership="none">
            <type name="Font" c:type="PangoFont*"/>
          </parameter>
          <parameter name="language" transfer-ownership="none">
            <type name="Language" c:type="PangoLanguage*"/>
          </parameter>
          <parameter name="wc" transfer-ownership="none">
            <type name="gunichar" c:type="gunichar"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="script_shape">
        <source-position filename="../pango/pango-engine.h" line="223"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="engine" transfer-ownership="none">
            <type name="EngineShape" c:type="PangoEngineShape*"/>
          </instance-parameter>
          <parameter name="font" transfer-ownership="none">
            <type name="Font" c:type="PangoFont*"/>
          </parameter>
          <parameter name="item_text" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="item_length" transfer-ownership="none">
            <type name="guint" c:type="unsigned int"/>
          </parameter>
          <parameter name="analysis" transfer-ownership="none">
            <type name="Analysis" c:type="const PangoAnalysis*"/>
          </parameter>
          <parameter name="glyphs" transfer-ownership="none">
            <type name="GlyphString" c:type="PangoGlyphString*"/>
          </parameter>
          <parameter name="paragraph_text" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="paragraph_length" transfer-ownership="none">
            <type name="guint" c:type="unsigned int"/>
          </parameter>
        </parameters>
      </virtual-method>
      <field name="parent_instance">
        <type name="Engine" c:type="PangoEngine"/>
      </field>
    </class>
    <record name="EngineShapeClass"
            c:type="PangoEngineShapeClass"
            glib:is-gtype-struct-for="EngineShape"
            deprecated="1"
            deprecated-version="1.38">
      <doc xml:space="preserve"
           filename="../pango/pango-engine.h"
           line="190">Class structure for #PangoEngineShape</doc>
      <source-position filename="../pango/pango-engine.h" line="235"/>
      <field name="parent_class" readable="0" private="1">
        <type name="EngineClass" c:type="PangoEngineClass"/>
      </field>
      <field name="script_shape">
        <callback name="script_shape">
          <source-position filename="../pango/pango-engine.h" line="223"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="engine" transfer-ownership="none">
              <type name="EngineShape" c:type="PangoEngineShape*"/>
            </parameter>
            <parameter name="font" transfer-ownership="none">
              <type name="Font" c:type="PangoFont*"/>
            </parameter>
            <parameter name="item_text" transfer-ownership="none">
              <type name="utf8" c:type="const char*"/>
            </parameter>
            <parameter name="item_length" transfer-ownership="none">
              <type name="guint" c:type="unsigned int"/>
            </parameter>
            <parameter name="analysis" transfer-ownership="none">
              <type name="Analysis" c:type="const PangoAnalysis*"/>
            </parameter>
            <parameter name="glyphs" transfer-ownership="none">
              <type name="GlyphString" c:type="PangoGlyphString*"/>
            </parameter>
            <parameter name="paragraph_text" transfer-ownership="none">
              <type name="utf8" c:type="const char*"/>
            </parameter>
            <parameter name="paragraph_length" transfer-ownership="none">
              <type name="guint" c:type="unsigned int"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="covers">
        <callback name="covers">
          <source-position filename="../pango/pango-engine.h" line="231"/>
          <return-value transfer-ownership="none">
            <type name="CoverageLevel" c:type="PangoCoverageLevel"/>
          </return-value>
          <parameters>
            <parameter name="engine" transfer-ownership="none">
              <type name="EngineShape" c:type="PangoEngineShape*"/>
            </parameter>
            <parameter name="font" transfer-ownership="none">
              <type name="Font" c:type="PangoFont*"/>
            </parameter>
            <parameter name="language" transfer-ownership="none">
              <type name="Language" c:type="PangoLanguage*"/>
            </parameter>
            <parameter name="wc" transfer-ownership="none">
              <type name="gunichar" c:type="gunichar"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <function-macro name="FONT" c:identifier="PANGO_FONT" introspectable="0">
      <doc xml:space="preserve"
           filename="../pango/pango-font.h"
           line="555">Casts a #GObject to a #PangoFont.</doc>
      <source-position filename="../pango/pango-font.h" line="568"/>
      <parameters>
        <parameter name="object">
          <doc xml:space="preserve"
               filename="../pango/pango-font.h"
               line="557">a #GObject.</doc>
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="FONTSET"
                    c:identifier="PANGO_FONTSET"
                    introspectable="0">
      <source-position filename="../pango/pango-fontset.h" line="42"/>
      <parameters>
        <parameter name="object">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="FONTSET_CLASS"
                    c:identifier="PANGO_FONTSET_CLASS"
                    introspectable="0">
      <source-position filename="../pango/pango-fontset.h" line="44"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="FONTSET_GET_CLASS"
                    c:identifier="PANGO_FONTSET_GET_CLASS"
                    introspectable="0">
      <source-position filename="../pango/pango-fontset.h" line="46"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="FONTSET_SIMPLE"
                    c:identifier="PANGO_FONTSET_SIMPLE"
                    introspectable="0">
      <source-position filename="../pango/pango-fontset.h" line="139"/>
      <parameters>
        <parameter name="object">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="FONT_CLASS"
                    c:identifier="PANGO_FONT_CLASS"
                    introspectable="0">
      <source-position filename="../pango/pango-font.h" line="570"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="FONT_FACE"
                    c:identifier="PANGO_FONT_FACE"
                    introspectable="0">
      <doc xml:space="preserve"
           filename="../pango/pango-font.h"
           line="471">Casts a #GObject to a #PangoFontFace.</doc>
      <source-position filename="../pango/pango-font.h" line="484"/>
      <parameters>
        <parameter name="object">
          <doc xml:space="preserve"
               filename="../pango/pango-font.h"
               line="473">a #GObject.</doc>
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="FONT_FACE_CLASS"
                    c:identifier="PANGO_FONT_FACE_CLASS"
                    introspectable="0">
      <source-position filename="../pango/pango-font.h" line="486"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="FONT_FACE_GET_CLASS"
                    c:identifier="PANGO_FONT_FACE_GET_CLASS"
                    introspectable="0">
      <source-position filename="../pango/pango-font.h" line="488"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="FONT_FAMILY"
                    c:identifier="PANGO_FONT_FAMILY"
                    introspectable="0">
      <doc xml:space="preserve"
           filename="../pango/pango-font.h"
           line="381">Casts a #GObject to a #PangoFontFamily.</doc>
      <source-position filename="../pango/pango-font.h" line="394"/>
      <parameters>
        <parameter name="object">
          <doc xml:space="preserve"
               filename="../pango/pango-font.h"
               line="383">a #GObject.</doc>
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="FONT_FAMILY_CLASS"
                    c:identifier="PANGO_FONT_FAMILY_CLASS"
                    introspectable="0">
      <source-position filename="../pango/pango-font.h" line="396"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="FONT_FAMILY_GET_CLASS"
                    c:identifier="PANGO_FONT_FAMILY_GET_CLASS"
                    introspectable="0">
      <source-position filename="../pango/pango-font.h" line="398"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="FONT_GET_CLASS"
                    c:identifier="PANGO_FONT_GET_CLASS"
                    introspectable="0">
      <source-position filename="../pango/pango-font.h" line="572"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="FONT_MAP"
                    c:identifier="PANGO_FONT_MAP"
                    introspectable="0">
      <doc xml:space="preserve"
           filename="../pango/pango-fontmap.h"
           line="35">Casts a #GObject to a #PangoFontMap.</doc>
      <source-position filename="../pango/pango-fontmap.h" line="48"/>
      <parameters>
        <parameter name="object">
          <doc xml:space="preserve"
               filename="../pango/pango-fontmap.h"
               line="37">a #GObject.</doc>
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="FONT_MAP_CLASS"
                    c:identifier="PANGO_FONT_MAP_CLASS"
                    introspectable="0">
      <source-position filename="../pango/pango-fontmap.h" line="50"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="FONT_MAP_GET_CLASS"
                    c:identifier="PANGO_FONT_MAP_GET_CLASS"
                    introspectable="0">
      <source-position filename="../pango/pango-fontmap.h" line="52"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <class name="Font"
           c:symbol-prefix="font"
           c:type="PangoFont"
           parent="GObject.Object"
           abstract="1"
           glib:type-name="PangoFont"
           glib:get-type="pango_font_get_type"
           glib:type-struct="FontClass">
      <doc xml:space="preserve"
           filename="../pango/pango-font.h"
           line="577">The #PangoFont structure is used to represent
a font in a rendering-system-independent matter.
To create an implementation of a #PangoFont,
the rendering-system specific code should allocate
a larger structure that contains a nested
#PangoFont, fill in the &lt;structfield&gt;klass&lt;/structfield&gt; member of
the nested #PangoFont with a pointer to
a appropriate #PangoFontClass, then call
pango_font_init() on the structure.

The #PangoFont structure contains one member
which the implementation fills in.</doc>
      <source-position filename="../pango/pango-font.h" line="621"/>
      <function name="descriptions_free"
                c:identifier="pango_font_descriptions_free">
        <doc xml:space="preserve"
             filename="../pango/fonts.c"
             line="954">Frees an array of font descriptions.</doc>
        <source-position filename="../pango/pango-font.h" line="236"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="descs"
                     transfer-ownership="full"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../pango/fonts.c"
                 line="956">a pointer
to an array of #PangoFontDescription, may be %NULL</doc>
            <array length="1"
                   zero-terminated="0"
                   c:type="PangoFontDescription**">
              <type name="FontDescription" c:type="PangoFontDescription*"/>
            </array>
          </parameter>
          <parameter name="n_descs" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/fonts.c"
                 line="958">number of font descriptions in @descs</doc>
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="create_hb_font">
        <source-position filename="../pango/pango-font.h" line="620"/>
        <return-value transfer-ownership="full">
          <type name="HarfBuzz.font_t" c:type="hb_font_t*"/>
        </return-value>
        <parameters>
          <instance-parameter name="font" transfer-ownership="none">
            <type name="Font" c:type="PangoFont*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="describe" invoker="describe">
        <doc xml:space="preserve"
             filename="../pango/fonts.c"
             line="1682">Returns a description of the font, with font size set in points.
Use pango_font_describe_with_absolute_size() if you want the font
size in device units.</doc>
        <source-position filename="../pango/pango-font.h" line="605"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../pango/fonts.c"
               line="1690">a newly-allocated #PangoFontDescription object.</doc>
          <type name="FontDescription" c:type="PangoFontDescription*"/>
        </return-value>
        <parameters>
          <instance-parameter name="font" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/fonts.c"
                 line="1684">a #PangoFont</doc>
            <type name="Font" c:type="PangoFont*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="describe_absolute">
        <source-position filename="../pango/pango-font.h" line="615"/>
        <return-value transfer-ownership="full">
          <type name="FontDescription" c:type="PangoFontDescription*"/>
        </return-value>
        <parameters>
          <instance-parameter name="font" transfer-ownership="none">
            <type name="Font" c:type="PangoFont*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_coverage" invoker="get_coverage">
        <doc xml:space="preserve"
             filename="../pango/fonts.c"
             line="1726">Computes the coverage map for a given font and language tag.</doc>
        <source-position filename="../pango/pango-font.h" line="606"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../pango/fonts.c"
               line="1733">a newly-allocated #PangoCoverage
  object.</doc>
          <type name="Coverage" c:type="PangoCoverage*"/>
        </return-value>
        <parameters>
          <instance-parameter name="font" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/fonts.c"
                 line="1728">a #PangoFont</doc>
            <type name="Font" c:type="PangoFont*"/>
          </instance-parameter>
          <parameter name="language" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/fonts.c"
                 line="1729">the language tag</doc>
            <type name="Language" c:type="PangoLanguage*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_features"
                      invoker="get_features"
                      version="1.44">
        <doc xml:space="preserve"
             filename="../pango/fonts.c"
             line="2551">Obtain the OpenType features that are provided by the font.
These are passed to the rendering system, together with features
that have been explicitly set via attributes.

Note that this does not include OpenType features which the
rendering system enables by default.</doc>
        <source-position filename="../pango/pango-font.h" line="616"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="font" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/fonts.c"
                 line="2553">a #PangoFont</doc>
            <type name="Font" c:type="PangoFont*"/>
          </instance-parameter>
          <parameter name="features"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/fonts.c"
                 line="2554">Array to features in</doc>
            <array length="1" zero-terminated="0" c:type="hb_feature_t*">
              <type name="HarfBuzz.feature_t" c:type="hb_feature_t"/>
            </array>
          </parameter>
          <parameter name="len"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="../pango/fonts.c"
                 line="2555">the length of @features</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="num_features"
                     direction="inout"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="../pango/fonts.c"
                 line="2556">the number of used items in @features</doc>
            <type name="guint" c:type="guint*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_font_map"
                      invoker="get_font_map"
                      version="1.10">
        <doc xml:space="preserve"
             filename="../pango/fonts.c"
             line="1854">Gets the font map for which the font was created.

Note that the font maintains a &lt;firstterm&gt;weak&lt;/firstterm&gt; reference
to the font map, so if all references to font map are dropped, the font
map will be finalized even if there are fonts created with the font
map that are still alive.  In that case this function will return %NULL.
It is the responsibility of the user to ensure that the font map is kept
alive.  In most uses this is not an issue as a #PangoContext holds
a reference to the font map.</doc>
        <source-position filename="../pango/pango-font.h" line="614"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="../pango/fonts.c"
               line="1868">the #PangoFontMap for the
              font, or %NULL if @font is %NULL.</doc>
          <type name="FontMap" c:type="PangoFontMap*"/>
        </return-value>
        <parameters>
          <instance-parameter name="font"
                              transfer-ownership="none"
                              nullable="1"
                              allow-none="1">
            <doc xml:space="preserve"
                 filename="../pango/fonts.c"
                 line="1856">a #PangoFont, or %NULL</doc>
            <type name="Font" c:type="PangoFont*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_glyph_extents" invoker="get_glyph_extents">
        <doc xml:space="preserve"
             filename="../pango/fonts.c"
             line="1765">Gets the logical and ink extents of a glyph within a font. The
coordinate system for each rectangle has its origin at the
base line and horizontal origin of the character with increasing
coordinates extending to the right and down. The macros PANGO_ASCENT(),
PANGO_DESCENT(), PANGO_LBEARING(), and PANGO_RBEARING() can be used to convert
from the extents rectangle to more traditional font metrics. The units
of the rectangles are in 1/PANGO_SCALE of a device unit.

If @font is %NULL, this function gracefully sets some sane values in the
output variables and returns.</doc>
        <source-position filename="../pango/pango-font.h" line="608"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="font"
                              transfer-ownership="none"
                              nullable="1"
                              allow-none="1">
            <doc xml:space="preserve"
                 filename="../pango/fonts.c"
                 line="1767">a #PangoFont</doc>
            <type name="Font" c:type="PangoFont*"/>
          </instance-parameter>
          <parameter name="glyph" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/fonts.c"
                 line="1768">the glyph index</doc>
            <type name="Glyph" c:type="PangoGlyph"/>
          </parameter>
          <parameter name="ink_rect"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../pango/fonts.c"
                 line="1769">rectangle used to store the extents of the glyph
           as drawn or %NULL to indicate that the result is not needed.</doc>
            <type name="Rectangle" c:type="PangoRectangle*"/>
          </parameter>
          <parameter name="logical_rect"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../pango/fonts.c"
                 line="1771">rectangle used to store the logical extents of
           the glyph or %NULL to indicate that the result is not needed.</doc>
            <type name="Rectangle" c:type="PangoRectangle*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_metrics" invoker="get_metrics">
        <doc xml:space="preserve"
             filename="../pango/fonts.c"
             line="1813">Gets overall metric information for a font. Since the metrics may be
substantially different for different scripts, a language tag can
be provided to indicate that the metrics should be retrieved that
correspond to the script(s) used by that language.

If @font is %NULL, this function gracefully sets some sane values in the
output variables and returns.</doc>
        <source-position filename="../pango/pango-font.h" line="612"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../pango/fonts.c"
               line="1827">a #PangoFontMetrics object. The caller must call pango_font_metrics_unref()
  when finished using the object.</doc>
          <type name="FontMetrics" c:type="PangoFontMetrics*"/>
        </return-value>
        <parameters>
          <instance-parameter name="font"
                              transfer-ownership="none"
                              nullable="1"
                              allow-none="1">
            <doc xml:space="preserve"
                 filename="../pango/fonts.c"
                 line="1815">a #PangoFont</doc>
            <type name="Font" c:type="PangoFont*"/>
          </instance-parameter>
          <parameter name="language"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../pango/fonts.c"
                 line="1816">language tag used to determine which script to get the metrics
           for, or %NULL to indicate to get the metrics for the entire font.</doc>
            <type name="Language" c:type="PangoLanguage*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="describe" c:identifier="pango_font_describe">
        <doc xml:space="preserve"
             filename="../pango/fonts.c"
             line="1682">Returns a description of the font, with font size set in points.
Use pango_font_describe_with_absolute_size() if you want the font
size in device units.</doc>
        <source-position filename="../pango/pango-font.h" line="629"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../pango/fonts.c"
               line="1690">a newly-allocated #PangoFontDescription object.</doc>
          <type name="FontDescription" c:type="PangoFontDescription*"/>
        </return-value>
        <parameters>
          <instance-parameter name="font" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/fonts.c"
                 line="1684">a #PangoFont</doc>
            <type name="Font" c:type="PangoFont*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="describe_with_absolute_size"
              c:identifier="pango_font_describe_with_absolute_size"
              version="1.14">
        <doc xml:space="preserve"
             filename="../pango/fonts.c"
             line="1700">Returns a description of the font, with absolute font size set
(in device units). Use pango_font_describe() if you want the font
size in points.</doc>
        <source-position filename="../pango/pango-font.h" line="631"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../pango/fonts.c"
               line="1708">a newly-allocated #PangoFontDescription object.</doc>
          <type name="FontDescription" c:type="PangoFontDescription*"/>
        </return-value>
        <parameters>
          <instance-parameter name="font" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/fonts.c"
                 line="1702">a #PangoFont</doc>
            <type name="Font" c:type="PangoFont*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="find_shaper"
              c:identifier="pango_font_find_shaper"
              deprecated="1">
        <doc xml:space="preserve"
             filename="../pango/fonts.c"
             line="1745">Finds the best matching shaper for a font for a particular
language tag and character point.</doc>
        <doc-deprecated xml:space="preserve">Shape engines are no longer used</doc-deprecated>
        <source-position filename="../pango/pango-font.h" line="636"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../pango/fonts.c"
               line="1754">the best matching shaper.</doc>
          <type name="EngineShape" c:type="PangoEngineShape*"/>
        </return-value>
        <parameters>
          <instance-parameter name="font" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/fonts.c"
                 line="1747">a #PangoFont</doc>
            <type name="Font" c:type="PangoFont*"/>
          </instance-parameter>
          <parameter name="language" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/fonts.c"
                 line="1748">the language tag</doc>
            <type name="Language" c:type="PangoLanguage*"/>
          </parameter>
          <parameter name="ch" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/fonts.c"
                 line="1749">a Unicode character.</doc>
            <type name="guint32" c:type="guint32"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_coverage" c:identifier="pango_font_get_coverage">
        <doc xml:space="preserve"
             filename="../pango/fonts.c"
             line="1726">Computes the coverage map for a given font and language tag.</doc>
        <source-position filename="../pango/pango-font.h" line="633"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../pango/fonts.c"
               line="1733">a newly-allocated #PangoCoverage
  object.</doc>
          <type name="Coverage" c:type="PangoCoverage*"/>
        </return-value>
        <parameters>
          <instance-parameter name="font" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/fonts.c"
                 line="1728">a #PangoFont</doc>
            <type name="Font" c:type="PangoFont*"/>
          </instance-parameter>
          <parameter name="language" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/fonts.c"
                 line="1729">the language tag</doc>
            <type name="Language" c:type="PangoLanguage*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_face"
              c:identifier="pango_font_get_face"
              version="1.46">
        <doc xml:space="preserve"
             filename="../pango/fonts.c"
             line="1885">Gets the #PangoFontFace to which @font belongs.</doc>
        <source-position filename="../pango/pango-font.h" line="651"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../pango/fonts.c"
               line="1891">the #PangoFontFace</doc>
          <type name="FontFace" c:type="PangoFontFace*"/>
        </return-value>
        <parameters>
          <instance-parameter name="font" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/fonts.c"
                 line="1887">a #PangoFont</doc>
            <type name="Font" c:type="PangoFont*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_features"
              c:identifier="pango_font_get_features"
              version="1.44">
        <doc xml:space="preserve"
             filename="../pango/fonts.c"
             line="2551">Obtain the OpenType features that are provided by the font.
These are passed to the rendering system, together with features
that have been explicitly set via attributes.

Note that this does not include OpenType features which the
rendering system enables by default.</doc>
        <source-position filename="../pango/pango-font.h" line="657"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="font" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/fonts.c"
                 line="2553">a #PangoFont</doc>
            <type name="Font" c:type="PangoFont*"/>
          </instance-parameter>
          <parameter name="features"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/fonts.c"
                 line="2554">Array to features in</doc>
            <array length="1" zero-terminated="0" c:type="hb_feature_t*">
              <type name="HarfBuzz.feature_t" c:type="hb_feature_t"/>
            </array>
          </parameter>
          <parameter name="len"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="../pango/fonts.c"
                 line="2555">the length of @features</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="num_features"
                     direction="inout"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="../pango/fonts.c"
                 line="2556">the number of used items in @features</doc>
            <type name="guint" c:type="guint*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_font_map"
              c:identifier="pango_font_get_font_map"
              version="1.10">
        <doc xml:space="preserve"
             filename="../pango/fonts.c"
             line="1854">Gets the font map for which the font was created.

Note that the font maintains a &lt;firstterm&gt;weak&lt;/firstterm&gt; reference
to the font map, so if all references to font map are dropped, the font
map will be finalized even if there are fonts created with the font
map that are still alive.  In that case this function will return %NULL.
It is the responsibility of the user to ensure that the font map is kept
alive.  In most uses this is not an issue as a #PangoContext holds
a reference to the font map.</doc>
        <source-position filename="../pango/pango-font.h" line="648"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="../pango/fonts.c"
               line="1868">the #PangoFontMap for the
              font, or %NULL if @font is %NULL.</doc>
          <type name="FontMap" c:type="PangoFontMap*"/>
        </return-value>
        <parameters>
          <instance-parameter name="font"
                              transfer-ownership="none"
                              nullable="1"
                              allow-none="1">
            <doc xml:space="preserve"
                 filename="../pango/fonts.c"
                 line="1856">a #PangoFont, or %NULL</doc>
            <type name="Font" c:type="PangoFont*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_glyph_extents"
              c:identifier="pango_font_get_glyph_extents">
        <doc xml:space="preserve"
             filename="../pango/fonts.c"
             line="1765">Gets the logical and ink extents of a glyph within a font. The
coordinate system for each rectangle has its origin at the
base line and horizontal origin of the character with increasing
coordinates extending to the right and down. The macros PANGO_ASCENT(),
PANGO_DESCENT(), PANGO_LBEARING(), and PANGO_RBEARING() can be used to convert
from the extents rectangle to more traditional font metrics. The units
of the rectangles are in 1/PANGO_SCALE of a device unit.

If @font is %NULL, this function gracefully sets some sane values in the
output variables and returns.</doc>
        <source-position filename="../pango/pango-font.h" line="643"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="font"
                              transfer-ownership="none"
                              nullable="1"
                              allow-none="1">
            <doc xml:space="preserve"
                 filename="../pango/fonts.c"
                 line="1767">a #PangoFont</doc>
            <type name="Font" c:type="PangoFont*"/>
          </instance-parameter>
          <parameter name="glyph" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/fonts.c"
                 line="1768">the glyph index</doc>
            <type name="Glyph" c:type="PangoGlyph"/>
          </parameter>
          <parameter name="ink_rect"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../pango/fonts.c"
                 line="1769">rectangle used to store the extents of the glyph
           as drawn or %NULL to indicate that the result is not needed.</doc>
            <type name="Rectangle" c:type="PangoRectangle*"/>
          </parameter>
          <parameter name="logical_rect"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../pango/fonts.c"
                 line="1771">rectangle used to store the logical extents of
           the glyph or %NULL to indicate that the result is not needed.</doc>
            <type name="Rectangle" c:type="PangoRectangle*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_hb_font"
              c:identifier="pango_font_get_hb_font"
              version="1.44"
              introspectable="0">
        <doc xml:space="preserve"
             filename="../pango/fonts.c"
             line="1903">Get a hb_font_t object backing this font.

Note that the objects returned by this function
are cached and immutable. If you need to make
changes to the hb_font_t, use hb_font_create_sub_font().</doc>
        <source-position filename="../pango/pango-font.h" line="662"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="../pango/fonts.c"
               line="1913">the hb_font_t object backing the
         font, or %NULL if the font does not have one</doc>
          <type name="HarfBuzz.font_t" c:type="hb_font_t*"/>
        </return-value>
        <parameters>
          <instance-parameter name="font" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/fonts.c"
                 line="1905">a #PangoFont</doc>
            <type name="Font" c:type="PangoFont*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_metrics" c:identifier="pango_font_get_metrics">
        <doc xml:space="preserve"
             filename="../pango/fonts.c"
             line="1813">Gets overall metric information for a font. Since the metrics may be
substantially different for different scripts, a language tag can
be provided to indicate that the metrics should be retrieved that
correspond to the script(s) used by that language.

If @font is %NULL, this function gracefully sets some sane values in the
output variables and returns.</doc>
        <source-position filename="../pango/pango-font.h" line="640"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../pango/fonts.c"
               line="1827">a #PangoFontMetrics object. The caller must call pango_font_metrics_unref()
  when finished using the object.</doc>
          <type name="FontMetrics" c:type="PangoFontMetrics*"/>
        </return-value>
        <parameters>
          <instance-parameter name="font"
                              transfer-ownership="none"
                              nullable="1"
                              allow-none="1">
            <doc xml:space="preserve"
                 filename="../pango/fonts.c"
                 line="1815">a #PangoFont</doc>
            <type name="Font" c:type="PangoFont*"/>
          </instance-parameter>
          <parameter name="language"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../pango/fonts.c"
                 line="1816">language tag used to determine which script to get the metrics
           for, or %NULL to indicate to get the metrics for the entire font.</doc>
            <type name="Language" c:type="PangoLanguage*"/>
          </parameter>
        </parameters>
      </method>
      <method name="has_char"
              c:identifier="pango_font_has_char"
              version="1.44">
        <doc xml:space="preserve"
             filename="../pango/fonts.c"
             line="2530">Returns whether the font provides a glyph for this character.

Returns %TRUE if @font can render @wc</doc>
        <source-position filename="../pango/pango-font.h" line="654"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="font" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/fonts.c"
                 line="2532">a #PangoFont</doc>
            <type name="Font" c:type="PangoFont*"/>
          </instance-parameter>
          <parameter name="wc" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/fonts.c"
                 line="2533">a Unicode character</doc>
            <type name="gunichar" c:type="gunichar"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent_instance">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
    </class>
    <record name="FontClass"
            c:type="PangoFontClass"
            glib:is-gtype-struct-for="Font">
      <source-position filename="../pango/pango-font.h" line="621"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="describe">
        <callback name="describe">
          <source-position filename="../pango/pango-font.h" line="605"/>
          <return-value transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="../pango/fonts.c"
                 line="1690">a newly-allocated #PangoFontDescription object.</doc>
            <type name="FontDescription" c:type="PangoFontDescription*"/>
          </return-value>
          <parameters>
            <parameter name="font" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="../pango/fonts.c"
                   line="1684">a #PangoFont</doc>
              <type name="Font" c:type="PangoFont*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_coverage">
        <callback name="get_coverage">
          <source-position filename="../pango/pango-font.h" line="606"/>
          <return-value transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="../pango/fonts.c"
                 line="1733">a newly-allocated #PangoCoverage
  object.</doc>
            <type name="Coverage" c:type="PangoCoverage*"/>
          </return-value>
          <parameters>
            <parameter name="font" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="../pango/fonts.c"
                   line="1728">a #PangoFont</doc>
              <type name="Font" c:type="PangoFont*"/>
            </parameter>
            <parameter name="language" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="../pango/fonts.c"
                   line="1729">the language tag</doc>
              <type name="Language" c:type="PangoLanguage*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_glyph_extents">
        <callback name="get_glyph_extents">
          <source-position filename="../pango/pango-font.h" line="608"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="font"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <doc xml:space="preserve"
                   filename="../pango/fonts.c"
                   line="1767">a #PangoFont</doc>
              <type name="Font" c:type="PangoFont*"/>
            </parameter>
            <parameter name="glyph" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="../pango/fonts.c"
                   line="1768">the glyph index</doc>
              <type name="Glyph" c:type="PangoGlyph"/>
            </parameter>
            <parameter name="ink_rect"
                       direction="out"
                       caller-allocates="1"
                       transfer-ownership="none"
                       optional="1"
                       allow-none="1">
              <doc xml:space="preserve"
                   filename="../pango/fonts.c"
                   line="1769">rectangle used to store the extents of the glyph
           as drawn or %NULL to indicate that the result is not needed.</doc>
              <type name="Rectangle" c:type="PangoRectangle*"/>
            </parameter>
            <parameter name="logical_rect"
                       direction="out"
                       caller-allocates="1"
                       transfer-ownership="none"
                       optional="1"
                       allow-none="1">
              <doc xml:space="preserve"
                   filename="../pango/fonts.c"
                   line="1771">rectangle used to store the logical extents of
           the glyph or %NULL to indicate that the result is not needed.</doc>
              <type name="Rectangle" c:type="PangoRectangle*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_metrics">
        <callback name="get_metrics">
          <source-position filename="../pango/pango-font.h" line="612"/>
          <return-value transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="../pango/fonts.c"
                 line="1827">a #PangoFontMetrics object. The caller must call pango_font_metrics_unref()
  when finished using the object.</doc>
            <type name="FontMetrics" c:type="PangoFontMetrics*"/>
          </return-value>
          <parameters>
            <parameter name="font"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <doc xml:space="preserve"
                   filename="../pango/fonts.c"
                   line="1815">a #PangoFont</doc>
              <type name="Font" c:type="PangoFont*"/>
            </parameter>
            <parameter name="language"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <doc xml:space="preserve"
                   filename="../pango/fonts.c"
                   line="1816">language tag used to determine which script to get the metrics
           for, or %NULL to indicate to get the metrics for the entire font.</doc>
              <type name="Language" c:type="PangoLanguage*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_font_map">
        <callback name="get_font_map">
          <source-position filename="../pango/pango-font.h" line="614"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="../pango/fonts.c"
                 line="1868">the #PangoFontMap for the
              font, or %NULL if @font is %NULL.</doc>
            <type name="FontMap" c:type="PangoFontMap*"/>
          </return-value>
          <parameters>
            <parameter name="font"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <doc xml:space="preserve"
                   filename="../pango/fonts.c"
                   line="1856">a #PangoFont, or %NULL</doc>
              <type name="Font" c:type="PangoFont*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="describe_absolute">
        <callback name="describe_absolute">
          <source-position filename="../pango/pango-font.h" line="615"/>
          <return-value transfer-ownership="full">
            <type name="FontDescription" c:type="PangoFontDescription*"/>
          </return-value>
          <parameters>
            <parameter name="font" transfer-ownership="none">
              <type name="Font" c:type="PangoFont*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_features">
        <callback name="get_features">
          <source-position filename="../pango/pango-font.h" line="616"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="font" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="../pango/fonts.c"
                   line="2553">a #PangoFont</doc>
              <type name="Font" c:type="PangoFont*"/>
            </parameter>
            <parameter name="features"
                       direction="out"
                       caller-allocates="1"
                       transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="../pango/fonts.c"
                   line="2554">Array to features in</doc>
              <array length="2" zero-terminated="0" c:type="hb_feature_t*">
                <type name="HarfBuzz.feature_t" c:type="hb_feature_t"/>
              </array>
            </parameter>
            <parameter name="len"
                       direction="out"
                       caller-allocates="0"
                       transfer-ownership="full">
              <doc xml:space="preserve"
                   filename="../pango/fonts.c"
                   line="2555">the length of @features</doc>
              <type name="guint" c:type="guint"/>
            </parameter>
            <parameter name="num_features"
                       direction="inout"
                       caller-allocates="0"
                       transfer-ownership="full">
              <doc xml:space="preserve"
                   filename="../pango/fonts.c"
                   line="2556">the number of used items in @features</doc>
              <type name="guint" c:type="guint*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="create_hb_font">
        <callback name="create_hb_font">
          <source-position filename="../pango/pango-font.h" line="620"/>
          <return-value transfer-ownership="full">
            <type name="HarfBuzz.font_t" c:type="hb_font_t*"/>
          </return-value>
          <parameters>
            <parameter name="font" transfer-ownership="none">
              <type name="Font" c:type="PangoFont*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <record name="FontDescription"
            c:type="PangoFontDescription"
            glib:type-name="PangoFontDescription"
            glib:get-type="pango_font_description_get_type"
            c:symbol-prefix="font_description">
      <doc xml:space="preserve"
           filename="../pango/pango-font.h"
           line="33">The #PangoFontDescription structure represents the description
of an ideal font. These structures are used both to list
what fonts are available on the system and also for specifying
the characteristics of a font to load.</doc>
      <source-position filename="../pango/pango-font.h" line="41"/>
      <constructor name="new" c:identifier="pango_font_description_new">
        <doc xml:space="preserve"
             filename="../pango/fonts.c"
             line="89">Creates a new font description structure with all fields unset.</doc>
        <source-position filename="../pango/pango-font.h" line="223"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../pango/fonts.c"
               line="94">the newly allocated #PangoFontDescription, which
              should be freed using pango_font_description_free().</doc>
          <type name="FontDescription" c:type="PangoFontDescription*"/>
        </return-value>
      </constructor>
      <method name="better_match"
              c:identifier="pango_font_description_better_match">
        <doc xml:space="preserve"
             filename="../pango/fonts.c"
             line="738">Determines if the style attributes of @new_match are a closer match
for @desc than those of @old_match are, or if @old_match is %NULL,
determines if @new_match is a match at all.
Approximate matching is done for
weight and style; other style attributes must match exactly.
Style attributes are all attributes other than family and size-related
attributes.  Approximate matching for style considers PANGO_STYLE_OBLIQUE
and PANGO_STYLE_ITALIC as matches, but not as good a match as when the
styles are equal.

Note that @old_match must match @desc.</doc>
        <source-position filename="../pango/pango-font.h" line="308"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../pango/fonts.c"
               line="756">%TRUE if @new_match is a better match</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="desc" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/fonts.c"
                 line="740">a #PangoFontDescription</doc>
            <type name="FontDescription" c:type="const PangoFontDescription*"/>
          </instance-parameter>
          <parameter name="old_match"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../pango/fonts.c"
                 line="741">a #PangoFontDescription, or %NULL</doc>
            <type name="FontDescription" c:type="const PangoFontDescription*"/>
          </parameter>
          <parameter name="new_match" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/fonts.c"
                 line="742">a #PangoFontDescription</doc>
            <type name="FontDescription" c:type="const PangoFontDescription*"/>
          </parameter>
        </parameters>
      </method>
      <method name="copy" c:identifier="pango_font_description_copy">
        <doc xml:space="preserve"
             filename="../pango/fonts.c"
             line="780">Make a copy of a #PangoFontDescription.</doc>
        <source-position filename="../pango/pango-font.h" line="225"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="../pango/fonts.c"
               line="786">the newly allocated
              #PangoFontDescription, which should be freed with
              pango_font_description_free(), or %NULL if @desc was
              %NULL.</doc>
          <type name="FontDescription" c:type="PangoFontDescription*"/>
        </return-value>
        <parameters>
          <instance-parameter name="desc"
                              transfer-ownership="none"
                              nullable="1"
                              allow-none="1">
            <doc xml:space="preserve"
                 filename="../pango/fonts.c"
                 line="782">a #PangoFontDescription, may be %NULL</doc>
            <type name="FontDescription" c:type="const PangoFontDescription*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="copy_static"
              c:identifier="pango_font_description_copy_static">
        <doc xml:space="preserve"
             filename="../pango/fonts.c"
             line="815">Like pango_font_description_copy(), but only a shallow copy is made
of the family name and other allocated fields. The result can only
be used until @desc is modified or freed. This is meant to be used
when the copy is only needed temporarily.</doc>
        <source-position filename="../pango/pango-font.h" line="227"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="../pango/fonts.c"
               line="824">the newly allocated
              #PangoFontDescription, which should be freed with
              pango_font_description_free(), or %NULL if @desc was
              %NULL.</doc>
          <type name="FontDescription" c:type="PangoFontDescription*"/>
        </return-value>
        <parameters>
          <instance-parameter name="desc"
                              transfer-ownership="none"
                              nullable="1"
                              allow-none="1">
            <doc xml:space="preserve"
                 filename="../pango/fonts.c"
                 line="817">a #PangoFontDescription, may be %NULL</doc>
            <type name="FontDescription" c:type="const PangoFontDescription*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="equal" c:identifier="pango_font_description_equal">
        <doc xml:space="preserve"
             filename="../pango/fonts.c"
             line="850">Compares two font descriptions for equality. Two font descriptions
are considered equal if the fonts they describe are provably identical.
This means that their masks do not have to match, as long as other fields
are all the same. (Two font descriptions may result in identical fonts
being loaded, but still compare %FALSE.)</doc>
        <source-position filename="../pango/pango-font.h" line="231"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../pango/fonts.c"
               line="861">%TRUE if the two font descriptions are identical,
	 %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="desc1" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/fonts.c"
                 line="852">a #PangoFontDescription</doc>
            <type name="FontDescription" c:type="const PangoFontDescription*"/>
          </instance-parameter>
          <parameter name="desc2" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/fonts.c"
                 line="853">another #PangoFontDescription</doc>
            <type name="FontDescription" c:type="const PangoFontDescription*"/>
          </parameter>
        </parameters>
      </method>
      <method name="free" c:identifier="pango_font_description_free">
        <doc xml:space="preserve"
             filename="../pango/fonts.c"
             line="933">Frees a font description.</doc>
        <source-position filename="../pango/pango-font.h" line="234"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="desc"
                              transfer-ownership="none"
                              nullable="1"
                              allow-none="1">
            <doc xml:space="preserve"
                 filename="../pango/fonts.c"
                 line="935">a #PangoFontDescription, may be %NULL</doc>
            <type name="FontDescription" c:type="PangoFontDescription*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_family"
              c:identifier="pango_font_description_get_family">
        <doc xml:space="preserve"
             filename="../pango/fonts.c"
             line="167">Gets the family name field of a font description. See
pango_font_description_set_family().</doc>
        <source-position filename="../pango/pango-font.h" line="246"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="../pango/fonts.c"
               line="174">the family name field for the font
              description, or %NULL if not previously set.  This
              has the same life-time as the font description itself
              and should not be freed.</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="desc" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/fonts.c"
                 line="169">a #PangoFontDescription.</doc>
            <type name="FontDescription" c:type="const PangoFontDescription*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_gravity"
              c:identifier="pango_font_description_get_gravity"
              version="1.16">
        <doc xml:space="preserve"
             filename="../pango/fonts.c"
             line="468">Gets the gravity field of a font description. See
pango_font_description_set_gravity().</doc>
        <source-position filename="../pango/pango-font.h" line="281"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../pango/fonts.c"
               line="475">the gravity field for the font description. Use
  pango_font_description_get_set_fields() to find out if
  the field was explicitly set or not.</doc>
          <type name="Gravity" c:type="PangoGravity"/>
        </return-value>
        <parameters>
          <instance-parameter name="desc" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/fonts.c"
                 line="470">a #PangoFontDescription</doc>
            <type name="FontDescription" c:type="const PangoFontDescription*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_set_fields"
              c:identifier="pango_font_description_get_set_fields">
        <doc xml:space="preserve"
             filename="../pango/fonts.c"
             line="581">Determines which fields in a font description have been set.</doc>
        <source-position filename="../pango/pango-font.h" line="293"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../pango/fonts.c"
               line="587">a bitmask with bits set corresponding to the
  fields in @desc that have been set.</doc>
          <type name="FontMask" c:type="PangoFontMask"/>
        </return-value>
        <parameters>
          <instance-parameter name="desc" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/fonts.c"
                 line="583">a #PangoFontDescription</doc>
            <type name="FontDescription" c:type="const PangoFontDescription*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_size" c:identifier="pango_font_description_get_size">
        <doc xml:space="preserve"
             filename="../pango/fonts.c"
             line="369">Gets the size field of a font description.
See pango_font_description_set_size().</doc>
        <source-position filename="../pango/pango-font.h" line="271"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../pango/fonts.c"
               line="376">the size field for the font description in points or device units.
  You must call pango_font_description_get_size_is_absolute()
  to find out which is the case. Returns 0 if the size field has not
  previously been set or it has been set to 0 explicitly.
  Use pango_font_description_get_set_fields() to
  find out if the field was explicitly set or not.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="desc" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/fonts.c"
                 line="371">a #PangoFontDescription</doc>
            <type name="FontDescription" c:type="const PangoFontDescription*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_size_is_absolute"
              c:identifier="pango_font_description_get_size_is_absolute"
              version="1.8">
        <doc xml:space="preserve"
             filename="../pango/fonts.c"
             line="416">Determines whether the size of the font is in points (not absolute) or device units (absolute).
See pango_font_description_set_size() and pango_font_description_set_absolute_size().</doc>
        <source-position filename="../pango/pango-font.h" line="276"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../pango/fonts.c"
               line="423">whether the size for the font description is in
  points or device units.  Use pango_font_description_get_set_fields() to
  find out if the size field of the font description was explicitly set or not.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="desc" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/fonts.c"
                 line="418">a #PangoFontDescription</doc>
            <type name="FontDescription" c:type="const PangoFontDescription*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_stretch"
              c:identifier="pango_font_description_get_stretch">
        <doc xml:space="preserve"
             filename="../pango/fonts.c"
             line="324">Gets the stretch field of a font description.
See pango_font_description_set_stretch().</doc>
        <source-position filename="../pango/pango-font.h" line="266"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../pango/fonts.c"
               line="331">the stretch field for the font description. Use
  pango_font_description_get_set_fields() to find out if
  the field was explicitly set or not.</doc>
          <type name="Stretch" c:type="PangoStretch"/>
        </return-value>
        <parameters>
          <instance-parameter name="desc" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/fonts.c"
                 line="326">a #PangoFontDescription.</doc>
            <type name="FontDescription" c:type="const PangoFontDescription*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_style" c:identifier="pango_font_description_get_style">
        <doc xml:space="preserve"
             filename="../pango/fonts.c"
             line="211">Gets the style field of a #PangoFontDescription. See
pango_font_description_set_style().</doc>
        <source-position filename="../pango/pango-font.h" line="251"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../pango/fonts.c"
               line="218">the style field for the font description.
  Use pango_font_description_get_set_fields() to find out if
  the field was explicitly set or not.</doc>
          <type name="Style" c:type="PangoStyle"/>
        </return-value>
        <parameters>
          <instance-parameter name="desc" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/fonts.c"
                 line="213">a #PangoFontDescription</doc>
            <type name="FontDescription" c:type="const PangoFontDescription*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_variant"
              c:identifier="pango_font_description_get_variant">
        <doc xml:space="preserve"
             filename="../pango/fonts.c"
             line="248">Gets the variant field of a #PangoFontDescription. See
pango_font_description_set_variant().</doc>
        <source-position filename="../pango/pango-font.h" line="256"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../pango/fonts.c"
               line="255">the variant field for the font description. Use
  pango_font_description_get_set_fields() to find out if
  the field was explicitly set or not.</doc>
          <type name="Variant" c:type="PangoVariant"/>
        </return-value>
        <parameters>
          <instance-parameter name="desc" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/fonts.c"
                 line="250">a #PangoFontDescription.</doc>
            <type name="FontDescription" c:type="const PangoFontDescription*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_variations"
              c:identifier="pango_font_description_get_variations"
              version="1.42">
        <doc xml:space="preserve"
             filename="../pango/fonts.c"
             line="559">Gets the variations field of a font description. See
pango_font_description_set_variations().</doc>
        <source-position filename="../pango/pango-font.h" line="290"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="../pango/fonts.c"
               line="566">the varitions field for the font
              description, or %NULL if not previously set.  This
              has the same life-time as the font description itself
              and should not be freed.</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="desc" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/fonts.c"
                 line="561">a #PangoFontDescription</doc>
            <type name="FontDescription" c:type="const PangoFontDescription*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_weight"
              c:identifier="pango_font_description_get_weight">
        <doc xml:space="preserve"
             filename="../pango/fonts.c"
             line="287">Gets the weight field of a font description. See
pango_font_description_set_weight().</doc>
        <source-position filename="../pango/pango-font.h" line="261"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../pango/fonts.c"
               line="294">the weight field for the font description. Use
  pango_font_description_get_set_fields() to find out if
  the field was explicitly set or not.</doc>
          <type name="Weight" c:type="PangoWeight"/>
        </return-value>
        <parameters>
          <instance-parameter name="desc" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/fonts.c"
                 line="289">a #PangoFontDescription</doc>
            <type name="FontDescription" c:type="const PangoFontDescription*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="hash" c:identifier="pango_font_description_hash">
        <doc xml:space="preserve"
             filename="../pango/fonts.c"
             line="901">Computes a hash of a #PangoFontDescription structure suitable
to be used, for example, as an argument to g_hash_table_new().
The hash value is independent of @desc-&gt;mask.</doc>
        <source-position filename="../pango/pango-font.h" line="229"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../pango/fonts.c"
               line="909">the hash value.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="desc" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/fonts.c"
                 line="903">a #PangoFontDescription</doc>
            <type name="FontDescription" c:type="const PangoFontDescription*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="merge" c:identifier="pango_font_description_merge">
        <doc xml:space="preserve"
             filename="../pango/fonts.c"
             line="622">Merges the fields that are set in @desc_to_merge into the fields in
@desc.  If @replace_existing is %FALSE, only fields in @desc that
are not already set are affected. If %TRUE, then fields that are
already set will be replaced as well.

If @desc_to_merge is %NULL, this function performs nothing.</doc>
        <source-position filename="../pango/pango-font.h" line="299"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="desc" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/fonts.c"
                 line="624">a #PangoFontDescription</doc>
            <type name="FontDescription" c:type="PangoFontDescription*"/>
          </instance-parameter>
          <parameter name="desc_to_merge"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../pango/fonts.c"
                 line="625">the #PangoFontDescription to merge from, or %NULL</doc>
            <type name="FontDescription" c:type="const PangoFontDescription*"/>
          </parameter>
          <parameter name="replace_existing" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/fonts.c"
                 line="626">if %TRUE, replace fields in @desc with the
  corresponding values from @desc_to_merge, even if they
  are already exist.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="merge_static"
              c:identifier="pango_font_description_merge_static">
        <doc xml:space="preserve"
             filename="../pango/fonts.c"
             line="668">Like pango_font_description_merge(), but only a shallow copy is made
of the family name and other allocated fields. @desc can only be
used until @desc_to_merge is modified or freed. This is meant
to be used when the merged font description is only needed temporarily.</doc>
        <source-position filename="../pango/pango-font.h" line="303"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="desc" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/fonts.c"
                 line="670">a #PangoFontDescription</doc>
            <type name="FontDescription" c:type="PangoFontDescription*"/>
          </instance-parameter>
          <parameter name="desc_to_merge" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/fonts.c"
                 line="671">the #PangoFontDescription to merge from</doc>
            <type name="FontDescription" c:type="const PangoFontDescription*"/>
          </parameter>
          <parameter name="replace_existing" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/fonts.c"
                 line="672">if %TRUE, replace fields in @desc with the
  corresponding values from @desc_to_merge, even if they
  are already exist.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_absolute_size"
              c:identifier="pango_font_description_set_absolute_size"
              version="1.8">
        <doc xml:space="preserve"
             filename="../pango/fonts.c"
             line="391">Sets the size field of a font description, in device units. This is mutually
exclusive with pango_font_description_set_size() which sets the font size
in points.</doc>
        <source-position filename="../pango/pango-font.h" line="273"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="desc" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/fonts.c"
                 line="393">a #PangoFontDescription</doc>
            <type name="FontDescription" c:type="PangoFontDescription*"/>
          </instance-parameter>
          <parameter name="size" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/fonts.c"
                 line="394">the new size, in Pango units. There are %PANGO_SCALE Pango units in one
  device unit. For an output backend where a device unit is a pixel, a @size
  value of 10 * PANGO_SCALE gives a 10 pixel font.</doc>
            <type name="gdouble" c:type="double"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_family"
              c:identifier="pango_font_description_set_family">
        <doc xml:space="preserve"
             filename="../pango/fonts.c"
             line="107">Sets the family name field of a font description. The family
name represents a family of related font styles, and will
resolve to a particular #PangoFontFamily. In some uses of
#PangoFontDescription, it is also possible to use a comma
separated list of family names for this field.</doc>
        <source-position filename="../pango/pango-font.h" line="240"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="desc" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/fonts.c"
                 line="109">a #PangoFontDescription.</doc>
            <type name="FontDescription" c:type="PangoFontDescription*"/>
          </instance-parameter>
          <parameter name="family" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/fonts.c"
                 line="110">a string representing the family name.</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_family_static"
              c:identifier="pango_font_description_set_family_static">
        <doc xml:space="preserve"
             filename="../pango/fonts.c"
             line="129">Like pango_font_description_set_family(), except that no
copy of @family is made. The caller must make sure that the
string passed in stays around until @desc has been freed
or the name is set again. This function can be used if
@family is a static string such as a C string literal, or
if @desc is only needed temporarily.</doc>
        <source-position filename="../pango/pango-font.h" line="243"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="desc" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/fonts.c"
                 line="131">a #PangoFontDescription</doc>
            <type name="FontDescription" c:type="PangoFontDescription*"/>
          </instance-parameter>
          <parameter name="family" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/fonts.c"
                 line="132">a string representing the family name.</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_gravity"
              c:identifier="pango_font_description_set_gravity"
              version="1.16">
        <doc xml:space="preserve"
             filename="../pango/fonts.c"
             line="437">Sets the gravity field of a font description. The gravity field
specifies how the glyphs should be rotated.  If @gravity is
%PANGO_GRAVITY_AUTO, this actually unsets the gravity mask on
the font description.

This function is seldom useful to the user.  Gravity should normally
be set on a #PangoContext.</doc>
        <source-position filename="../pango/pango-font.h" line="278"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="desc" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/fonts.c"
                 line="439">a #PangoFontDescription</doc>
            <type name="FontDescription" c:type="PangoFontDescription*"/>
          </instance-parameter>
          <parameter name="gravity" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/fonts.c"
                 line="440">the gravity for the font description.</doc>
            <type name="Gravity" c:type="PangoGravity"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_size" c:identifier="pango_font_description_set_size">
        <doc xml:space="preserve"
             filename="../pango/fonts.c"
             line="343">Sets the size field of a font description in fractional points. This is mutually
exclusive with pango_font_description_set_absolute_size().</doc>
        <source-position filename="../pango/pango-font.h" line="268"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="desc" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/fonts.c"
                 line="345">a #PangoFontDescription</doc>
            <type name="FontDescription" c:type="PangoFontDescription*"/>
          </instance-parameter>
          <parameter name="size" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/fonts.c"
                 line="346">the size of the font in points, scaled by PANGO_SCALE. (That is,
       a @size value of 10 * PANGO_SCALE is a 10 point font. The conversion
       factor between points and device units depends on system configuration
       and the output device. For screen display, a logical DPI of 96 is
       common, in which case a 10 point font corresponds to a 10 * (96 / 72) = 13.3
       pixel font. Use pango_font_description_set_absolute_size() if you need
       a particular size in device units.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_stretch"
              c:identifier="pango_font_description_set_stretch">
        <doc xml:space="preserve"
             filename="../pango/fonts.c"
             line="306">Sets the stretch field of a font description. The stretch field
specifies how narrow or wide the font should be.</doc>
        <source-position filename="../pango/pango-font.h" line="263"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="desc" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/fonts.c"
                 line="308">a #PangoFontDescription</doc>
            <type name="FontDescription" c:type="PangoFontDescription*"/>
          </instance-parameter>
          <parameter name="stretch" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/fonts.c"
                 line="309">the stretch for the font description</doc>
            <type name="Stretch" c:type="PangoStretch"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_style" c:identifier="pango_font_description_set_style">
        <doc xml:space="preserve"
             filename="../pango/fonts.c"
             line="187">Sets the style field of a #PangoFontDescription. The
#PangoStyle enumeration describes whether the font is slanted and
the manner in which it is slanted; it can be either
#PANGO_STYLE_NORMAL, #PANGO_STYLE_ITALIC, or #PANGO_STYLE_OBLIQUE.
Most fonts will either have a italic style or an oblique
style, but not both, and font matching in Pango will
match italic specifications with oblique fonts and vice-versa
if an exact match is not found.</doc>
        <source-position filename="../pango/pango-font.h" line="248"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="desc" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/fonts.c"
                 line="189">a #PangoFontDescription</doc>
            <type name="FontDescription" c:type="PangoFontDescription*"/>
          </instance-parameter>
          <parameter name="style" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/fonts.c"
                 line="190">the style for the font description</doc>
            <type name="Style" c:type="PangoStyle"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_variant"
              c:identifier="pango_font_description_set_variant">
        <doc xml:space="preserve"
             filename="../pango/fonts.c"
             line="230">Sets the variant field of a font description. The #PangoVariant
can either be %PANGO_VARIANT_NORMAL or %PANGO_VARIANT_SMALL_CAPS.</doc>
        <source-position filename="../pango/pango-font.h" line="253"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="desc" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/fonts.c"
                 line="232">a #PangoFontDescription</doc>
            <type name="FontDescription" c:type="PangoFontDescription*"/>
          </instance-parameter>
          <parameter name="variant" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/fonts.c"
                 line="233">the variant type for the font description.</doc>
            <type name="Variant" c:type="PangoVariant"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_variations"
              c:identifier="pango_font_description_set_variations"
              version="1.42">
        <doc xml:space="preserve"
             filename="../pango/fonts.c"
             line="529">Sets the variations field of a font description. OpenType
font variations allow to select a font instance by specifying
values for a number of axes, such as width or weight.

The format of the variations string is AXIS1=VALUE,AXIS2=VALUE...,
with each AXIS a 4 character tag that identifies a font axis,
and each VALUE a floating point number. Unknown axes are ignored,
and values are clamped to their allowed range.

Pango does not currently have a way to find supported axes of
a font. Both harfbuzz or freetype have API for this.</doc>
        <source-position filename="../pango/pango-font.h" line="287"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="desc" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/fonts.c"
                 line="531">a #PangoFontDescription.</doc>
            <type name="FontDescription" c:type="PangoFontDescription*"/>
          </instance-parameter>
          <parameter name="variations" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/fonts.c"
                 line="532">a string representing the variations</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_variations_static"
              c:identifier="pango_font_description_set_variations_static"
              version="1.42">
        <doc xml:space="preserve"
             filename="../pango/fonts.c"
             line="489">Like pango_font_description_set_variations(), except that no
copy of @variations is made. The caller must make sure that the
string passed in stays around until @desc has been freed
or the name is set again. This function can be used if
@variations is a static string such as a C string literal, or
if @desc is only needed temporarily.</doc>
        <source-position filename="../pango/pango-font.h" line="284"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="desc" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/fonts.c"
                 line="491">a #PangoFontDescription</doc>
            <type name="FontDescription" c:type="PangoFontDescription*"/>
          </instance-parameter>
          <parameter name="variations" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/fonts.c"
                 line="492">a string representing the variations</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_weight"
              c:identifier="pango_font_description_set_weight">
        <doc xml:space="preserve"
             filename="../pango/fonts.c"
             line="267">Sets the weight field of a font description. The weight field
specifies how bold or light the font should be. In addition
to the values of the #PangoWeight enumeration, other intermediate
numeric values are possible.</doc>
        <source-position filename="../pango/pango-font.h" line="258"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="desc" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/fonts.c"
                 line="269">a #PangoFontDescription</doc>
            <type name="FontDescription" c:type="PangoFontDescription*"/>
          </instance-parameter>
          <parameter name="weight" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/fonts.c"
                 line="270">the weight for the font description.</doc>
            <type name="Weight" c:type="PangoWeight"/>
          </parameter>
        </parameters>
      </method>
      <method name="to_filename"
              c:identifier="pango_font_description_to_filename">
        <doc xml:space="preserve"
             filename="../pango/fonts.c"
             line="1465">Creates a filename representation of a font description. The
filename is identical to the result from calling
pango_font_description_to_string(), but with underscores instead of
characters that are untypical in filenames, and in lower case only.</doc>
        <source-position filename="../pango/pango-font.h" line="317"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../pango/fonts.c"
               line="1474">a new string that must be freed with g_free().</doc>
          <type name="utf8" c:type="char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="desc" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/fonts.c"
                 line="1467">a #PangoFontDescription</doc>
            <type name="FontDescription" c:type="const PangoFontDescription*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="to_string" c:identifier="pango_font_description_to_string">
        <doc xml:space="preserve"
             filename="../pango/fonts.c"
             line="1383">Creates a string representation of a font description. See
pango_font_description_from_string() for a description of the
format of the string representation. The family list in the
string description will only have a terminating comma if the
last word of the list is a valid style option.</doc>
        <source-position filename="../pango/pango-font.h" line="315"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../pango/fonts.c"
               line="1393">a new string that must be freed with g_free().</doc>
          <type name="utf8" c:type="char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="desc" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/fonts.c"
                 line="1385">a #PangoFontDescription</doc>
            <type name="FontDescription" c:type="const PangoFontDescription*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="unset_fields"
              c:identifier="pango_font_description_unset_fields">
        <doc xml:space="preserve"
             filename="../pango/fonts.c"
             line="598">Unsets some of the fields in a #PangoFontDescription.  The unset
fields will get back to their default values.</doc>
        <source-position filename="../pango/pango-font.h" line="295"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="desc" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/fonts.c"
                 line="600">a #PangoFontDescription</doc>
            <type name="FontDescription" c:type="PangoFontDescription*"/>
          </instance-parameter>
          <parameter name="to_unset" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/fonts.c"
                 line="601">bitmask of fields in the @desc to unset.</doc>
            <type name="FontMask" c:type="PangoFontMask"/>
          </parameter>
        </parameters>
      </method>
      <function name="from_string"
                c:identifier="pango_font_description_from_string">
        <doc xml:space="preserve"
             filename="../pango/fonts.c"
             line="1215">Creates a new font description from a string representation in the
form

"\[FAMILY-LIST] \[STYLE-OPTIONS] \[SIZE] \[VARIATIONS]",

where FAMILY-LIST is a comma-separated list of families optionally
terminated by a comma, STYLE_OPTIONS is a whitespace-separated list
of words where each word describes one of style, variant, weight,
stretch, or gravity, and SIZE is a decimal number (size in points)
or optionally followed by the unit modifier "px" for absolute size.
VARIATIONS is a comma-separated list of font variation
specifications of the form "\@axis=value" (the = sign is optional).

The following words are understood as styles:
"Normal", "Roman", "Oblique", "Italic".

The following words are understood as variants:
"Small-Caps".

The following words are understood as weights:
"Thin", "Ultra-Light", "Extra-Light", "Light", "Semi-Light",
"Demi-Light", "Book", "Regular", "Medium", "Semi-Bold", "Demi-Bold",
"Bold", "Ultra-Bold", "Extra-Bold", "Heavy", "Black", "Ultra-Black",
"Extra-Black".

The following words are understood as stretch values:
"Ultra-Condensed", "Extra-Condensed", "Condensed", "Semi-Condensed",
"Semi-Expanded", "Expanded", "Extra-Expanded", "Ultra-Expanded".

The following words are understood as gravity values:
"Not-Rotated", "South", "Upside-Down", "North", "Rotated-Left",
"East", "Rotated-Right", "West".

Any one of the options may be absent. If FAMILY-LIST is absent, then
the family_name field of the resulting font description will be
initialized to %NULL. If STYLE-OPTIONS is missing, then all style
options will be set to the default values. If SIZE is missing, the
size in the resulting font description will be set to 0.

A typical example:

"Cantarell Italic Light 15 \@wght=200"</doc>
        <source-position filename="../pango/pango-font.h" line="313"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../pango/fonts.c"
               line="1262">a new #PangoFontDescription.</doc>
          <type name="FontDescription" c:type="PangoFontDescription*"/>
        </return-value>
        <parameters>
          <parameter name="str" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/fonts.c"
                 line="1217">string representation of a font description.</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </function>
    </record>
    <class name="FontFace"
           c:symbol-prefix="font_face"
           c:type="PangoFontFace"
           parent="GObject.Object"
           abstract="1"
           glib:type-name="PangoFontFace"
           glib:get-type="pango_font_face_get_type"
           glib:type-struct="FontFaceClass">
      <doc xml:space="preserve"
           filename="../pango/pango-font.h"
           line="494">The #PangoFontFace structure is used to represent a group of fonts with
the same family, slant, weight, width, but varying sizes.</doc>
      <source-position filename="../pango/pango-font.h" line="524"/>
      <virtual-method name="describe" invoker="describe">
        <doc xml:space="preserve"
             filename="../pango/fonts.c"
             line="2412">Returns the family, style, variant, weight and stretch of
a #PangoFontFace. The size field of the resulting font description
will be unset.</doc>
        <source-position filename="../pango/pango-font.h" line="512"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../pango/fonts.c"
               line="2420">a newly-created #PangoFontDescription structure
 holding the description of the face. Use pango_font_description_free()
 to free the result.</doc>
          <type name="FontDescription" c:type="PangoFontDescription*"/>
        </return-value>
        <parameters>
          <instance-parameter name="face" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/fonts.c"
                 line="2414">a #PangoFontFace</doc>
            <type name="FontFace" c:type="PangoFontFace*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_face_name" invoker="get_face_name">
        <doc xml:space="preserve"
             filename="../pango/fonts.c"
             line="2455">Gets a name representing the style of this face among the
different faces in the #PangoFontFamily for the face. This
name is unique among all faces in the family and is suitable
for displaying to users.</doc>
        <source-position filename="../pango/pango-font.h" line="511"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../pango/fonts.c"
               line="2464">the face name for the face. This string is
  owned by the face object and must not be modified or freed.</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="face" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/fonts.c"
                 line="2457">a #PangoFontFace.</doc>
            <type name="FontFace" c:type="PangoFontFace*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_family" invoker="get_family" version="1.46">
        <doc xml:space="preserve"
             filename="../pango/fonts.c"
             line="2511">Gets the #PangoFontFamily that @face
belongs to.</doc>
        <source-position filename="../pango/pango-font.h" line="517"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../pango/fonts.c"
               line="2518">the #PangoFontFamily</doc>
          <type name="FontFamily" c:type="PangoFontFamily*"/>
        </return-value>
        <parameters>
          <instance-parameter name="face" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/fonts.c"
                 line="2513">a #PangoFontFace</doc>
            <type name="FontFace" c:type="PangoFontFace*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="is_synthesized"
                      invoker="is_synthesized"
                      version="1.18">
        <doc xml:space="preserve"
             filename="../pango/fonts.c"
             line="2432">Returns whether a #PangoFontFace is synthesized by the underlying
font rendering engine from another face, perhaps by shearing, emboldening,
or lightening it.</doc>
        <source-position filename="../pango/pango-font.h" line="516"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../pango/fonts.c"
               line="2440">whether @face is synthesized.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="face" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/fonts.c"
                 line="2434">a #PangoFontFace</doc>
            <type name="FontFace" c:type="PangoFontFace*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="list_sizes" invoker="list_sizes" version="1.4">
        <doc xml:space="preserve"
             filename="../pango/fonts.c"
             line="2475">List the available sizes for a font. This is only applicable to bitmap
fonts. For scalable fonts, stores %NULL at the location pointed to by
@sizes and 0 at the location pointed to by @n_sizes. The sizes returned
are in Pango units and are sorted in ascending order.</doc>
        <source-position filename="../pango/pango-font.h" line="513"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="face" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/fonts.c"
                 line="2477">a #PangoFontFace.</doc>
            <type name="FontFace" c:type="PangoFontFace*"/>
          </instance-parameter>
          <parameter name="sizes"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     nullable="1"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../pango/fonts.c"
                 line="2478">
        location to store a pointer to an array of int. This array
        should be freed with g_free().</doc>
            <array length="1" zero-terminated="0" c:type="int**">
              <type name="gint" c:type="int*"/>
            </array>
          </parameter>
          <parameter name="n_sizes"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="../pango/fonts.c"
                 line="2481">location to store the number of elements in @sizes</doc>
            <type name="gint" c:type="int*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="describe" c:identifier="pango_font_face_describe">
        <doc xml:space="preserve"
             filename="../pango/fonts.c"
             line="2412">Returns the family, style, variant, weight and stretch of
a #PangoFontFace. The size field of the resulting font description
will be unset.</doc>
        <source-position filename="../pango/pango-font.h" line="532"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../pango/fonts.c"
               line="2420">a newly-created #PangoFontDescription structure
 holding the description of the face. Use pango_font_description_free()
 to free the result.</doc>
          <type name="FontDescription" c:type="PangoFontDescription*"/>
        </return-value>
        <parameters>
          <instance-parameter name="face" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/fonts.c"
                 line="2414">a #PangoFontFace</doc>
            <type name="FontFace" c:type="PangoFontFace*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_face_name"
              c:identifier="pango_font_face_get_face_name">
        <doc xml:space="preserve"
             filename="../pango/fonts.c"
             line="2455">Gets a name representing the style of this face among the
different faces in the #PangoFontFamily for the face. This
name is unique among all faces in the family and is suitable
for displaying to users.</doc>
        <source-position filename="../pango/pango-font.h" line="534"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../pango/fonts.c"
               line="2464">the face name for the face. This string is
  owned by the face object and must not be modified or freed.</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="face" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/fonts.c"
                 line="2457">a #PangoFontFace.</doc>
            <type name="FontFace" c:type="PangoFontFace*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_family"
              c:identifier="pango_font_face_get_family"
              version="1.46">
        <doc xml:space="preserve"
             filename="../pango/fonts.c"
             line="2511">Gets the #PangoFontFamily that @face
belongs to.</doc>
        <source-position filename="../pango/pango-font.h" line="543"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../pango/fonts.c"
               line="2518">the #PangoFontFamily</doc>
          <type name="FontFamily" c:type="PangoFontFamily*"/>
        </return-value>
        <parameters>
          <instance-parameter name="face" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/fonts.c"
                 line="2513">a #PangoFontFace</doc>
            <type name="FontFace" c:type="PangoFontFace*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="is_synthesized"
              c:identifier="pango_font_face_is_synthesized"
              version="1.18">
        <doc xml:space="preserve"
             filename="../pango/fonts.c"
             line="2432">Returns whether a #PangoFontFace is synthesized by the underlying
font rendering engine from another face, perhaps by shearing, emboldening,
or lightening it.</doc>
        <source-position filename="../pango/pango-font.h" line="540"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../pango/fonts.c"
               line="2440">whether @face is synthesized.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="face" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/fonts.c"
                 line="2434">a #PangoFontFace</doc>
            <type name="FontFace" c:type="PangoFontFace*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="list_sizes"
              c:identifier="pango_font_face_list_sizes"
              version="1.4">
        <doc xml:space="preserve"
             filename="../pango/fonts.c"
             line="2475">List the available sizes for a font. This is only applicable to bitmap
fonts. For scalable fonts, stores %NULL at the location pointed to by
@sizes and 0 at the location pointed to by @n_sizes. The sizes returned
are in Pango units and are sorted in ascending order.</doc>
        <source-position filename="../pango/pango-font.h" line="536"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="face" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/fonts.c"
                 line="2477">a #PangoFontFace.</doc>
            <type name="FontFace" c:type="PangoFontFace*"/>
          </instance-parameter>
          <parameter name="sizes"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     nullable="1"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../pango/fonts.c"
                 line="2478">
        location to store a pointer to an array of int. This array
        should be freed with g_free().</doc>
            <array length="1" zero-terminated="0" c:type="int**">
              <type name="gint" c:type="int*"/>
            </array>
          </parameter>
          <parameter name="n_sizes"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="../pango/fonts.c"
                 line="2481">location to store the number of elements in @sizes</doc>
            <type name="gint" c:type="int*"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent_instance">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
    </class>
    <record name="FontFaceClass"
            c:type="PangoFontFaceClass"
            glib:is-gtype-struct-for="FontFace">
      <source-position filename="../pango/pango-font.h" line="524"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="get_face_name">
        <callback name="get_face_name">
          <source-position filename="../pango/pango-font.h" line="511"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/fonts.c"
                 line="2464">the face name for the face. This string is
  owned by the face object and must not be modified or freed.</doc>
            <type name="utf8" c:type="const char*"/>
          </return-value>
          <parameters>
            <parameter name="face" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="../pango/fonts.c"
                   line="2457">a #PangoFontFace.</doc>
              <type name="FontFace" c:type="PangoFontFace*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="describe">
        <callback name="describe">
          <source-position filename="../pango/pango-font.h" line="512"/>
          <return-value transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="../pango/fonts.c"
                 line="2420">a newly-created #PangoFontDescription structure
 holding the description of the face. Use pango_font_description_free()
 to free the result.</doc>
            <type name="FontDescription" c:type="PangoFontDescription*"/>
          </return-value>
          <parameters>
            <parameter name="face" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="../pango/fonts.c"
                   line="2414">a #PangoFontFace</doc>
              <type name="FontFace" c:type="PangoFontFace*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="list_sizes">
        <callback name="list_sizes">
          <source-position filename="../pango/pango-font.h" line="513"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="face" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="../pango/fonts.c"
                   line="2477">a #PangoFontFace.</doc>
              <type name="FontFace" c:type="PangoFontFace*"/>
            </parameter>
            <parameter name="sizes"
                       direction="out"
                       caller-allocates="0"
                       transfer-ownership="full"
                       nullable="1"
                       optional="1"
                       allow-none="1">
              <doc xml:space="preserve"
                   filename="../pango/fonts.c"
                   line="2478">
        location to store a pointer to an array of int. This array
        should be freed with g_free().</doc>
              <array length="2" zero-terminated="0" c:type="int**">
                <type name="gint" c:type="int*"/>
              </array>
            </parameter>
            <parameter name="n_sizes"
                       direction="out"
                       caller-allocates="0"
                       transfer-ownership="full">
              <doc xml:space="preserve"
                   filename="../pango/fonts.c"
                   line="2481">location to store the number of elements in @sizes</doc>
              <type name="gint" c:type="int*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="is_synthesized">
        <callback name="is_synthesized">
          <source-position filename="../pango/pango-font.h" line="516"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/fonts.c"
                 line="2440">whether @face is synthesized.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="face" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="../pango/fonts.c"
                   line="2434">a #PangoFontFace</doc>
              <type name="FontFace" c:type="PangoFontFace*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_family">
        <callback name="get_family">
          <source-position filename="../pango/pango-font.h" line="517"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/fonts.c"
                 line="2518">the #PangoFontFamily</doc>
            <type name="FontFamily" c:type="PangoFontFamily*"/>
          </return-value>
          <parameters>
            <parameter name="face" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="../pango/fonts.c"
                   line="2513">a #PangoFontFace</doc>
              <type name="FontFace" c:type="PangoFontFace*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="_pango_reserved3" introspectable="0">
        <callback name="_pango_reserved3">
          <source-position filename="../pango/pango-font.h" line="522"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_pango_reserved4" introspectable="0">
        <callback name="_pango_reserved4">
          <source-position filename="../pango/pango-font.h" line="523"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <class name="FontFamily"
           c:symbol-prefix="font_family"
           c:type="PangoFontFamily"
           parent="GObject.Object"
           abstract="1"
           glib:type-name="PangoFontFamily"
           glib:get-type="pango_font_family_get_type"
           glib:type-struct="FontFamilyClass">
      <doc xml:space="preserve"
           filename="../pango/pango-font.h"
           line="406">The #PangoFontFamily structure is used to represent a family of related
font faces. The faces in a family share a common design, but differ in
slant, weight, width and other aspects.</doc>
      <source-position filename="../pango/pango-font.h" line="439"/>
      <virtual-method name="get_face" invoker="get_face" version="1.46">
        <doc xml:space="preserve"
             filename="../pango/fonts.c"
             line="2319">Gets the #PangoFontFace of @family with the given name.</doc>
        <source-position filename="../pango/pango-font.h" line="431"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="../pango/fonts.c"
               line="2328">the #PangoFontFace,
    or %NULL if no face with the given name exists.</doc>
          <type name="FontFace" c:type="PangoFontFace*"/>
        </return-value>
        <parameters>
          <instance-parameter name="family" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/fonts.c"
                 line="2321">a #PangoFontFamily</doc>
            <type name="FontFamily" c:type="PangoFontFamily*"/>
          </instance-parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../pango/fonts.c"
                 line="2322">the name of a face. If the name is %NULL,
    the family's default face (fontconfig calls it "Regular")
    will be returned.</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_name" invoker="get_name">
        <doc xml:space="preserve"
             filename="../pango/fonts.c"
             line="2244">Gets the name of the family. The name is unique among all
fonts for the font backend and can be used in a #PangoFontDescription
to specify that a face from this family is desired.</doc>
        <source-position filename="../pango/pango-font.h" line="427"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../pango/fonts.c"
               line="2252">the name of the family. This string is owned
  by the family object and must not be modified or freed.</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="family" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/fonts.c"
                 line="2246">a #PangoFontFamily</doc>
            <type name="FontFamily" c:type="PangoFontFamily*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="is_monospace" invoker="is_monospace" version="1.4">
        <doc xml:space="preserve"
             filename="../pango/fonts.c"
             line="2342">A monospace font is a font designed for text display where the the
characters form a regular grid. For Western languages this would
mean that the advance width of all characters are the same, but
this categorization also includes Asian fonts which include
double-width characters: characters that occupy two grid cells.
g_unichar_iswide() returns a result that indicates whether a
character is typically double-width in a monospace font.

The best way to find out the grid-cell size is to call
pango_font_metrics_get_approximate_digit_width(), since the results
of pango_font_metrics_get_approximate_char_width() may be affected
by double-width characters.</doc>
        <source-position filename="../pango/pango-font.h" line="428"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../pango/fonts.c"
               line="2359">%TRUE if the family is monospace.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="family" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/fonts.c"
                 line="2344">a #PangoFontFamily</doc>
            <type name="FontFamily" c:type="PangoFontFamily*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="is_variable" invoker="is_variable" version="1.44">
        <doc xml:space="preserve"
             filename="../pango/fonts.c"
             line="2374">A variable font is a font which has axes that can be modified to
produce different faces.</doc>
        <source-position filename="../pango/pango-font.h" line="429"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../pango/fonts.c"
               line="2381">%TRUE if the family is variable</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="family" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/fonts.c"
                 line="2376">a #PangoFontFamily</doc>
            <type name="FontFamily" c:type="PangoFontFamily*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="list_faces" invoker="list_faces">
        <doc xml:space="preserve"
             filename="../pango/fonts.c"
             line="2263">Lists the different font faces that make up @family. The faces
in a family share a common design, but differ in slant, weight,
width and other aspects.</doc>
        <source-position filename="../pango/pango-font.h" line="424"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="family" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/fonts.c"
                 line="2265">a #PangoFontFamily</doc>
            <type name="FontFamily" c:type="PangoFontFamily*"/>
          </instance-parameter>
          <parameter name="faces"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="container"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../pango/fonts.c"
                 line="2266">
  location to store an array of pointers to #PangoFontFace objects,
  or %NULL. This array should be freed with g_free() when it is no
  longer needed.</doc>
            <array length="1" zero-terminated="0" c:type="PangoFontFace***">
              <type name="FontFace" c:type="PangoFontFace**"/>
            </array>
          </parameter>
          <parameter name="n_faces"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="../pango/fonts.c"
                 line="2270">location to store number of elements in @faces.</doc>
            <type name="gint" c:type="int*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="get_face"
              c:identifier="pango_font_family_get_face"
              version="1.46">
        <doc xml:space="preserve"
             filename="../pango/fonts.c"
             line="2319">Gets the #PangoFontFace of @family with the given name.</doc>
        <source-position filename="../pango/pango-font.h" line="458"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="../pango/fonts.c"
               line="2328">the #PangoFontFace,
    or %NULL if no face with the given name exists.</doc>
          <type name="FontFace" c:type="PangoFontFace*"/>
        </return-value>
        <parameters>
          <instance-parameter name="family" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/fonts.c"
                 line="2321">a #PangoFontFamily</doc>
            <type name="FontFamily" c:type="PangoFontFamily*"/>
          </instance-parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../pango/fonts.c"
                 line="2322">the name of a face. If the name is %NULL,
    the family's default face (fontconfig calls it "Regular")
    will be returned.</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_name" c:identifier="pango_font_family_get_name">
        <doc xml:space="preserve"
             filename="../pango/fonts.c"
             line="2244">Gets the name of the family. The name is unique among all
fonts for the font backend and can be used in a #PangoFontDescription
to specify that a face from this family is desired.</doc>
        <source-position filename="../pango/pango-font.h" line="451"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../pango/fonts.c"
               line="2252">the name of the family. This string is owned
  by the family object and must not be modified or freed.</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="family" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/fonts.c"
                 line="2246">a #PangoFontFamily</doc>
            <type name="FontFamily" c:type="PangoFontFamily*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="is_monospace"
              c:identifier="pango_font_family_is_monospace"
              version="1.4">
        <doc xml:space="preserve"
             filename="../pango/fonts.c"
             line="2342">A monospace font is a font designed for text display where the the
characters form a regular grid. For Western languages this would
mean that the advance width of all characters are the same, but
this categorization also includes Asian fonts which include
double-width characters: characters that occupy two grid cells.
g_unichar_iswide() returns a result that indicates whether a
character is typically double-width in a monospace font.

The best way to find out the grid-cell size is to call
pango_font_metrics_get_approximate_digit_width(), since the results
of pango_font_metrics_get_approximate_char_width() may be affected
by double-width characters.</doc>
        <source-position filename="../pango/pango-font.h" line="453"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../pango/fonts.c"
               line="2359">%TRUE if the family is monospace.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="family" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/fonts.c"
                 line="2344">a #PangoFontFamily</doc>
            <type name="FontFamily" c:type="PangoFontFamily*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="is_variable"
              c:identifier="pango_font_family_is_variable"
              version="1.44">
        <doc xml:space="preserve"
             filename="../pango/fonts.c"
             line="2374">A variable font is a font which has axes that can be modified to
produce different faces.</doc>
        <source-position filename="../pango/pango-font.h" line="455"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../pango/fonts.c"
               line="2381">%TRUE if the family is variable</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="family" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/fonts.c"
                 line="2376">a #PangoFontFamily</doc>
            <type name="FontFamily" c:type="PangoFontFamily*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="list_faces" c:identifier="pango_font_family_list_faces">
        <doc xml:space="preserve"
             filename="../pango/fonts.c"
             line="2263">Lists the different font faces that make up @family. The faces
in a family share a common design, but differ in slant, weight,
width and other aspects.</doc>
        <source-position filename="../pango/pango-font.h" line="447"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="family" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/fonts.c"
                 line="2265">a #PangoFontFamily</doc>
            <type name="FontFamily" c:type="PangoFontFamily*"/>
          </instance-parameter>
          <parameter name="faces"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="container"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../pango/fonts.c"
                 line="2266">
  location to store an array of pointers to #PangoFontFace objects,
  or %NULL. This array should be freed with g_free() when it is no
  longer needed.</doc>
            <array length="1" zero-terminated="0" c:type="PangoFontFace***">
              <type name="FontFace" c:type="PangoFontFace**"/>
            </array>
          </parameter>
          <parameter name="n_faces"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="../pango/fonts.c"
                 line="2270">location to store number of elements in @faces.</doc>
            <type name="gint" c:type="int*"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent_instance">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
    </class>
    <record name="FontFamilyClass"
            c:type="PangoFontFamilyClass"
            glib:is-gtype-struct-for="FontFamily">
      <source-position filename="../pango/pango-font.h" line="439"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="list_faces">
        <callback name="list_faces">
          <source-position filename="../pango/pango-font.h" line="424"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="family" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="../pango/fonts.c"
                   line="2265">a #PangoFontFamily</doc>
              <type name="FontFamily" c:type="PangoFontFamily*"/>
            </parameter>
            <parameter name="faces"
                       direction="out"
                       caller-allocates="0"
                       transfer-ownership="container"
                       optional="1"
                       allow-none="1">
              <doc xml:space="preserve"
                   filename="../pango/fonts.c"
                   line="2266">
  location to store an array of pointers to #PangoFontFace objects,
  or %NULL. This array should be freed with g_free() when it is no
  longer needed.</doc>
              <array length="2" zero-terminated="0" c:type="PangoFontFace***">
                <type name="FontFace" c:type="PangoFontFace**"/>
              </array>
            </parameter>
            <parameter name="n_faces"
                       direction="out"
                       caller-allocates="0"
                       transfer-ownership="full">
              <doc xml:space="preserve"
                   filename="../pango/fonts.c"
                   line="2270">location to store number of elements in @faces.</doc>
              <type name="gint" c:type="int*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_name">
        <callback name="get_name">
          <source-position filename="../pango/pango-font.h" line="427"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/fonts.c"
                 line="2252">the name of the family. This string is owned
  by the family object and must not be modified or freed.</doc>
            <type name="utf8" c:type="const char*"/>
          </return-value>
          <parameters>
            <parameter name="family" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="../pango/fonts.c"
                   line="2246">a #PangoFontFamily</doc>
              <type name="FontFamily" c:type="PangoFontFamily*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="is_monospace">
        <callback name="is_monospace">
          <source-position filename="../pango/pango-font.h" line="428"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/fonts.c"
                 line="2359">%TRUE if the family is monospace.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="family" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="../pango/fonts.c"
                   line="2344">a #PangoFontFamily</doc>
              <type name="FontFamily" c:type="PangoFontFamily*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="is_variable">
        <callback name="is_variable">
          <source-position filename="../pango/pango-font.h" line="429"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/fonts.c"
                 line="2381">%TRUE if the family is variable</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="family" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="../pango/fonts.c"
                   line="2376">a #PangoFontFamily</doc>
              <type name="FontFamily" c:type="PangoFontFamily*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_face">
        <callback name="get_face">
          <source-position filename="../pango/pango-font.h" line="431"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="../pango/fonts.c"
                 line="2328">the #PangoFontFace,
    or %NULL if no face with the given name exists.</doc>
            <type name="FontFace" c:type="PangoFontFace*"/>
          </return-value>
          <parameters>
            <parameter name="family" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="../pango/fonts.c"
                   line="2321">a #PangoFontFamily</doc>
              <type name="FontFamily" c:type="PangoFontFamily*"/>
            </parameter>
            <parameter name="name"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <doc xml:space="preserve"
                   filename="../pango/fonts.c"
                   line="2322">the name of a face. If the name is %NULL,
    the family's default face (fontconfig calls it "Regular")
    will be returned.</doc>
              <type name="utf8" c:type="const char*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="_pango_reserved2" introspectable="0">
        <callback name="_pango_reserved2">
          <source-position filename="../pango/pango-font.h" line="438"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <class name="FontMap"
           c:symbol-prefix="font_map"
           c:type="PangoFontMap"
           parent="GObject.Object"
           abstract="1"
           glib:type-name="PangoFontMap"
           glib:get-type="pango_font_map_get_type"
           glib:type-struct="FontMapClass">
      <doc xml:space="preserve"
           filename="../pango/pango-fontmap.h"
           line="57">The #PangoFontMap represents the set of fonts available for a
particular rendering system. This is a virtual object with
implementations being specific to particular rendering systems.  To
create an implementation of a #PangoFontMap, the rendering-system
specific code should allocate a larger structure that contains a nested
#PangoFontMap, fill in the &lt;structfield&gt;klass&lt;/structfield&gt; member of the nested #PangoFontMap with a
pointer to a appropriate #PangoFontMapClass, then call
pango_font_map_init() on the structure.

The #PangoFontMap structure contains one member which the implementation
fills in.</doc>
      <source-position filename="../pango/pango-fontmap.h" line="122"/>
      <virtual-method name="changed" invoker="changed" version="1.34">
        <doc xml:space="preserve"
             filename="../pango/pango-fontmap.c"
             line="354">Forces a change in the context, which will cause any #PangoContext
using this fontmap to change.

This function is only useful when implementing a new backend
for Pango, something applications won't do. Backends should
call this function if they have attached extra data to the context
and such data is changed.</doc>
        <source-position filename="../pango/pango-fontmap.h" line="115"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="fontmap" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-fontmap.c"
                 line="356">a #PangoFontMap</doc>
            <type name="FontMap" c:type="PangoFontMap*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_face" introspectable="0">
        <source-position filename="../pango/pango-fontmap.h" line="120"/>
        <return-value>
          <type name="FontFace" c:type="PangoFontFace*"/>
        </return-value>
        <parameters>
          <instance-parameter name="fontmap" transfer-ownership="none">
            <type name="FontMap" c:type="PangoFontMap*"/>
          </instance-parameter>
          <parameter name="font" transfer-ownership="none">
            <type name="Font" c:type="PangoFont*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_family" invoker="get_family" version="1.46">
        <doc xml:space="preserve"
             filename="../pango/pango-fontmap.c"
             line="404">Gets a font family by name.</doc>
        <source-position filename="../pango/pango-fontmap.h" line="117"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../pango/pango-fontmap.c"
               line="411">the #PangoFontFamily</doc>
          <type name="FontFamily" c:type="PangoFontFamily*"/>
        </return-value>
        <parameters>
          <instance-parameter name="fontmap" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-fontmap.c"
                 line="406">a #PangoFontMap</doc>
            <type name="FontMap" c:type="PangoFontMap*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-fontmap.c"
                 line="407">a family name</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_serial" invoker="get_serial" version="1.32.4">
        <doc xml:space="preserve"
             filename="../pango/pango-fontmap.c"
             line="311">Returns the current serial number of @fontmap.  The serial number is
initialized to an small number larger than zero when a new fontmap
is created and is increased whenever the fontmap is changed. It may
wrap, but will never have the value 0. Since it can wrap, never compare
it with "less than", always use "not equals".

The fontmap can only be changed using backend-specific API, like changing
fontmap resolution.

This can be used to automatically detect changes to a #PangoFontMap, like
in #PangoContext.</doc>
        <source-position filename="../pango/pango-fontmap.h" line="114"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../pango/pango-fontmap.c"
               line="327">The current serial number of @fontmap.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="fontmap" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-fontmap.c"
                 line="313">a #PangoFontMap</doc>
            <type name="FontMap" c:type="PangoFontMap*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="list_families" invoker="list_families">
        <doc xml:space="preserve"
             filename="../pango/pango-fontmap.c"
             line="117">List all families for a fontmap.</doc>
        <source-position filename="../pango/pango-fontmap.h" line="104"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="fontmap" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-fontmap.c"
                 line="119">a #PangoFontMap</doc>
            <type name="FontMap" c:type="PangoFontMap*"/>
          </instance-parameter>
          <parameter name="families"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="container">
            <doc xml:space="preserve"
                 filename="../pango/pango-fontmap.c"
                 line="120">location to store a pointer to an array of #PangoFontFamily *.
           This array should be freed with g_free().</doc>
            <array length="1" zero-terminated="0" c:type="PangoFontFamily***">
              <type name="FontFamily" c:type="PangoFontFamily**"/>
            </array>
          </parameter>
          <parameter name="n_families"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="../pango/pango-fontmap.c"
                 line="122">location to store the number of elements in @families</doc>
            <type name="gint" c:type="int*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="load_font" invoker="load_font">
        <doc xml:space="preserve"
             filename="../pango/pango-fontmap.c"
             line="96">Load the font in the fontmap that is the closest match for @desc.</doc>
        <source-position filename="../pango/pango-fontmap.h" line="101"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="../pango/pango-fontmap.c"
               line="104">the newly allocated #PangoFont
         loaded, or %NULL if no font matched.</doc>
          <type name="Font" c:type="PangoFont*"/>
        </return-value>
        <parameters>
          <instance-parameter name="fontmap" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-fontmap.c"
                 line="98">a #PangoFontMap</doc>
            <type name="FontMap" c:type="PangoFontMap*"/>
          </instance-parameter>
          <parameter name="context" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-fontmap.c"
                 line="99">the #PangoContext the font will be used with</doc>
            <type name="Context" c:type="PangoContext*"/>
          </parameter>
          <parameter name="desc" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-fontmap.c"
                 line="100">a #PangoFontDescription describing the font to load</doc>
            <type name="FontDescription" c:type="const PangoFontDescription*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="load_fontset" invoker="load_fontset">
        <doc xml:space="preserve"
             filename="../pango/pango-fontmap.c"
             line="140">Load a set of fonts in the fontmap that can be used to render
a font matching @desc.</doc>
        <source-position filename="../pango/pango-fontmap.h" line="107"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="../pango/pango-fontmap.c"
               line="150">the newly allocated
         #PangoFontset loaded, or %NULL if no font matched.</doc>
          <type name="Fontset" c:type="PangoFontset*"/>
        </return-value>
        <parameters>
          <instance-parameter name="fontmap" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-fontmap.c"
                 line="142">a #PangoFontMap</doc>
            <type name="FontMap" c:type="PangoFontMap*"/>
          </instance-parameter>
          <parameter name="context" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-fontmap.c"
                 line="143">the #PangoContext the font will be used with</doc>
            <type name="Context" c:type="PangoContext*"/>
          </parameter>
          <parameter name="desc" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-fontmap.c"
                 line="144">a #PangoFontDescription describing the font to load</doc>
            <type name="FontDescription" c:type="const PangoFontDescription*"/>
          </parameter>
          <parameter name="language" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-fontmap.c"
                 line="145">a #PangoLanguage the fonts will be used for</doc>
            <type name="Language" c:type="PangoLanguage*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="changed"
              c:identifier="pango_font_map_changed"
              version="1.34">
        <doc xml:space="preserve"
             filename="../pango/pango-fontmap.c"
             line="354">Forces a change in the context, which will cause any #PangoContext
using this fontmap to change.

This function is only useful when implementing a new backend
for Pango, something applications won't do. Backends should
call this function if they have attached extra data to the context
and such data is changed.</doc>
        <source-position filename="../pango/pango-fontmap.h" line="144"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="fontmap" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-fontmap.c"
                 line="356">a #PangoFontMap</doc>
            <type name="FontMap" c:type="PangoFontMap*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="create_context"
              c:identifier="pango_font_map_create_context"
              version="1.22">
        <doc xml:space="preserve"
             filename="../pango/pango-fontmap.c"
             line="65">Creates a #PangoContext connected to @fontmap.  This is equivalent
to pango_context_new() followed by pango_context_set_font_map().

If you are using Pango as part of a higher-level system,
that system may have it's own way of create a #PangoContext.
For instance, the GTK+ toolkit has, among others,
gdk_pango_context_get_for_screen(), and
gtk_widget_get_pango_context().  Use those instead.</doc>
        <source-position filename="../pango/pango-fontmap.h" line="127"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../pango/pango-fontmap.c"
               line="78">the newly allocated #PangoContext,
              which should be freed with g_object_unref().</doc>
          <type name="Context" c:type="PangoContext*"/>
        </return-value>
        <parameters>
          <instance-parameter name="fontmap" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-fontmap.c"
                 line="67">a #PangoFontMap</doc>
            <type name="FontMap" c:type="PangoFontMap*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_family"
              c:identifier="pango_font_map_get_family"
              version="1.46">
        <doc xml:space="preserve"
             filename="../pango/pango-fontmap.c"
             line="404">Gets a font family by name.</doc>
        <source-position filename="../pango/pango-fontmap.h" line="147"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../pango/pango-fontmap.c"
               line="411">the #PangoFontFamily</doc>
          <type name="FontFamily" c:type="PangoFontFamily*"/>
        </return-value>
        <parameters>
          <instance-parameter name="fontmap" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-fontmap.c"
                 line="406">a #PangoFontMap</doc>
            <type name="FontMap" c:type="PangoFontMap*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-fontmap.c"
                 line="407">a family name</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_serial"
              c:identifier="pango_font_map_get_serial"
              version="1.32.4">
        <doc xml:space="preserve"
             filename="../pango/pango-fontmap.c"
             line="311">Returns the current serial number of @fontmap.  The serial number is
initialized to an small number larger than zero when a new fontmap
is created and is increased whenever the fontmap is changed. It may
wrap, but will never have the value 0. Since it can wrap, never compare
it with "less than", always use "not equals".

The fontmap can only be changed using backend-specific API, like changing
fontmap resolution.

This can be used to automatically detect changes to a #PangoFontMap, like
in #PangoContext.</doc>
        <source-position filename="../pango/pango-fontmap.h" line="142"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../pango/pango-fontmap.c"
               line="327">The current serial number of @fontmap.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="fontmap" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-fontmap.c"
                 line="313">a #PangoFontMap</doc>
            <type name="FontMap" c:type="PangoFontMap*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="list_families" c:identifier="pango_font_map_list_families">
        <doc xml:space="preserve"
             filename="../pango/pango-fontmap.c"
             line="117">List all families for a fontmap.</doc>
        <source-position filename="../pango/pango-fontmap.h" line="138"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="fontmap" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-fontmap.c"
                 line="119">a #PangoFontMap</doc>
            <type name="FontMap" c:type="PangoFontMap*"/>
          </instance-parameter>
          <parameter name="families"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="container">
            <doc xml:space="preserve"
                 filename="../pango/pango-fontmap.c"
                 line="120">location to store a pointer to an array of #PangoFontFamily *.
           This array should be freed with g_free().</doc>
            <array length="1" zero-terminated="0" c:type="PangoFontFamily***">
              <type name="FontFamily" c:type="PangoFontFamily**"/>
            </array>
          </parameter>
          <parameter name="n_families"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="../pango/pango-fontmap.c"
                 line="122">location to store the number of elements in @families</doc>
            <type name="gint" c:type="int*"/>
          </parameter>
        </parameters>
      </method>
      <method name="load_font" c:identifier="pango_font_map_load_font">
        <doc xml:space="preserve"
             filename="../pango/pango-fontmap.c"
             line="96">Load the font in the fontmap that is the closest match for @desc.</doc>
        <source-position filename="../pango/pango-fontmap.h" line="129"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="../pango/pango-fontmap.c"
               line="104">the newly allocated #PangoFont
         loaded, or %NULL if no font matched.</doc>
          <type name="Font" c:type="PangoFont*"/>
        </return-value>
        <parameters>
          <instance-parameter name="fontmap" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-fontmap.c"
                 line="98">a #PangoFontMap</doc>
            <type name="FontMap" c:type="PangoFontMap*"/>
          </instance-parameter>
          <parameter name="context" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-fontmap.c"
                 line="99">the #PangoContext the font will be used with</doc>
            <type name="Context" c:type="PangoContext*"/>
          </parameter>
          <parameter name="desc" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-fontmap.c"
                 line="100">a #PangoFontDescription describing the font to load</doc>
            <type name="FontDescription" c:type="const PangoFontDescription*"/>
          </parameter>
        </parameters>
      </method>
      <method name="load_fontset" c:identifier="pango_font_map_load_fontset">
        <doc xml:space="preserve"
             filename="../pango/pango-fontmap.c"
             line="140">Load a set of fonts in the fontmap that can be used to render
a font matching @desc.</doc>
        <source-position filename="../pango/pango-fontmap.h" line="133"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="../pango/pango-fontmap.c"
               line="150">the newly allocated
         #PangoFontset loaded, or %NULL if no font matched.</doc>
          <type name="Fontset" c:type="PangoFontset*"/>
        </return-value>
        <parameters>
          <instance-parameter name="fontmap" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-fontmap.c"
                 line="142">a #PangoFontMap</doc>
            <type name="FontMap" c:type="PangoFontMap*"/>
          </instance-parameter>
          <parameter name="context" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-fontmap.c"
                 line="143">the #PangoContext the font will be used with</doc>
            <type name="Context" c:type="PangoContext*"/>
          </parameter>
          <parameter name="desc" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-fontmap.c"
                 line="144">a #PangoFontDescription describing the font to load</doc>
            <type name="FontDescription" c:type="const PangoFontDescription*"/>
          </parameter>
          <parameter name="language" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-fontmap.c"
                 line="145">a #PangoLanguage the fonts will be used for</doc>
            <type name="Language" c:type="PangoLanguage*"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent_instance">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
    </class>
    <record name="FontMapClass"
            c:type="PangoFontMapClass"
            glib:is-gtype-struct-for="FontMap">
      <doc xml:space="preserve"
           filename="../pango/pango-fontmap.h"
           line="77">The #PangoFontMapClass structure holds the virtual functions for
a particular #PangoFontMap implementation.</doc>
      <source-position filename="../pango/pango-fontmap.h" line="122"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="../pango/pango-fontmap.h"
             line="79">parent #GObjectClass.</doc>
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="load_font">
        <callback name="load_font">
          <source-position filename="../pango/pango-fontmap.h" line="101"/>
          <return-value transfer-ownership="full" nullable="1">
            <doc xml:space="preserve"
                 filename="../pango/pango-fontmap.c"
                 line="104">the newly allocated #PangoFont
         loaded, or %NULL if no font matched.</doc>
            <type name="Font" c:type="PangoFont*"/>
          </return-value>
          <parameters>
            <parameter name="fontmap" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="../pango/pango-fontmap.c"
                   line="98">a #PangoFontMap</doc>
              <type name="FontMap" c:type="PangoFontMap*"/>
            </parameter>
            <parameter name="context" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="../pango/pango-fontmap.c"
                   line="99">the #PangoContext the font will be used with</doc>
              <type name="Context" c:type="PangoContext*"/>
            </parameter>
            <parameter name="desc" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="../pango/pango-fontmap.c"
                   line="100">a #PangoFontDescription describing the font to load</doc>
              <type name="FontDescription"
                    c:type="const PangoFontDescription*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="list_families">
        <callback name="list_families">
          <source-position filename="../pango/pango-fontmap.h" line="104"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="fontmap" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="../pango/pango-fontmap.c"
                   line="119">a #PangoFontMap</doc>
              <type name="FontMap" c:type="PangoFontMap*"/>
            </parameter>
            <parameter name="families"
                       direction="out"
                       caller-allocates="0"
                       transfer-ownership="container">
              <doc xml:space="preserve"
                   filename="../pango/pango-fontmap.c"
                   line="120">location to store a pointer to an array of #PangoFontFamily *.
           This array should be freed with g_free().</doc>
              <array length="2"
                     zero-terminated="0"
                     c:type="PangoFontFamily***">
                <type name="FontFamily" c:type="PangoFontFamily**"/>
              </array>
            </parameter>
            <parameter name="n_families"
                       direction="out"
                       caller-allocates="0"
                       transfer-ownership="full">
              <doc xml:space="preserve"
                   filename="../pango/pango-fontmap.c"
                   line="122">location to store the number of elements in @families</doc>
              <type name="gint" c:type="int*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="load_fontset">
        <callback name="load_fontset">
          <source-position filename="../pango/pango-fontmap.h" line="107"/>
          <return-value transfer-ownership="full" nullable="1">
            <doc xml:space="preserve"
                 filename="../pango/pango-fontmap.c"
                 line="150">the newly allocated
         #PangoFontset loaded, or %NULL if no font matched.</doc>
            <type name="Fontset" c:type="PangoFontset*"/>
          </return-value>
          <parameters>
            <parameter name="fontmap" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="../pango/pango-fontmap.c"
                   line="142">a #PangoFontMap</doc>
              <type name="FontMap" c:type="PangoFontMap*"/>
            </parameter>
            <parameter name="context" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="../pango/pango-fontmap.c"
                   line="143">the #PangoContext the font will be used with</doc>
              <type name="Context" c:type="PangoContext*"/>
            </parameter>
            <parameter name="desc" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="../pango/pango-fontmap.c"
                   line="144">a #PangoFontDescription describing the font to load</doc>
              <type name="FontDescription"
                    c:type="const PangoFontDescription*"/>
            </parameter>
            <parameter name="language" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="../pango/pango-fontmap.c"
                   line="145">a #PangoLanguage the fonts will be used for</doc>
              <type name="Language" c:type="PangoLanguage*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="shape_engine_type">
        <doc xml:space="preserve"
             filename="../pango/pango-fontmap.h"
             line="86">the type of rendering-system-dependent engines that
can handle fonts of this fonts loaded with this fontmap.</doc>
        <type name="utf8" c:type="const char*"/>
      </field>
      <field name="get_serial">
        <callback name="get_serial">
          <source-position filename="../pango/pango-fontmap.h" line="114"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-fontmap.c"
                 line="327">The current serial number of @fontmap.</doc>
            <type name="guint" c:type="guint"/>
          </return-value>
          <parameters>
            <parameter name="fontmap" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="../pango/pango-fontmap.c"
                   line="313">a #PangoFontMap</doc>
              <type name="FontMap" c:type="PangoFontMap*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="changed">
        <callback name="changed">
          <source-position filename="../pango/pango-fontmap.h" line="115"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="fontmap" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="../pango/pango-fontmap.c"
                   line="356">a #PangoFontMap</doc>
              <type name="FontMap" c:type="PangoFontMap*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_family">
        <callback name="get_family">
          <source-position filename="../pango/pango-fontmap.h" line="117"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-fontmap.c"
                 line="411">the #PangoFontFamily</doc>
            <type name="FontFamily" c:type="PangoFontFamily*"/>
          </return-value>
          <parameters>
            <parameter name="fontmap" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="../pango/pango-fontmap.c"
                   line="406">a #PangoFontMap</doc>
              <type name="FontMap" c:type="PangoFontMap*"/>
            </parameter>
            <parameter name="name" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="../pango/pango-fontmap.c"
                   line="407">a family name</doc>
              <type name="utf8" c:type="const char*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_face" introspectable="0">
        <callback name="get_face" introspectable="0">
          <source-position filename="../pango/pango-fontmap.h" line="120"/>
          <return-value>
            <type name="FontFace" c:type="PangoFontFace*"/>
          </return-value>
          <parameters>
            <parameter name="fontmap" transfer-ownership="none">
              <type name="FontMap" c:type="PangoFontMap*"/>
            </parameter>
            <parameter name="font" transfer-ownership="none">
              <type name="Font" c:type="PangoFont*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <bitfield name="FontMask"
              glib:type-name="PangoFontMask"
              glib:get-type="pango_font_mask_get_type"
              c:type="PangoFontMask">
      <doc xml:space="preserve"
           filename="../pango/pango-font.h"
           line="140">The bits in a #PangoFontMask correspond to fields in a
#PangoFontDescription that have been set.</doc>
      <member name="family"
              value="1"
              c:identifier="PANGO_FONT_MASK_FAMILY"
              glib:nick="family">
        <doc xml:space="preserve"
             filename="../pango/pango-font.h"
             line="142">the font family is specified.</doc>
      </member>
      <member name="style"
              value="2"
              c:identifier="PANGO_FONT_MASK_STYLE"
              glib:nick="style">
        <doc xml:space="preserve"
             filename="../pango/pango-font.h"
             line="143">the font style is specified.</doc>
      </member>
      <member name="variant"
              value="4"
              c:identifier="PANGO_FONT_MASK_VARIANT"
              glib:nick="variant">
        <doc xml:space="preserve"
             filename="../pango/pango-font.h"
             line="144">the font variant is specified.</doc>
      </member>
      <member name="weight"
              value="8"
              c:identifier="PANGO_FONT_MASK_WEIGHT"
              glib:nick="weight">
        <doc xml:space="preserve"
             filename="../pango/pango-font.h"
             line="145">the font weight is specified.</doc>
      </member>
      <member name="stretch"
              value="16"
              c:identifier="PANGO_FONT_MASK_STRETCH"
              glib:nick="stretch">
        <doc xml:space="preserve"
             filename="../pango/pango-font.h"
             line="146">the font stretch is specified.</doc>
      </member>
      <member name="size"
              value="32"
              c:identifier="PANGO_FONT_MASK_SIZE"
              glib:nick="size">
        <doc xml:space="preserve"
             filename="../pango/pango-font.h"
             line="147">the font size is specified.</doc>
      </member>
      <member name="gravity"
              value="64"
              c:identifier="PANGO_FONT_MASK_GRAVITY"
              glib:nick="gravity">
        <doc xml:space="preserve"
             filename="../pango/pango-font.h"
             line="148">the font gravity is specified (Since: 1.16.)</doc>
      </member>
      <member name="variations"
              value="128"
              c:identifier="PANGO_FONT_MASK_VARIATIONS"
              glib:nick="variations">
        <doc xml:space="preserve"
             filename="../pango/pango-font.h"
             line="149">OpenType font variations are specified (Since: 1.42)</doc>
      </member>
    </bitfield>
    <record name="FontMetrics"
            c:type="PangoFontMetrics"
            glib:type-name="PangoFontMetrics"
            glib:get-type="pango_font_metrics_get_type"
            c:symbol-prefix="font_metrics">
      <doc xml:space="preserve"
           filename="../pango/pango-font.h"
           line="42">A #PangoFontMetrics structure holds the overall metric information
for a font (possibly restricted to a script). The fields of this
structure are private to implementations of a font backend. See
the documentation of the corresponding getters for documentation
of their meaning.</doc>
      <source-position filename="../pango/pango-font.h" line="344"/>
      <field name="ref_count" readable="0" private="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="ascent" readable="0" private="1">
        <type name="gint" c:type="int"/>
      </field>
      <field name="descent" readable="0" private="1">
        <type name="gint" c:type="int"/>
      </field>
      <field name="height" readable="0" private="1">
        <type name="gint" c:type="int"/>
      </field>
      <field name="approximate_char_width" readable="0" private="1">
        <type name="gint" c:type="int"/>
      </field>
      <field name="approximate_digit_width" readable="0" private="1">
        <type name="gint" c:type="int"/>
      </field>
      <field name="underline_position" readable="0" private="1">
        <type name="gint" c:type="int"/>
      </field>
      <field name="underline_thickness" readable="0" private="1">
        <type name="gint" c:type="int"/>
      </field>
      <field name="strikethrough_position" readable="0" private="1">
        <type name="gint" c:type="int"/>
      </field>
      <field name="strikethrough_thickness" readable="0" private="1">
        <type name="gint" c:type="int"/>
      </field>
      <method name="get_approximate_char_width"
              c:identifier="pango_font_metrics_get_approximate_char_width">
        <doc xml:space="preserve"
             filename="../pango/fonts.c"
             line="2059">Gets the approximate character width for a font metrics structure.
This is merely a representative value useful, for example, for
determining the initial size for a window. Actual characters in
text will be wider and narrower than this.</doc>
        <source-position filename="../pango/pango-font.h" line="359"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../pango/fonts.c"
               line="2068">the character width, in Pango units.</doc>
          <type name="gint" c:type="int"/>
        </return-value>
        <parameters>
          <instance-parameter name="metrics" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/fonts.c"
                 line="2061">a #PangoFontMetrics structure</doc>
            <type name="FontMetrics" c:type="PangoFontMetrics*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_approximate_digit_width"
              c:identifier="pango_font_metrics_get_approximate_digit_width">
        <doc xml:space="preserve"
             filename="../pango/fonts.c"
             line="2078">Gets the approximate digit width for a font metrics structure.
This is merely a representative value useful, for example, for
determining the initial size for a window. Actual digits in
text can be wider or narrower than this, though this value
is generally somewhat more accurate than the result of
pango_font_metrics_get_approximate_char_width() for digits.</doc>
        <source-position filename="../pango/pango-font.h" line="361"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../pango/fonts.c"
               line="2089">the digit width, in Pango units.</doc>
          <type name="gint" c:type="int"/>
        </return-value>
        <parameters>
          <instance-parameter name="metrics" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/fonts.c"
                 line="2080">a #PangoFontMetrics structure</doc>
            <type name="FontMetrics" c:type="PangoFontMetrics*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_ascent" c:identifier="pango_font_metrics_get_ascent">
        <doc xml:space="preserve"
             filename="../pango/fonts.c"
             line="1997">Gets the ascent from a font metrics structure. The ascent is
the distance from the baseline to the logical top of a line
of text. (The logical top may be above or below the top of the
actual drawn ink. It is necessary to lay out the text to figure
where the ink will be.)</doc>
        <source-position filename="../pango/pango-font.h" line="353"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../pango/fonts.c"
               line="2007">the ascent, in Pango units.</doc>
          <type name="gint" c:type="int"/>
        </return-value>
        <parameters>
          <instance-parameter name="metrics" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/fonts.c"
                 line="1999">a #PangoFontMetrics structure</doc>
            <type name="FontMetrics" c:type="PangoFontMetrics*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_descent" c:identifier="pango_font_metrics_get_descent">
        <doc xml:space="preserve"
             filename="../pango/fonts.c"
             line="2017">Gets the descent from a font metrics structure. The descent is
the distance from the baseline to the logical bottom of a line
of text. (The logical bottom may be above or below the bottom of the
actual drawn ink. It is necessary to lay out the text to figure
where the ink will be.)</doc>
        <source-position filename="../pango/pango-font.h" line="355"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../pango/fonts.c"
               line="2027">the descent, in Pango units.</doc>
          <type name="gint" c:type="int"/>
        </return-value>
        <parameters>
          <instance-parameter name="metrics" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/fonts.c"
                 line="2019">a #PangoFontMetrics structure</doc>
            <type name="FontMetrics" c:type="PangoFontMetrics*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_height"
              c:identifier="pango_font_metrics_get_height"
              version="1.44">
        <doc xml:space="preserve"
             filename="../pango/fonts.c"
             line="2037">Gets the line height from a font metrics structure. The
line height is the distance between successive baselines
in wrapped text.

If the line height is not available, 0 is returned.</doc>
        <source-position filename="../pango/pango-font.h" line="357"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../pango/fonts.c"
               line="2047">the height, in Pango units</doc>
          <type name="gint" c:type="int"/>
        </return-value>
        <parameters>
          <instance-parameter name="metrics" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/fonts.c"
                 line="2039">a #PangoFontMetrics structure</doc>
            <type name="FontMetrics" c:type="PangoFontMetrics*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_strikethrough_position"
              c:identifier="pango_font_metrics_get_strikethrough_position"
              version="1.6">
        <doc xml:space="preserve"
             filename="../pango/fonts.c"
             line="2139">Gets the suggested position to draw the strikethrough.
The value returned is the distance &lt;emphasis&gt;above&lt;/emphasis&gt; the
baseline of the top of the strikethrough.</doc>
        <source-position filename="../pango/pango-font.h" line="367"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../pango/fonts.c"
               line="2147">the suggested strikethrough position, in Pango units.</doc>
          <type name="gint" c:type="int"/>
        </return-value>
        <parameters>
          <instance-parameter name="metrics" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/fonts.c"
                 line="2141">a #PangoFontMetrics structure</doc>
            <type name="FontMetrics" c:type="PangoFontMetrics*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_strikethrough_thickness"
              c:identifier="pango_font_metrics_get_strikethrough_thickness"
              version="1.6">
        <doc xml:space="preserve"
             filename="../pango/fonts.c"
             line="2159">Gets the suggested thickness to draw for the strikethrough.</doc>
        <source-position filename="../pango/pango-font.h" line="369"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../pango/fonts.c"
               line="2165">the suggested strikethrough thickness, in Pango units.</doc>
          <type name="gint" c:type="int"/>
        </return-value>
        <parameters>
          <instance-parameter name="metrics" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/fonts.c"
                 line="2161">a #PangoFontMetrics structure</doc>
            <type name="FontMetrics" c:type="PangoFontMetrics*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_underline_position"
              c:identifier="pango_font_metrics_get_underline_position"
              version="1.6">
        <doc xml:space="preserve"
             filename="../pango/fonts.c"
             line="2099">Gets the suggested position to draw the underline.
The value returned is the distance &lt;emphasis&gt;above&lt;/emphasis&gt; the
baseline of the top of the underline. Since most fonts have
underline positions beneath the baseline, this value is typically
negative.</doc>
        <source-position filename="../pango/pango-font.h" line="363"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../pango/fonts.c"
               line="2109">the suggested underline position, in Pango units.</doc>
          <type name="gint" c:type="int"/>
        </return-value>
        <parameters>
          <instance-parameter name="metrics" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/fonts.c"
                 line="2101">a #PangoFontMetrics structure</doc>
            <type name="FontMetrics" c:type="PangoFontMetrics*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_underline_thickness"
              c:identifier="pango_font_metrics_get_underline_thickness"
              version="1.6">
        <doc xml:space="preserve"
             filename="../pango/fonts.c"
             line="2121">Gets the suggested thickness to draw for the underline.</doc>
        <source-position filename="../pango/pango-font.h" line="365"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../pango/fonts.c"
               line="2127">the suggested underline thickness, in Pango units.</doc>
          <type name="gint" c:type="int"/>
        </return-value>
        <parameters>
          <instance-parameter name="metrics" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/fonts.c"
                 line="2123">a #PangoFontMetrics structure</doc>
            <type name="FontMetrics" c:type="PangoFontMetrics*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="ref" c:identifier="pango_font_metrics_ref">
        <doc xml:space="preserve"
             filename="../pango/fonts.c"
             line="1958">Increase the reference count of a font metrics structure by one.</doc>
        <source-position filename="../pango/pango-font.h" line="349"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="../pango/fonts.c"
               line="1964">@metrics</doc>
          <type name="FontMetrics" c:type="PangoFontMetrics*"/>
        </return-value>
        <parameters>
          <instance-parameter name="metrics"
                              transfer-ownership="none"
                              nullable="1"
                              allow-none="1">
            <doc xml:space="preserve"
                 filename="../pango/fonts.c"
                 line="1960">a #PangoFontMetrics structure, may be %NULL</doc>
            <type name="FontMetrics" c:type="PangoFontMetrics*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="unref" c:identifier="pango_font_metrics_unref">
        <doc xml:space="preserve"
             filename="../pango/fonts.c"
             line="1977">Decrease the reference count of a font metrics structure by one. If
the result is zero, frees the structure and any associated
memory.</doc>
        <source-position filename="../pango/pango-font.h" line="351"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="metrics"
                              transfer-ownership="none"
                              nullable="1"
                              allow-none="1">
            <doc xml:space="preserve"
                 filename="../pango/fonts.c"
                 line="1979">a #PangoFontMetrics structure, may be %NULL</doc>
            <type name="FontMetrics" c:type="PangoFontMetrics*"/>
          </instance-parameter>
        </parameters>
      </method>
    </record>
    <class name="Fontset"
           c:symbol-prefix="fontset"
           c:type="PangoFontset"
           parent="GObject.Object"
           abstract="1"
           glib:type-name="PangoFontset"
           glib:get-type="pango_fontset_get_type"
           glib:type-struct="FontsetClass">
      <doc xml:space="preserve"
           filename="../pango/pango-fontset.h"
           line="72">A #PangoFontset represents a set of #PangoFont to use
when rendering text. It is the result of resolving a
#PangoFontDescription against a particular #PangoContext.
It has operations for finding the component font for
a particular Unicode character, and for finding a composite
set of metrics for the entire fontset.</doc>
      <source-position filename="../pango/pango-fontset.h" line="123"/>
      <virtual-method name="foreach" invoker="foreach" version="1.4">
        <doc xml:space="preserve"
             filename="../pango/pango-fontset.c"
             line="88">Iterates through all the fonts in a fontset, calling @func for
each one. If @func returns %TRUE, that stops the iteration.</doc>
        <source-position filename="../pango/pango-fontset.h" line="112"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="fontset" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-fontset.c"
                 line="90">a #PangoFontset</doc>
            <type name="Fontset" c:type="PangoFontset*"/>
          </instance-parameter>
          <parameter name="func"
                     transfer-ownership="none"
                     scope="call"
                     closure="1">
            <doc xml:space="preserve"
                 filename="../pango/pango-fontset.c"
                 line="91">Callback function</doc>
            <type name="FontsetForeachFunc" c:type="PangoFontsetForeachFunc"/>
          </parameter>
          <parameter name="data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../pango/pango-fontset.c"
                 line="92">data to pass to the callback function</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_font" invoker="get_font">
        <doc xml:space="preserve"
             filename="../pango/pango-fontset.c"
             line="50">Returns the font in the fontset that contains the best glyph for the
Unicode character @wc.</doc>
        <source-position filename="../pango/pango-fontset.h" line="107"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../pango/pango-fontset.c"
               line="58">a #PangoFont. The caller must call
         g_object_unref when finished with the font.</doc>
          <type name="Font" c:type="PangoFont*"/>
        </return-value>
        <parameters>
          <instance-parameter name="fontset" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-fontset.c"
                 line="52">a #PangoFontset</doc>
            <type name="Fontset" c:type="PangoFontset*"/>
          </instance-parameter>
          <parameter name="wc" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-fontset.c"
                 line="53">a Unicode character</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_language">
        <source-position filename="../pango/pango-fontset.h" line="111"/>
        <return-value transfer-ownership="full">
          <type name="Language" c:type="PangoLanguage*"/>
        </return-value>
        <parameters>
          <instance-parameter name="fontset" transfer-ownership="none">
            <type name="Fontset" c:type="PangoFontset*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_metrics" invoker="get_metrics">
        <doc xml:space="preserve"
             filename="../pango/pango-fontset.c"
             line="71">Get overall metric information for the fonts in the fontset.</doc>
        <source-position filename="../pango/pango-fontset.h" line="110"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../pango/pango-fontset.c"
               line="77">a #PangoFontMetrics object. The caller must call pango_font_metrics_unref()
  when finished using the object.</doc>
          <type name="FontMetrics" c:type="PangoFontMetrics*"/>
        </return-value>
        <parameters>
          <instance-parameter name="fontset" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-fontset.c"
                 line="73">a #PangoFontset</doc>
            <type name="Fontset" c:type="PangoFontset*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <method name="foreach"
              c:identifier="pango_fontset_foreach"
              version="1.4">
        <doc xml:space="preserve"
             filename="../pango/pango-fontset.c"
             line="88">Iterates through all the fonts in a fontset, calling @func for
each one. If @func returns %TRUE, that stops the iteration.</doc>
        <source-position filename="../pango/pango-fontset.h" line="164"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="fontset" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-fontset.c"
                 line="90">a #PangoFontset</doc>
            <type name="Fontset" c:type="PangoFontset*"/>
          </instance-parameter>
          <parameter name="func"
                     transfer-ownership="none"
                     scope="call"
                     closure="1">
            <doc xml:space="preserve"
                 filename="../pango/pango-fontset.c"
                 line="91">Callback function</doc>
            <type name="FontsetForeachFunc" c:type="PangoFontsetForeachFunc"/>
          </parameter>
          <parameter name="data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../pango/pango-fontset.c"
                 line="92">data to pass to the callback function</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_font" c:identifier="pango_fontset_get_font">
        <doc xml:space="preserve"
             filename="../pango/pango-fontset.c"
             line="50">Returns the font in the fontset that contains the best glyph for the
Unicode character @wc.</doc>
        <source-position filename="../pango/pango-fontset.h" line="159"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../pango/pango-fontset.c"
               line="58">a #PangoFont. The caller must call
         g_object_unref when finished with the font.</doc>
          <type name="Font" c:type="PangoFont*"/>
        </return-value>
        <parameters>
          <instance-parameter name="fontset" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-fontset.c"
                 line="52">a #PangoFontset</doc>
            <type name="Fontset" c:type="PangoFontset*"/>
          </instance-parameter>
          <parameter name="wc" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-fontset.c"
                 line="53">a Unicode character</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_metrics" c:identifier="pango_fontset_get_metrics">
        <doc xml:space="preserve"
             filename="../pango/pango-fontset.c"
             line="71">Get overall metric information for the fonts in the fontset.</doc>
        <source-position filename="../pango/pango-fontset.h" line="162"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../pango/pango-fontset.c"
               line="77">a #PangoFontMetrics object. The caller must call pango_font_metrics_unref()
  when finished using the object.</doc>
          <type name="FontMetrics" c:type="PangoFontMetrics*"/>
        </return-value>
        <parameters>
          <instance-parameter name="fontset" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-fontset.c"
                 line="73">a #PangoFontset</doc>
            <type name="Fontset" c:type="PangoFontset*"/>
          </instance-parameter>
        </parameters>
      </method>
      <field name="parent_instance">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
    </class>
    <record name="FontsetClass"
            c:type="PangoFontsetClass"
            glib:is-gtype-struct-for="Fontset">
      <doc xml:space="preserve"
           filename="../pango/pango-fontset.h"
           line="87">The #PangoFontsetClass structure holds the virtual functions for
a particular #PangoFontset implementation.</doc>
      <source-position filename="../pango/pango-fontset.h" line="123"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="../pango/pango-fontset.h"
             line="89">parent #GObjectClass.</doc>
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="get_font">
        <callback name="get_font">
          <source-position filename="../pango/pango-fontset.h" line="107"/>
          <return-value transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="../pango/pango-fontset.c"
                 line="58">a #PangoFont. The caller must call
         g_object_unref when finished with the font.</doc>
            <type name="Font" c:type="PangoFont*"/>
          </return-value>
          <parameters>
            <parameter name="fontset" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="../pango/pango-fontset.c"
                   line="52">a #PangoFontset</doc>
              <type name="Fontset" c:type="PangoFontset*"/>
            </parameter>
            <parameter name="wc" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="../pango/pango-fontset.c"
                   line="53">a Unicode character</doc>
              <type name="guint" c:type="guint"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_metrics">
        <callback name="get_metrics">
          <source-position filename="../pango/pango-fontset.h" line="110"/>
          <return-value transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="../pango/pango-fontset.c"
                 line="77">a #PangoFontMetrics object. The caller must call pango_font_metrics_unref()
  when finished using the object.</doc>
            <type name="FontMetrics" c:type="PangoFontMetrics*"/>
          </return-value>
          <parameters>
            <parameter name="fontset" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="../pango/pango-fontset.c"
                   line="73">a #PangoFontset</doc>
              <type name="Fontset" c:type="PangoFontset*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_language">
        <callback name="get_language">
          <source-position filename="../pango/pango-fontset.h" line="111"/>
          <return-value transfer-ownership="full">
            <type name="Language" c:type="PangoLanguage*"/>
          </return-value>
          <parameters>
            <parameter name="fontset" transfer-ownership="none">
              <type name="Fontset" c:type="PangoFontset*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="foreach">
        <callback name="foreach">
          <source-position filename="../pango/pango-fontset.h" line="112"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="fontset" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="../pango/pango-fontset.c"
                   line="90">a #PangoFontset</doc>
              <type name="Fontset" c:type="PangoFontset*"/>
            </parameter>
            <parameter name="func"
                       transfer-ownership="none"
                       scope="call"
                       closure="2">
              <doc xml:space="preserve"
                   filename="../pango/pango-fontset.c"
                   line="91">Callback function</doc>
              <type name="FontsetForeachFunc"
                    c:type="PangoFontsetForeachFunc"/>
            </parameter>
            <parameter name="data"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <doc xml:space="preserve"
                   filename="../pango/pango-fontset.c"
                   line="92">data to pass to the callback function</doc>
              <type name="gpointer" c:type="gpointer"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="_pango_reserved1" introspectable="0">
        <callback name="_pango_reserved1">
          <source-position filename="../pango/pango-fontset.h" line="119"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_pango_reserved2" introspectable="0">
        <callback name="_pango_reserved2">
          <source-position filename="../pango/pango-fontset.h" line="120"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_pango_reserved3" introspectable="0">
        <callback name="_pango_reserved3">
          <source-position filename="../pango/pango-fontset.h" line="121"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_pango_reserved4" introspectable="0">
        <callback name="_pango_reserved4">
          <source-position filename="../pango/pango-fontset.h" line="122"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <callback name="FontsetForeachFunc"
              c:type="PangoFontsetForeachFunc"
              version="1.4">
      <doc xml:space="preserve"
           filename="../pango/pango-fontset.h"
           line="55">A callback function used by pango_fontset_foreach() when enumerating
the fonts in a fontset.</doc>
      <source-position filename="../pango/pango-fontset.h" line="68"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../pango/pango-fontset.h"
             line="64">if %TRUE, stop iteration and return immediately.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="fontset" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../pango/pango-fontset.h"
               line="57">a #PangoFontset</doc>
          <type name="Fontset" c:type="PangoFontset*"/>
        </parameter>
        <parameter name="font" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../pango/pango-fontset.h"
               line="58">a font from @fontset</doc>
          <type name="Font" c:type="PangoFont*"/>
        </parameter>
        <parameter name="user_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   closure="2">
          <doc xml:space="preserve"
               filename="../pango/pango-fontset.h"
               line="59">callback data</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <class name="FontsetSimple"
           c:symbol-prefix="fontset_simple"
           c:type="PangoFontsetSimple"
           parent="Fontset"
           glib:type-name="PangoFontsetSimple"
           glib:get-type="pango_fontset_simple_get_type"
           glib:type-struct="FontsetSimpleClass">
      <doc xml:space="preserve"
           filename="../pango/pango-fontset.h"
           line="130">#PangoFontsetSimple is a implementation of the abstract
#PangoFontset base class in terms of an array of fonts,
which the creator provides when constructing the
#PangoFontsetSimple.</doc>
      <source-position filename="../pango/pango-fontset.h" line="143"/>
      <constructor name="new" c:identifier="pango_fontset_simple_new">
        <doc xml:space="preserve"
             filename="../pango/pango-fontset.c"
             line="233">Creates a new #PangoFontsetSimple for the given language.</doc>
        <source-position filename="../pango/pango-fontset.h" line="150"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../pango/pango-fontset.c"
               line="239">the newly allocated #PangoFontsetSimple, which should
              be freed with g_object_unref().</doc>
          <type name="FontsetSimple" c:type="PangoFontsetSimple*"/>
        </return-value>
        <parameters>
          <parameter name="language" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-fontset.c"
                 line="235">a #PangoLanguage tag</doc>
            <type name="Language" c:type="PangoLanguage*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="append" c:identifier="pango_fontset_simple_append">
        <doc xml:space="preserve"
             filename="../pango/pango-fontset.c"
             line="302">Adds a font to the fontset.</doc>
        <source-position filename="../pango/pango-fontset.h" line="152"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="fontset" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-fontset.c"
                 line="304">a #PangoFontsetSimple.</doc>
            <type name="FontsetSimple" c:type="PangoFontsetSimple*"/>
          </instance-parameter>
          <parameter name="font" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-fontset.c"
                 line="305">a #PangoFont.</doc>
            <type name="Font" c:type="PangoFont*"/>
          </parameter>
        </parameters>
      </method>
      <method name="size" c:identifier="pango_fontset_simple_size">
        <doc xml:space="preserve"
             filename="../pango/pango-fontset.c"
             line="317">Returns the number of fonts in the fontset.</doc>
        <source-position filename="../pango/pango-fontset.h" line="155"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../pango/pango-fontset.c"
               line="323">the size of @fontset.</doc>
          <type name="gint" c:type="int"/>
        </return-value>
        <parameters>
          <instance-parameter name="fontset" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-fontset.c"
                 line="319">a #PangoFontsetSimple.</doc>
            <type name="FontsetSimple" c:type="PangoFontsetSimple*"/>
          </instance-parameter>
        </parameters>
      </method>
    </class>
    <record name="FontsetSimpleClass"
            c:type="PangoFontsetSimpleClass"
            disguised="1"
            glib:is-gtype-struct-for="FontsetSimple">
      <source-position filename="../pango/pango-fontset.h" line="143"/>
    </record>
    <function-macro name="GET_UNKNOWN_GLYPH"
                    c:identifier="PANGO_GET_UNKNOWN_GLYPH"
                    introspectable="0">
      <doc xml:space="preserve"
           filename="../pango/pango-font.h"
           line="692">The way this unknown glyphs are rendered is backend specific.  For example,
a box with the hexadecimal Unicode code-point of the character written in it
is what is done in the most common backends.</doc>
      <source-position filename="../pango/pango-font.h" line="705"/>
      <parameters>
        <parameter name="wc">
          <doc xml:space="preserve"
               filename="../pango/pango-font.h"
               line="694">a Unicode character</doc>
        </parameter>
      </parameters>
    </function-macro>
    <constant name="GLYPH_EMPTY" value="268435455" c:type="PANGO_GLYPH_EMPTY">
      <doc xml:space="preserve"
           filename="../pango/pango-font.h"
           line="664">The %PANGO_GLYPH_EMPTY macro represents a #PangoGlyph value that has a
 special meaning, which is a zero-width empty glyph.  This is useful for
example in shaper modules, to use as the glyph for various zero-width
Unicode characters (those passing pango_is_zero_width()).</doc>
      <source-position filename="../pango/pango-font.h" line="702"/>
      <type name="Glyph" c:type="PangoGlyph"/>
    </constant>
    <constant name="GLYPH_INVALID_INPUT"
              value="4294967295"
              c:type="PANGO_GLYPH_INVALID_INPUT"
              version="1.20">
      <doc xml:space="preserve"
           filename="../pango/pango-font.h"
           line="672">The %PANGO_GLYPH_INVALID_INPUT macro represents a #PangoGlyph value that has a
special meaning of invalid input.  #PangoLayout produces one such glyph
per invalid input UTF-8 byte and such a glyph is rendered as a crossed
box.

Note that this value is defined such that it has the %PANGO_GLYPH_UNKNOWN_FLAG
on.</doc>
      <source-position filename="../pango/pango-font.h" line="703"/>
      <type name="Glyph" c:type="PangoGlyph"/>
    </constant>
    <constant name="GLYPH_UNKNOWN_FLAG"
              value="268435456"
              c:type="PANGO_GLYPH_UNKNOWN_FLAG">
      <doc xml:space="preserve"
           filename="../pango/pango-font.h"
           line="685">The %PANGO_GLYPH_UNKNOWN_FLAG macro is a flag value that can be added to
a #gunichar value of a valid Unicode character, to produce a #PangoGlyph
value, representing an unknown-character glyph for the respective #gunichar.</doc>
      <source-position filename="../pango/pango-font.h" line="704"/>
      <type name="Glyph" c:type="PangoGlyph"/>
    </constant>
    <function-macro name="GRAVITY_IS_IMPROPER"
                    c:identifier="PANGO_GRAVITY_IS_IMPROPER"
                    version="1.32"
                    introspectable="0">
      <doc xml:space="preserve"
           filename="../pango/pango-gravity.h"
           line="97">Whether a #PangoGravity represents a gravity that results in reversal of text direction.</doc>
      <source-position filename="../pango/pango-gravity.h" line="108"/>
      <parameters>
        <parameter name="gravity">
          <doc xml:space="preserve"
               filename="../pango/pango-gravity.h"
               line="99">the #PangoGravity to check</doc>
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="GRAVITY_IS_VERTICAL"
                    c:identifier="PANGO_GRAVITY_IS_VERTICAL"
                    version="1.16"
                    introspectable="0">
      <doc xml:space="preserve"
           filename="../pango/pango-gravity.h"
           line="83">Whether a #PangoGravity represents vertical writing directions.</doc>
      <source-position filename="../pango/pango-gravity.h" line="94"/>
      <parameters>
        <parameter name="gravity">
          <doc xml:space="preserve"
               filename="../pango/pango-gravity.h"
               line="85">the #PangoGravity to check</doc>
        </parameter>
      </parameters>
    </function-macro>
    <record name="GlyphGeometry" c:type="PangoGlyphGeometry">
      <doc xml:space="preserve"
           filename="../pango/pango-glyph.h"
           line="51">The #PangoGlyphGeometry structure contains width and positioning
information for a single glyph.</doc>
      <source-position filename="../pango/pango-glyph.h" line="65"/>
      <field name="width" writable="1">
        <doc xml:space="preserve"
             filename="../pango/pango-glyph.h"
             line="53">the logical width to use for the the character.</doc>
        <type name="GlyphUnit" c:type="PangoGlyphUnit"/>
      </field>
      <field name="x_offset" writable="1">
        <doc xml:space="preserve"
             filename="../pango/pango-glyph.h"
             line="54">horizontal offset from nominal character position.</doc>
        <type name="GlyphUnit" c:type="PangoGlyphUnit"/>
      </field>
      <field name="y_offset" writable="1">
        <doc xml:space="preserve"
             filename="../pango/pango-glyph.h"
             line="55">vertical offset from nominal character position.</doc>
        <type name="GlyphUnit" c:type="PangoGlyphUnit"/>
      </field>
    </record>
    <record name="GlyphInfo" c:type="PangoGlyphInfo">
      <doc xml:space="preserve"
           filename="../pango/pango-glyph.h"
           line="88">The #PangoGlyphInfo structure represents a single glyph together with
positioning information and visual attributes.
It contains the following fields.</doc>
      <source-position filename="../pango/pango-glyph.h" line="103"/>
      <field name="glyph" writable="1">
        <doc xml:space="preserve"
             filename="../pango/pango-glyph.h"
             line="90">the glyph itself.</doc>
        <type name="Glyph" c:type="PangoGlyph"/>
      </field>
      <field name="geometry" writable="1">
        <doc xml:space="preserve"
             filename="../pango/pango-glyph.h"
             line="91">the positional information about the glyph.</doc>
        <type name="GlyphGeometry" c:type="PangoGlyphGeometry"/>
      </field>
      <field name="attr" writable="1">
        <doc xml:space="preserve"
             filename="../pango/pango-glyph.h"
             line="92">the visual attributes of the glyph.</doc>
        <type name="GlyphVisAttr" c:type="PangoGlyphVisAttr"/>
      </field>
    </record>
    <record name="GlyphItem"
            c:type="PangoGlyphItem"
            glib:type-name="PangoGlyphItem"
            glib:get-type="pango_glyph_item_get_type"
            c:symbol-prefix="glyph_item">
      <doc xml:space="preserve"
           filename="../pango/pango-glyph-item.h"
           line="32">A #PangoGlyphItem is a pair of a #PangoItem and the glyphs
resulting from shaping the text corresponding to an item.
As an example of the usage of #PangoGlyphItem, the results
of shaping text with #PangoLayout is a list of #PangoLayoutLine,
each of which contains a list of #PangoGlyphItem.</doc>
      <source-position filename="../pango/pango-glyph-item.h" line="49"/>
      <field name="item" writable="1">
        <doc xml:space="preserve"
             filename="../pango/pango-glyph-item.h"
             line="34">corresponding #PangoItem.</doc>
        <type name="Item" c:type="PangoItem*"/>
      </field>
      <field name="glyphs" writable="1">
        <doc xml:space="preserve"
             filename="../pango/pango-glyph-item.h"
             line="35">corresponding #PangoGlyphString.</doc>
        <type name="GlyphString" c:type="PangoGlyphString*"/>
      </field>
      <method name="apply_attrs"
              c:identifier="pango_glyph_item_apply_attrs"
              version="1.2">
        <doc xml:space="preserve"
             filename="../pango/pango-glyph-item.c"
             line="553">Splits a shaped item (PangoGlyphItem) into multiple items based
on an attribute list. The idea is that if you have attributes
that don't affect shaping, such as color or underline, to avoid
affecting shaping, you filter them out (pango_attr_list_filter()),
apply the shaping process and then reapply them to the result using
this function.

All attributes that start or end inside a cluster are applied
to that cluster; for instance, if half of a cluster is underlined
and the other-half strikethrough, then the cluster will end
up with both underline and strikethrough attributes. In these
cases, it may happen that item-&gt;extra_attrs for some of the
result items can have multiple attributes of the same type.

This function takes ownership of @glyph_item; it will be reused
as one of the elements in the list.</doc>
        <source-position filename="../pango/pango-glyph-item.h" line="70"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../pango/pango-glyph-item.c"
               line="576">a
  list of glyph items resulting from splitting @glyph_item. Free
  the elements using pango_glyph_item_free(), the list using
  g_slist_free().</doc>
          <type name="GLib.SList" c:type="GSList*">
            <type name="GlyphItem"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="glyph_item" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-glyph-item.c"
                 line="555">a shaped item</doc>
            <type name="GlyphItem" c:type="PangoGlyphItem*"/>
          </instance-parameter>
          <parameter name="text" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-glyph-item.c"
                 line="556">text that @list applies to</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="list" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-glyph-item.c"
                 line="557">a #PangoAttrList</doc>
            <type name="AttrList" c:type="PangoAttrList*"/>
          </parameter>
        </parameters>
      </method>
      <method name="copy" c:identifier="pango_glyph_item_copy" version="1.20">
        <doc xml:space="preserve"
             filename="../pango/pango-glyph-item.c"
             line="133">Make a deep copy of an existing #PangoGlyphItem structure.</doc>
        <source-position filename="../pango/pango-glyph-item.h" line="66"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="../pango/pango-glyph-item.c"
               line="139">the newly allocated #PangoGlyphItem, which should
              be freed with pango_glyph_item_free(), or %NULL
              if @orig was %NULL.</doc>
          <type name="GlyphItem" c:type="PangoGlyphItem*"/>
        </return-value>
        <parameters>
          <instance-parameter name="orig"
                              transfer-ownership="none"
                              nullable="1"
                              allow-none="1">
            <doc xml:space="preserve"
                 filename="../pango/pango-glyph-item.c"
                 line="135">a #PangoGlyphItem, may be %NULL</doc>
            <type name="GlyphItem" c:type="PangoGlyphItem*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="free" c:identifier="pango_glyph_item_free" version="1.6">
        <doc xml:space="preserve"
             filename="../pango/pango-glyph-item.c"
             line="161">Frees a #PangoGlyphItem and resources to which it points.</doc>
        <source-position filename="../pango/pango-glyph-item.h" line="68"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="glyph_item"
                              transfer-ownership="none"
                              nullable="1"
                              allow-none="1">
            <doc xml:space="preserve"
                 filename="../pango/pango-glyph-item.c"
                 line="163">a #PangoGlyphItem, may be %NULL</doc>
            <type name="GlyphItem" c:type="PangoGlyphItem*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_logical_widths"
              c:identifier="pango_glyph_item_get_logical_widths"
              version="1.26">
        <doc xml:space="preserve"
             filename="../pango/pango-glyph-item.c"
             line="785">Given a #PangoGlyphItem and the corresponding
text, determine the screen width corresponding to each character. When
multiple characters compose a single cluster, the width of the entire
cluster is divided equally among the characters.

See also pango_glyph_string_get_logical_widths().</doc>
        <source-position filename="../pango/pango-glyph-item.h" line="79"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="glyph_item" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-glyph-item.c"
                 line="787">a #PangoGlyphItem</doc>
            <type name="GlyphItem" c:type="PangoGlyphItem*"/>
          </instance-parameter>
          <parameter name="text" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-glyph-item.c"
                 line="788">text that @glyph_item corresponds to
  (glyph_item-&gt;item-&gt;offset is an offset from the
   start of @text)</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="logical_widths" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-glyph-item.c"
                 line="791">an array whose length is the number of
                 characters in glyph_item (equal to
                 glyph_item-&gt;item-&gt;num_chars) to be filled in with
                 the resulting character widths.</doc>
            <array zero-terminated="0" c:type="int*">
              <type name="gint" c:type="int"/>
            </array>
          </parameter>
        </parameters>
      </method>
      <method name="letter_space"
              c:identifier="pango_glyph_item_letter_space"
              version="1.6">
        <doc xml:space="preserve"
             filename="../pango/pango-glyph-item.c"
             line="712">Adds spacing between the graphemes of @glyph_item to
give the effect of typographic letter spacing.</doc>
        <source-position filename="../pango/pango-glyph-item.h" line="74"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="glyph_item" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-glyph-item.c"
                 line="714">a #PangoGlyphItem</doc>
            <type name="GlyphItem" c:type="PangoGlyphItem*"/>
          </instance-parameter>
          <parameter name="text" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-glyph-item.c"
                 line="715">text that @glyph_item corresponds to
  (glyph_item-&gt;item-&gt;offset is an offset from the
   start of @text)</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="log_attrs" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-glyph-item.c"
                 line="718">logical attributes for the item
  (the first logical attribute refers to the position
  before the first character in the item)</doc>
            <array zero-terminated="0" c:type="PangoLogAttr*">
              <type name="LogAttr" c:type="PangoLogAttr"/>
            </array>
          </parameter>
          <parameter name="letter_spacing" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-glyph-item.c"
                 line="721">amount of letter spacing to add
  in Pango units. May be negative, though too large
  negative values will give ugly results.</doc>
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </method>
      <method name="split" c:identifier="pango_glyph_item_split" version="1.2">
        <doc xml:space="preserve"
             filename="../pango/pango-glyph-item.c"
             line="31">Modifies @orig to cover only the text after @split_index, and
returns a new item that covers the text before @split_index that
used to be in @orig. You can think of @split_index as the length of
the returned item. @split_index may not be 0, and it may not be
greater than or equal to the length of @orig (that is, there must
be at least one byte assigned to each item, you can't create a
zero-length item).

This function is similar in function to pango_item_split() (and uses
it internally.)</doc>
        <source-position filename="../pango/pango-glyph-item.h" line="62"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../pango/pango-glyph-item.c"
               line="48">the newly allocated item representing text before
              @split_index, which should be freed
              with pango_glyph_item_free().</doc>
          <type name="GlyphItem" c:type="PangoGlyphItem*"/>
        </return-value>
        <parameters>
          <instance-parameter name="orig" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-glyph-item.c"
                 line="33">a #PangoItem</doc>
            <type name="GlyphItem" c:type="PangoGlyphItem*"/>
          </instance-parameter>
          <parameter name="text" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-glyph-item.c"
                 line="34">text to which positions in @orig apply</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="split_index" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-glyph-item.c"
                 line="35">byte index of position to split item, relative to the start of the item</doc>
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </method>
    </record>
    <record name="GlyphItemIter"
            c:type="PangoGlyphItemIter"
            version="1.22"
            glib:type-name="PangoGlyphItemIter"
            glib:get-type="pango_glyph_item_iter_get_type"
            c:symbol-prefix="glyph_item_iter">
      <doc xml:space="preserve"
           filename="../pango/pango-glyph-item.h"
           line="84">A #PangoGlyphItemIter is an iterator over the clusters in a
#PangoGlyphItem.  The &lt;firstterm&gt;forward direction&lt;/firstterm&gt; of the
iterator is the logical direction of text.  That is, with increasing
@start_index and @start_char values.  If @glyph_item is right-to-left
(that is, if &lt;literal&gt;@glyph_item-&gt;item-&gt;analysis.level&lt;/literal&gt; is odd),
then @start_glyph decreases as the iterator moves forward.  Moreover,
in right-to-left cases, @start_glyph is greater than @end_glyph.

An iterator should be initialized using either of
pango_glyph_item_iter_init_start() and
pango_glyph_item_iter_init_end(), for forward and backward iteration
respectively, and walked over using any desired mixture of
pango_glyph_item_iter_next_cluster() and
pango_glyph_item_iter_prev_cluster().  A common idiom for doing a
forward iteration over the clusters is:
&lt;programlisting&gt;
PangoGlyphItemIter cluster_iter;
gboolean have_cluster;

for (have_cluster = pango_glyph_item_iter_init_start (&amp;amp;cluster_iter,
                                                      glyph_item, text);
     have_cluster;
     have_cluster = pango_glyph_item_iter_next_cluster (&amp;amp;cluster_iter))
{
  ...
}
&lt;/programlisting&gt;

Note that @text is the start of the text for layout, which is then
indexed by &lt;literal&gt;@glyph_item-&gt;item-&gt;offset&lt;/literal&gt; to get to the
text of @glyph_item.  The @start_index and @end_index values can directly
index into @text.  The @start_glyph, @end_glyph, @start_char, and @end_char
values however are zero-based for the @glyph_item.  For each cluster, the
item pointed at by the start variables is included in the cluster while
the one pointed at by end variables is not.

None of the members of a #PangoGlyphItemIter should be modified manually.</doc>
      <source-position filename="../pango/pango-glyph-item.h" line="141"/>
      <field name="glyph_item" writable="1">
        <type name="GlyphItem" c:type="PangoGlyphItem*"/>
      </field>
      <field name="text" writable="1">
        <type name="utf8" c:type="const gchar*"/>
      </field>
      <field name="start_glyph" writable="1">
        <type name="gint" c:type="int"/>
      </field>
      <field name="start_index" writable="1">
        <type name="gint" c:type="int"/>
      </field>
      <field name="start_char" writable="1">
        <type name="gint" c:type="int"/>
      </field>
      <field name="end_glyph" writable="1">
        <type name="gint" c:type="int"/>
      </field>
      <field name="end_index" writable="1">
        <type name="gint" c:type="int"/>
      </field>
      <field name="end_char" writable="1">
        <type name="gint" c:type="int"/>
      </field>
      <method name="copy"
              c:identifier="pango_glyph_item_iter_copy"
              version="1.22">
        <doc xml:space="preserve"
             filename="../pango/pango-glyph-item.c"
             line="188">Make a shallow copy of an existing #PangoGlyphItemIter structure.</doc>
        <source-position filename="../pango/pango-glyph-item.h" line="155"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="../pango/pango-glyph-item.c"
               line="194">the newly allocated #PangoGlyphItemIter, which should
              be freed with pango_glyph_item_iter_free(), or %NULL
              if @orig was %NULL.</doc>
          <type name="GlyphItemIter" c:type="PangoGlyphItemIter*"/>
        </return-value>
        <parameters>
          <instance-parameter name="orig"
                              transfer-ownership="none"
                              nullable="1"
                              allow-none="1">
            <doc xml:space="preserve"
                 filename="../pango/pango-glyph-item.c"
                 line="190">a #PangoGlyphItemIter, may be %NULL</doc>
            <type name="GlyphItemIter" c:type="PangoGlyphItemIter*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="free"
              c:identifier="pango_glyph_item_iter_free"
              version="1.22">
        <doc xml:space="preserve"
             filename="../pango/pango-glyph-item.c"
             line="215">Frees a #PangoGlyphItemIter created by pango_glyph_item_iter_copy().</doc>
        <source-position filename="../pango/pango-glyph-item.h" line="157"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="iter"
                              transfer-ownership="none"
                              nullable="1"
                              allow-none="1">
            <doc xml:space="preserve"
                 filename="../pango/pango-glyph-item.c"
                 line="217">a #PangoGlyphItemIter, may be %NULL</doc>
            <type name="GlyphItemIter" c:type="PangoGlyphItemIter*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="init_end"
              c:identifier="pango_glyph_item_iter_init_end"
              version="1.22">
        <doc xml:space="preserve"
             filename="../pango/pango-glyph-item.c"
             line="457">Initializes a #PangoGlyphItemIter structure to point to the
last cluster in a glyph item.
See #PangoGlyphItemIter for details of cluster orders.</doc>
        <source-position filename="../pango/pango-glyph-item.h" line="164"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../pango/pango-glyph-item.c"
               line="467">%FALSE if there are no clusters in the glyph item</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="iter" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-glyph-item.c"
                 line="459">a #PangoGlyphItemIter</doc>
            <type name="GlyphItemIter" c:type="PangoGlyphItemIter*"/>
          </instance-parameter>
          <parameter name="glyph_item" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-glyph-item.c"
                 line="460">the glyph item to iterate over</doc>
            <type name="GlyphItem" c:type="PangoGlyphItem*"/>
          </parameter>
          <parameter name="text" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-glyph-item.c"
                 line="461">text corresponding to the glyph item</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="init_start"
              c:identifier="pango_glyph_item_iter_init_start"
              version="1.22">
        <doc xml:space="preserve"
             filename="../pango/pango-glyph-item.c"
             line="419">Initializes a #PangoGlyphItemIter structure to point to the
first cluster in a glyph item.
See #PangoGlyphItemIter for details of cluster orders.</doc>
        <source-position filename="../pango/pango-glyph-item.h" line="160"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../pango/pango-glyph-item.c"
               line="429">%FALSE if there are no clusters in the glyph item</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="iter" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-glyph-item.c"
                 line="421">a #PangoGlyphItemIter</doc>
            <type name="GlyphItemIter" c:type="PangoGlyphItemIter*"/>
          </instance-parameter>
          <parameter name="glyph_item" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-glyph-item.c"
                 line="422">the glyph item to iterate over</doc>
            <type name="GlyphItem" c:type="PangoGlyphItem*"/>
          </parameter>
          <parameter name="text" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-glyph-item.c"
                 line="423">text corresponding to the glyph item</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="next_cluster"
              c:identifier="pango_glyph_item_iter_next_cluster"
              version="1.22">
        <doc xml:space="preserve"
             filename="../pango/pango-glyph-item.c"
             line="236">Advances the iterator to the next cluster in the glyph item.
See #PangoGlyphItemIter for details of cluster orders.</doc>
        <source-position filename="../pango/pango-glyph-item.h" line="168"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../pango/pango-glyph-item.c"
               line="243">%TRUE if the iterator was advanced, %FALSE if we were already on the
 last cluster.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="iter" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-glyph-item.c"
                 line="238">a #PangoGlyphItemIter</doc>
            <type name="GlyphItemIter" c:type="PangoGlyphItemIter*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="prev_cluster"
              c:identifier="pango_glyph_item_iter_prev_cluster"
              version="1.22">
        <doc xml:space="preserve"
             filename="../pango/pango-glyph-item.c"
             line="326">Moves the iterator to the preceding cluster in the glyph item.
See #PangoGlyphItemIter for details of cluster orders.</doc>
        <source-position filename="../pango/pango-glyph-item.h" line="170"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../pango/pango-glyph-item.c"
               line="333">%TRUE if the iterator was moved, %FALSE if we were already on the
 first cluster.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="iter" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-glyph-item.c"
                 line="328">a #PangoGlyphItemIter</doc>
            <type name="GlyphItemIter" c:type="PangoGlyphItemIter*"/>
          </instance-parameter>
        </parameters>
      </method>
    </record>
    <record name="GlyphString"
            c:type="PangoGlyphString"
            glib:type-name="PangoGlyphString"
            glib:get-type="pango_glyph_string_get_type"
            c:symbol-prefix="glyph_string">
      <doc xml:space="preserve"
           filename="../pango/pango-glyph.h"
           line="108">The #PangoGlyphString structure is used to store strings
of glyphs with geometry and visual attribute information.
The storage for the glyph information is owned
by the structure which simplifies memory management.</doc>
      <source-position filename="../pango/pango-glyph.h" line="129"/>
      <field name="num_glyphs" writable="1">
        <doc xml:space="preserve"
             filename="../pango/pango-glyph.h"
             line="110">number of the glyphs in this glyph string.</doc>
        <type name="gint" c:type="gint"/>
      </field>
      <field name="glyphs" writable="1">
        <doc xml:space="preserve"
             filename="../pango/pango-glyph.h"
             line="111">array of glyph information
         for the glyph string.</doc>
        <array length="0" zero-terminated="0" c:type="PangoGlyphInfo*">
          <type name="GlyphInfo" c:type="PangoGlyphInfo"/>
        </array>
      </field>
      <field name="log_clusters" writable="1">
        <doc xml:space="preserve"
             filename="../pango/pango-glyph.h"
             line="113">logical cluster info, indexed by the byte index
               within the text corresponding to the glyph string.</doc>
        <type name="gint" c:type="gint*"/>
      </field>
      <field name="space" readable="0" private="1">
        <type name="gint" c:type="gint"/>
      </field>
      <constructor name="new" c:identifier="pango_glyph_string_new">
        <doc xml:space="preserve"
             filename="../pango/glyphstring.c"
             line="28">Create a new #PangoGlyphString.</doc>
        <source-position filename="../pango/pango-glyph.h" line="139"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../pango/glyphstring.c"
               line="33">the newly allocated #PangoGlyphString, which
              should be freed with pango_glyph_string_free().</doc>
          <type name="GlyphString" c:type="PangoGlyphString*"/>
        </return-value>
      </constructor>
      <method name="copy" c:identifier="pango_glyph_string_copy">
        <doc xml:space="preserve"
             filename="../pango/glyphstring.c"
             line="98">Copy a glyph string and associated storage.</doc>
        <source-position filename="../pango/pango-glyph.h" line="146"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="../pango/glyphstring.c"
               line="104">the newly allocated #PangoGlyphString,
              which should be freed with pango_glyph_string_free(),
              or %NULL if @string was %NULL.</doc>
          <type name="GlyphString" c:type="PangoGlyphString*"/>
        </return-value>
        <parameters>
          <instance-parameter name="string"
                              transfer-ownership="none"
                              nullable="1"
                              allow-none="1">
            <doc xml:space="preserve"
                 filename="../pango/glyphstring.c"
                 line="100">a #PangoGlyphString, may be %NULL</doc>
            <type name="GlyphString" c:type="PangoGlyphString*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="extents" c:identifier="pango_glyph_string_extents">
        <doc xml:space="preserve"
             filename="../pango/glyphstring.c"
             line="262">Compute the logical and ink extents of a glyph string. See the documentation
for pango_font_get_glyph_extents() for details about the interpretation
of the rectangles.

Examples of logical (red) and ink (green) rects:

![](rects1.png) ![](rects2.png)</doc>
        <source-position filename="../pango/pango-glyph.h" line="150"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="glyphs" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/glyphstring.c"
                 line="264">a #PangoGlyphString</doc>
            <type name="GlyphString" c:type="PangoGlyphString*"/>
          </instance-parameter>
          <parameter name="font" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/glyphstring.c"
                 line="265">a #PangoFont</doc>
            <type name="Font" c:type="PangoFont*"/>
          </parameter>
          <parameter name="ink_rect"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../pango/glyphstring.c"
                 line="266">rectangle used to store the extents of the glyph string
           as drawn or %NULL to indicate that the result is not needed.</doc>
            <type name="Rectangle" c:type="PangoRectangle*"/>
          </parameter>
          <parameter name="logical_rect"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../pango/glyphstring.c"
                 line="268">rectangle used to store the logical extents of the
           glyph string or %NULL to indicate that the result is not needed.</doc>
            <type name="Rectangle" c:type="PangoRectangle*"/>
          </parameter>
        </parameters>
      </method>
      <method name="extents_range"
              c:identifier="pango_glyph_string_extents_range">
        <doc xml:space="preserve"
             filename="../pango/glyphstring.c"
             line="145">Computes the extents of a sub-portion of a glyph string. The extents are
relative to the start of the glyph string range (the origin of their
coordinate system is at the start of the range, not at the start of the entire
glyph string).</doc>
        <source-position filename="../pango/pango-glyph.h" line="158"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="glyphs" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/glyphstring.c"
                 line="147">a #PangoGlyphString</doc>
            <type name="GlyphString" c:type="PangoGlyphString*"/>
          </instance-parameter>
          <parameter name="start" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/glyphstring.c"
                 line="148">start index</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="end" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/glyphstring.c"
                 line="149">end index (the range is the set of bytes with
	      indices such that start &lt;= index &lt; end)</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="font" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/glyphstring.c"
                 line="151">a #PangoFont</doc>
            <type name="Font" c:type="PangoFont*"/>
          </parameter>
          <parameter name="ink_rect"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../pango/glyphstring.c"
                 line="152">rectangle used to
           store the extents of the glyph string range as drawn or
           %NULL to indicate that the result is not needed.</doc>
            <type name="Rectangle" c:type="PangoRectangle*"/>
          </parameter>
          <parameter name="logical_rect"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../pango/glyphstring.c"
                 line="155">rectangle used to
           store the logical extents of the glyph string range or
           %NULL to indicate that the result is not needed.</doc>
            <type name="Rectangle" c:type="PangoRectangle*"/>
          </parameter>
        </parameters>
      </method>
      <method name="free" c:identifier="pango_glyph_string_free">
        <doc xml:space="preserve"
             filename="../pango/glyphstring.c"
             line="128">Free a glyph string and associated storage.</doc>
        <source-position filename="../pango/pango-glyph.h" line="148"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="string"
                              transfer-ownership="none"
                              nullable="1"
                              allow-none="1">
            <doc xml:space="preserve"
                 filename="../pango/glyphstring.c"
                 line="130">a #PangoGlyphString, may be %NULL</doc>
            <type name="GlyphString" c:type="PangoGlyphString*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_logical_widths"
              c:identifier="pango_glyph_string_get_logical_widths">
        <doc xml:space="preserve"
             filename="../pango/glyphstring.c"
             line="314">Given a #PangoGlyphString resulting from pango_shape() and the corresponding
text, determine the screen width corresponding to each character. When
multiple characters compose a single cluster, the width of the entire
cluster is divided equally among the characters.

See also pango_glyph_item_get_logical_widths().</doc>
        <source-position filename="../pango/pango-glyph.h" line="166"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="glyphs" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/glyphstring.c"
                 line="316">a #PangoGlyphString</doc>
            <type name="GlyphString" c:type="PangoGlyphString*"/>
          </instance-parameter>
          <parameter name="text" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/glyphstring.c"
                 line="317">the text corresponding to the glyphs</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="length" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/glyphstring.c"
                 line="318">the length of @text, in bytes</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="embedding_level" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/glyphstring.c"
                 line="319">the embedding level of the string</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="logical_widths" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/glyphstring.c"
                 line="320">an array whose length is the number of
                 characters in text (equal to g_utf8_strlen (text,
                 length) unless text has NUL bytes) to be filled in
                 with the resulting character widths.</doc>
            <array zero-terminated="0" c:type="int*">
              <type name="gint" c:type="int"/>
            </array>
          </parameter>
        </parameters>
      </method>
      <method name="get_width"
              c:identifier="pango_glyph_string_get_width"
              version="1.14">
        <doc xml:space="preserve"
             filename="../pango/glyphstring.c"
             line="289">Computes the logical width of the glyph string as can also be computed
using pango_glyph_string_extents().  However, since this only computes the
width, it's much faster.  This is in fact only a convenience function that
computes the sum of geometry.width for each glyph in the @glyphs.</doc>
        <source-position filename="../pango/pango-glyph.h" line="155"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../pango/glyphstring.c"
               line="298">the logical width of the glyph string.</doc>
          <type name="gint" c:type="int"/>
        </return-value>
        <parameters>
          <instance-parameter name="glyphs" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/glyphstring.c"
                 line="291">a #PangoGlyphString</doc>
            <type name="GlyphString" c:type="PangoGlyphString*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="index_to_x" c:identifier="pango_glyph_string_index_to_x">
        <doc xml:space="preserve"
             filename="../pango/glyphstring.c"
             line="359">Converts from character position to x position. (X position
is measured from the left edge of the run). Character positions
are computed by dividing up each cluster into equal portions.</doc>
        <source-position filename="../pango/pango-glyph.h" line="173"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="glyphs" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/glyphstring.c"
                 line="361">the glyphs return from pango_shape()</doc>
            <type name="GlyphString" c:type="PangoGlyphString*"/>
          </instance-parameter>
          <parameter name="text" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/glyphstring.c"
                 line="362">the text for the run</doc>
            <type name="utf8" c:type="char*"/>
          </parameter>
          <parameter name="length" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/glyphstring.c"
                 line="363">the number of bytes (not characters) in @text.</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="analysis" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/glyphstring.c"
                 line="364">the analysis information return from pango_itemize()</doc>
            <type name="Analysis" c:type="PangoAnalysis*"/>
          </parameter>
          <parameter name="index_" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/glyphstring.c"
                 line="365">the byte index within @text</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="trailing" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/glyphstring.c"
                 line="366">whether we should compute the result for the beginning (%FALSE)
            or end (%TRUE) of the character.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="x_pos"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="../pango/glyphstring.c"
                 line="368">location to store result</doc>
            <type name="gint" c:type="int*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_size" c:identifier="pango_glyph_string_set_size">
        <doc xml:space="preserve"
             filename="../pango/glyphstring.c"
             line="49">Resize a glyph string to the given length.</doc>
        <source-position filename="../pango/pango-glyph.h" line="141"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="string" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/glyphstring.c"
                 line="51">a #PangoGlyphString.</doc>
            <type name="GlyphString" c:type="PangoGlyphString*"/>
          </instance-parameter>
          <parameter name="new_len" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/glyphstring.c"
                 line="52">the new length of the string.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="x_to_index" c:identifier="pango_glyph_string_x_to_index">
        <doc xml:space="preserve"
             filename="../pango/glyphstring.c"
             line="487">Convert from x offset to character position. Character positions
are computed by dividing up each cluster into equal portions.
In scripts where positioning within a cluster is not allowed
(such as Thai), the returned value may not be a valid cursor
position; the caller must combine the result with the logical
attributes for the text to compute the valid cursor position.</doc>
        <source-position filename="../pango/pango-glyph.h" line="181"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="glyphs" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/glyphstring.c"
                 line="489">the glyphs returned from pango_shape()</doc>
            <type name="GlyphString" c:type="PangoGlyphString*"/>
          </instance-parameter>
          <parameter name="text" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/glyphstring.c"
                 line="490">the text for the run</doc>
            <type name="utf8" c:type="char*"/>
          </parameter>
          <parameter name="length" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/glyphstring.c"
                 line="491">the number of bytes (not characters) in text.</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="analysis" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/glyphstring.c"
                 line="492">the analysis information return from pango_itemize()</doc>
            <type name="Analysis" c:type="PangoAnalysis*"/>
          </parameter>
          <parameter name="x_pos" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/glyphstring.c"
                 line="493">the x offset (in Pango units)</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="index_"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="../pango/glyphstring.c"
                 line="494">location to store calculated byte index within @text</doc>
            <type name="gint" c:type="int*"/>
          </parameter>
          <parameter name="trailing"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="../pango/glyphstring.c"
                 line="495">location to store a boolean indicating
            whether the user clicked on the leading or trailing
            edge of the character.</doc>
            <type name="gint" c:type="int*"/>
          </parameter>
        </parameters>
      </method>
    </record>
    <record name="GlyphVisAttr" c:type="PangoGlyphVisAttr">
      <doc xml:space="preserve"
           filename="../pango/pango-glyph.h"
           line="69">The PangoGlyphVisAttr is used to communicate information between
the shaping phase and the rendering phase.  More attributes may be
added in the future.</doc>
      <source-position filename="../pango/pango-glyph.h" line="84"/>
      <field name="is_cluster_start" writable="1" bits="1">
        <doc xml:space="preserve"
             filename="../pango/pango-glyph.h"
             line="71">set for the first logical glyph in each cluster. (Clusters
are stored in visual order, within the cluster, glyphs
are always ordered in logical order, since visual
order is meaningless; that is, in Arabic text, accent glyphs
follow the glyphs for the base character.)</doc>
        <type name="guint" c:type="guint"/>
      </field>
    </record>
    <enumeration name="Gravity"
                 version="1.16"
                 glib:type-name="PangoGravity"
                 glib:get-type="pango_gravity_get_type"
                 c:type="PangoGravity">
      <doc xml:space="preserve"
           filename="../pango/pango-gravity.h"
           line="29">The #PangoGravity type represents the orientation of glyphs in a segment
of text.  This is useful when rendering vertical text layouts.  In
those situations, the layout is rotated using a non-identity PangoMatrix,
and then glyph orientation is controlled using #PangoGravity.
Not every value in this enumeration makes sense for every usage of
#PangoGravity; for example, %PANGO_GRAVITY_AUTO only can be passed to
pango_context_set_base_gravity() and can only be returned by
pango_context_get_base_gravity().

See also: #PangoGravityHint</doc>
      <member name="south"
              value="0"
              c:identifier="PANGO_GRAVITY_SOUTH"
              glib:nick="south">
        <doc xml:space="preserve"
             filename="../pango/pango-gravity.h"
             line="31">Glyphs stand upright (default)</doc>
      </member>
      <member name="east"
              value="1"
              c:identifier="PANGO_GRAVITY_EAST"
              glib:nick="east">
        <doc xml:space="preserve"
             filename="../pango/pango-gravity.h"
             line="32">Glyphs are rotated 90 degrees clockwise</doc>
      </member>
      <member name="north"
              value="2"
              c:identifier="PANGO_GRAVITY_NORTH"
              glib:nick="north">
        <doc xml:space="preserve"
             filename="../pango/pango-gravity.h"
             line="33">Glyphs are upside-down</doc>
      </member>
      <member name="west"
              value="3"
              c:identifier="PANGO_GRAVITY_WEST"
              glib:nick="west">
        <doc xml:space="preserve"
             filename="../pango/pango-gravity.h"
             line="34">Glyphs are rotated 90 degrees counter-clockwise</doc>
      </member>
      <member name="auto"
              value="4"
              c:identifier="PANGO_GRAVITY_AUTO"
              glib:nick="auto">
        <doc xml:space="preserve"
             filename="../pango/pango-gravity.h"
             line="35">Gravity is resolved from the context matrix</doc>
      </member>
      <function name="get_for_matrix"
                c:identifier="pango_gravity_get_for_matrix"
                version="1.16">
        <doc xml:space="preserve"
             filename="../pango/pango-gravity.c"
             line="121">Finds the gravity that best matches the rotation component
in a #PangoMatrix.</doc>
        <source-position filename="../pango/pango-gravity.h" line="117"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../pango/pango-gravity.c"
               line="128">the gravity of @matrix, which will never be
%PANGO_GRAVITY_AUTO, or %PANGO_GRAVITY_SOUTH if @matrix is %NULL</doc>
          <type name="Gravity" c:type="PangoGravity"/>
        </return-value>
        <parameters>
          <parameter name="matrix"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../pango/pango-gravity.c"
                 line="123">a #PangoMatrix</doc>
            <type name="Matrix" c:type="const PangoMatrix*"/>
          </parameter>
        </parameters>
      </function>
      <function name="get_for_script"
                c:identifier="pango_gravity_get_for_script"
                version="1.16">
        <doc xml:space="preserve"
             filename="../pango/pango-gravity.c"
             line="292">Based on the script, base gravity, and hint, returns actual gravity
to use in laying out a single #PangoItem.

If @base_gravity is %PANGO_GRAVITY_AUTO, it is first replaced with the
preferred gravity of @script.  To get the preferred gravity of a script,
pass %PANGO_GRAVITY_AUTO and %PANGO_GRAVITY_HINT_STRONG in.</doc>
        <source-position filename="../pango/pango-gravity.h" line="119"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../pango/pango-gravity.c"
               line="305">resolved gravity suitable to use for a run of text
with @script.</doc>
          <type name="Gravity" c:type="PangoGravity"/>
        </return-value>
        <parameters>
          <parameter name="script" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-gravity.c"
                 line="294">#PangoScript to query</doc>
            <type name="Script" c:type="PangoScript"/>
          </parameter>
          <parameter name="base_gravity" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-gravity.c"
                 line="295">base gravity of the paragraph</doc>
            <type name="Gravity" c:type="PangoGravity"/>
          </parameter>
          <parameter name="hint" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-gravity.c"
                 line="296">orientation hint</doc>
            <type name="GravityHint" c:type="PangoGravityHint"/>
          </parameter>
        </parameters>
      </function>
      <function name="get_for_script_and_width"
                c:identifier="pango_gravity_get_for_script_and_width"
                version="1.26">
        <doc xml:space="preserve"
             filename="../pango/pango-gravity.c"
             line="324">Based on the script, East Asian width, base gravity, and hint,
returns actual gravity to use in laying out a single character
or #PangoItem.

This function is similar to pango_gravity_get_for_script() except
that this function makes a distinction between narrow/half-width and
wide/full-width characters also.  Wide/full-width characters always
stand &lt;emphasis&gt;upright&lt;/emphasis&gt;, that is, they always take the base gravity,
whereas narrow/full-width characters are always rotated in vertical
context.

If @base_gravity is %PANGO_GRAVITY_AUTO, it is first replaced with the
preferred gravity of @script.</doc>
        <source-position filename="../pango/pango-gravity.h" line="123"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../pango/pango-gravity.c"
               line="345">resolved gravity suitable to use for a run of text
with @script and @wide.</doc>
          <type name="Gravity" c:type="PangoGravity"/>
        </return-value>
        <parameters>
          <parameter name="script" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-gravity.c"
                 line="326">#PangoScript to query</doc>
            <type name="Script" c:type="PangoScript"/>
          </parameter>
          <parameter name="wide" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-gravity.c"
                 line="327">%TRUE for wide characters as returned by g_unichar_iswide()</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="base_gravity" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-gravity.c"
                 line="328">base gravity of the paragraph</doc>
            <type name="Gravity" c:type="PangoGravity"/>
          </parameter>
          <parameter name="hint" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-gravity.c"
                 line="329">orientation hint</doc>
            <type name="GravityHint" c:type="PangoGravityHint"/>
          </parameter>
        </parameters>
      </function>
      <function name="to_rotation"
                c:identifier="pango_gravity_to_rotation"
                version="1.16">
        <doc xml:space="preserve"
             filename="../pango/pango-gravity.c"
             line="86">Converts a #PangoGravity value to its natural rotation in radians.
@gravity should not be %PANGO_GRAVITY_AUTO.

Note that pango_matrix_rotate() takes angle in degrees, not radians.
So, to call pango_matrix_rotate() with the output of this function
you should multiply it by (180. / G_PI).</doc>
        <source-position filename="../pango/pango-gravity.h" line="115"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../pango/pango-gravity.c"
               line="97">the rotation value corresponding to @gravity.</doc>
          <type name="gdouble" c:type="double"/>
        </return-value>
        <parameters>
          <parameter name="gravity" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-gravity.c"
                 line="88">gravity to query</doc>
            <type name="Gravity" c:type="PangoGravity"/>
          </parameter>
        </parameters>
      </function>
    </enumeration>
    <enumeration name="GravityHint"
                 version="1.16"
                 glib:type-name="PangoGravityHint"
                 glib:get-type="pango_gravity_hint_get_type"
                 c:type="PangoGravityHint">
      <doc xml:space="preserve"
           filename="../pango/pango-gravity.h"
           line="58">The #PangoGravityHint defines how horizontal scripts should behave in a
vertical context.  That is, English excerpt in a vertical paragraph for
example.

See #PangoGravity.</doc>
      <member name="natural"
              value="0"
              c:identifier="PANGO_GRAVITY_HINT_NATURAL"
              glib:nick="natural">
        <doc xml:space="preserve"
             filename="../pango/pango-gravity.h"
             line="60">scripts will take their natural gravity based
on the base gravity and the script.  This is the default.</doc>
      </member>
      <member name="strong"
              value="1"
              c:identifier="PANGO_GRAVITY_HINT_STRONG"
              glib:nick="strong">
        <doc xml:space="preserve"
             filename="../pango/pango-gravity.h"
             line="62">always use the base gravity set, regardless of
the script.</doc>
      </member>
      <member name="line"
              value="2"
              c:identifier="PANGO_GRAVITY_HINT_LINE"
              glib:nick="line">
        <doc xml:space="preserve"
             filename="../pango/pango-gravity.h"
             line="64">for scripts not in their natural direction (eg.
Latin in East gravity), choose per-script gravity such that every script
respects the line progression.  This means, Latin and Arabic will take
opposite gravities and both flow top-to-bottom for example.</doc>
      </member>
    </enumeration>
    <function-macro name="IS_CONTEXT"
                    c:identifier="PANGO_IS_CONTEXT"
                    introspectable="0">
      <source-position filename="../pango/pango-context.h" line="42"/>
      <parameters>
        <parameter name="object">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_CONTEXT_CLASS"
                    c:identifier="PANGO_IS_CONTEXT_CLASS"
                    introspectable="0">
      <source-position filename="../pango/pango-context.h" line="43"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_ENGINE"
                    c:identifier="PANGO_IS_ENGINE"
                    introspectable="0">
      <source-position filename="../pango/pango-engine.h" line="47"/>
      <parameters>
        <parameter name="object">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_ENGINE_CLASS"
                    c:identifier="PANGO_IS_ENGINE_CLASS"
                    introspectable="0">
      <source-position filename="../pango/pango-engine.h" line="49"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_ENGINE_LANG"
                    c:identifier="PANGO_IS_ENGINE_LANG"
                    introspectable="0">
      <source-position filename="../pango/pango-engine.h" line="97"/>
      <parameters>
        <parameter name="object">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_ENGINE_LANG_CLASS"
                    c:identifier="PANGO_IS_ENGINE_LANG_CLASS"
                    introspectable="0">
      <source-position filename="../pango/pango-engine.h" line="99"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_ENGINE_SHAPE"
                    c:identifier="PANGO_IS_ENGINE_SHAPE"
                    introspectable="0">
      <source-position filename="../pango/pango-engine.h" line="164"/>
      <parameters>
        <parameter name="object">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_ENGINE_SHAPE_CLASS"
                    c:identifier="PANGO_IS_ENGINE_SHAPE_CLASS"
                    introspectable="0">
      <source-position filename="../pango/pango-engine.h" line="166"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_FONT"
                    c:identifier="PANGO_IS_FONT"
                    introspectable="0">
      <source-position filename="../pango/pango-font.h" line="569"/>
      <parameters>
        <parameter name="object">
          <doc xml:space="preserve"
               filename="../pango/pango-font.h"
               line="563">a #GObject.</doc>
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_FONTSET"
                    c:identifier="PANGO_IS_FONTSET"
                    introspectable="0">
      <source-position filename="../pango/pango-fontset.h" line="43"/>
      <parameters>
        <parameter name="object">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_FONTSET_CLASS"
                    c:identifier="PANGO_IS_FONTSET_CLASS"
                    introspectable="0">
      <source-position filename="../pango/pango-fontset.h" line="45"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_FONTSET_SIMPLE"
                    c:identifier="PANGO_IS_FONTSET_SIMPLE"
                    introspectable="0">
      <source-position filename="../pango/pango-fontset.h" line="140"/>
      <parameters>
        <parameter name="object">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_FONT_CLASS"
                    c:identifier="PANGO_IS_FONT_CLASS"
                    introspectable="0">
      <source-position filename="../pango/pango-font.h" line="571"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_FONT_FACE"
                    c:identifier="PANGO_IS_FONT_FACE"
                    introspectable="0">
      <source-position filename="../pango/pango-font.h" line="485"/>
      <parameters>
        <parameter name="object">
          <doc xml:space="preserve"
               filename="../pango/pango-font.h"
               line="479">a #GObject.</doc>
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_FONT_FACE_CLASS"
                    c:identifier="PANGO_IS_FONT_FACE_CLASS"
                    introspectable="0">
      <source-position filename="../pango/pango-font.h" line="487"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_FONT_FAMILY"
                    c:identifier="PANGO_IS_FONT_FAMILY"
                    introspectable="0">
      <source-position filename="../pango/pango-font.h" line="395"/>
      <parameters>
        <parameter name="object">
          <doc xml:space="preserve"
               filename="../pango/pango-font.h"
               line="389">a #GObject.</doc>
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_FONT_FAMILY_CLASS"
                    c:identifier="PANGO_IS_FONT_FAMILY_CLASS"
                    introspectable="0">
      <source-position filename="../pango/pango-font.h" line="397"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_FONT_MAP"
                    c:identifier="PANGO_IS_FONT_MAP"
                    introspectable="0">
      <source-position filename="../pango/pango-fontmap.h" line="49"/>
      <parameters>
        <parameter name="object">
          <doc xml:space="preserve"
               filename="../pango/pango-fontmap.h"
               line="43">a #GObject.</doc>
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_FONT_MAP_CLASS"
                    c:identifier="PANGO_IS_FONT_MAP_CLASS"
                    introspectable="0">
      <source-position filename="../pango/pango-fontmap.h" line="51"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_LAYOUT"
                    c:identifier="PANGO_IS_LAYOUT"
                    introspectable="0">
      <source-position filename="../pango/pango-layout.h" line="129"/>
      <parameters>
        <parameter name="object">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_LAYOUT_CLASS"
                    c:identifier="PANGO_IS_LAYOUT_CLASS"
                    introspectable="0">
      <source-position filename="../pango/pango-layout.h" line="130"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_RENDERER"
                    c:identifier="PANGO_IS_RENDERER"
                    introspectable="0">
      <source-position filename="../pango/pango-renderer.h" line="30"/>
      <parameters>
        <parameter name="object">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_RENDERER_CLASS"
                    c:identifier="PANGO_IS_RENDERER_CLASS"
                    introspectable="0">
      <source-position filename="../pango/pango-renderer.h" line="32"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <record name="IncludedModule"
            c:type="PangoIncludedModule"
            deprecated="1"
            deprecated-version="1.38">
      <doc xml:space="preserve"
           filename="../pango/pango-modules.h"
           line="36">The #PangoIncludedModule structure for a statically linked module
contains the functions that would otherwise be loaded from a dynamically
loaded module.</doc>
      <source-position filename="../pango/pango-modules.h" line="56"/>
      <field name="list">
        <callback name="list">
          <source-position filename="../pango/pango-modules.h" line="51"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="engines" transfer-ownership="none">
              <type name="EngineInfo" c:type="PangoEngineInfo**"/>
            </parameter>
            <parameter name="n_engines" transfer-ownership="none">
              <type name="gint" c:type="int*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="init">
        <callback name="init">
          <source-position filename="../pango/pango-modules.h" line="53"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="module" transfer-ownership="none">
              <type name="GObject.TypeModule" c:type="GTypeModule*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="exit">
        <callback name="exit">
          <source-position filename="../pango/pango-modules.h" line="54"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="create" introspectable="0">
        <callback name="create" introspectable="0">
          <source-position filename="../pango/pango-modules.h" line="55"/>
          <return-value>
            <type name="Engine" c:type="PangoEngine*"/>
          </return-value>
          <parameters>
            <parameter name="id" transfer-ownership="none">
              <type name="utf8" c:type="const char*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <record name="Item"
            c:type="PangoItem"
            glib:type-name="PangoItem"
            glib:get-type="pango_item_get_type"
            c:symbol-prefix="item">
      <doc xml:space="preserve"
           filename="../pango/pango-item.h"
           line="94">The #PangoItem structure stores information about a segment of text.</doc>
      <source-position filename="../pango/pango-item.h" line="109"/>
      <field name="offset" writable="1">
        <doc xml:space="preserve"
             filename="../pango/pango-item.h"
             line="96">byte offset of the start of this item in text.</doc>
        <type name="gint" c:type="gint"/>
      </field>
      <field name="length" writable="1">
        <doc xml:space="preserve"
             filename="../pango/pango-item.h"
             line="97">length of this item in bytes.</doc>
        <type name="gint" c:type="gint"/>
      </field>
      <field name="num_chars" writable="1">
        <doc xml:space="preserve"
             filename="../pango/pango-item.h"
             line="98">number of Unicode characters in the item.</doc>
        <type name="gint" c:type="gint"/>
      </field>
      <field name="analysis" writable="1">
        <doc xml:space="preserve"
             filename="../pango/pango-item.h"
             line="99">analysis results for the item.</doc>
        <type name="Analysis" c:type="PangoAnalysis"/>
      </field>
      <constructor name="new" c:identifier="pango_item_new">
        <doc xml:space="preserve"
             filename="../pango/pango-item.c"
             line="27">Creates a new #PangoItem structure initialized to default values.</doc>
        <source-position filename="../pango/pango-item.h" line="117"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../pango/pango-item.c"
               line="32">the newly allocated #PangoItem, which should
              be freed with pango_item_free().</doc>
          <type name="Item" c:type="PangoItem*"/>
        </return-value>
      </constructor>
      <method name="apply_attrs"
              c:identifier="pango_item_apply_attrs"
              version="1.44">
        <doc xml:space="preserve"
             filename="../pango/pango-item.c"
             line="170">Add attributes to a PangoItem. The idea is that you have
attributes that don't affect itemization, such as font features,
so you filter them out using pango_attr_list_filter(), itemize
your text, then reapply the attributes to the resulting items
using this function.

The @iter should be positioned before the range of the item,
and will be advanced past it. This function is meant to be called
in a loop over the items resulting from itemization, while passing
the iter to each call.</doc>
        <source-position filename="../pango/pango-item.h" line="127"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="item" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-item.c"
                 line="172">a #PangoItem</doc>
            <type name="Item" c:type="PangoItem*"/>
          </instance-parameter>
          <parameter name="iter" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-item.c"
                 line="173">a #PangoAttrIterator</doc>
            <type name="AttrIterator" c:type="PangoAttrIterator*"/>
          </parameter>
        </parameters>
      </method>
      <method name="copy" c:identifier="pango_item_copy">
        <doc xml:space="preserve"
             filename="../pango/pango-item.c"
             line="43">Copy an existing #PangoItem structure.</doc>
        <source-position filename="../pango/pango-item.h" line="119"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="../pango/pango-item.c"
               line="49">the newly allocated #PangoItem, which
              should be freed with pango_item_free(), or %NULL if
              @item was %NULL.</doc>
          <type name="Item" c:type="PangoItem*"/>
        </return-value>
        <parameters>
          <instance-parameter name="item"
                              transfer-ownership="none"
                              nullable="1"
                              allow-none="1">
            <doc xml:space="preserve"
                 filename="../pango/pango-item.c"
                 line="45">a #PangoItem, may be %NULL</doc>
            <type name="Item" c:type="PangoItem*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="free" c:identifier="pango_item_free">
        <doc xml:space="preserve"
             filename="../pango/pango-item.c"
             line="85">Free a #PangoItem and all associated memory.</doc>
        <source-position filename="../pango/pango-item.h" line="121"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="item"
                              transfer-ownership="none"
                              nullable="1"
                              allow-none="1">
            <doc xml:space="preserve"
                 filename="../pango/pango-item.c"
                 line="87">a #PangoItem, may be %NULL</doc>
            <type name="Item" c:type="PangoItem*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="split" c:identifier="pango_item_split">
        <doc xml:space="preserve"
             filename="../pango/pango-item.c"
             line="113">Modifies @orig to cover only the text after @split_index, and
returns a new item that covers the text before @split_index that
used to be in @orig. You can think of @split_index as the length of
the returned item. @split_index may not be 0, and it may not be
greater than or equal to the length of @orig (that is, there must
be at least one byte assigned to each item, you can't create a
zero-length item). @split_offset is the length of the first item in
chars, and must be provided because the text used to generate the
item isn't available, so pango_item_split() can't count the char
length of the split items itself.</doc>
        <source-position filename="../pango/pango-item.h" line="123"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../pango/pango-item.c"
               line="130">new item representing text before @split_index, which
              should be freed with pango_item_free().</doc>
          <type name="Item" c:type="PangoItem*"/>
        </return-value>
        <parameters>
          <instance-parameter name="orig" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-item.c"
                 line="115">a #PangoItem</doc>
            <type name="Item" c:type="PangoItem*"/>
          </instance-parameter>
          <parameter name="split_index" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-item.c"
                 line="116">byte index of position to split item, relative to the start of the item</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="split_offset" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-item.c"
                 line="117">number of chars between start of @orig and @split_index</doc>
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </method>
    </record>
    <function-macro name="LAYOUT"
                    c:identifier="PANGO_LAYOUT"
                    introspectable="0">
      <source-position filename="../pango/pango-layout.h" line="127"/>
      <parameters>
        <parameter name="object">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="LAYOUT_CLASS"
                    c:identifier="PANGO_LAYOUT_CLASS"
                    introspectable="0">
      <source-position filename="../pango/pango-layout.h" line="128"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="LAYOUT_GET_CLASS"
                    c:identifier="PANGO_LAYOUT_GET_CLASS"
                    introspectable="0">
      <source-position filename="../pango/pango-layout.h" line="131"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="LBEARING"
                    c:identifier="PANGO_LBEARING"
                    introspectable="0">
      <doc xml:space="preserve"
           filename="../pango/pango-types.h"
           line="166">Extracts the &lt;firstterm&gt;left bearing&lt;/firstterm&gt; from a #PangoRectangle
representing glyph extents. The left bearing is the distance from the
horizontal origin to the farthest left point of the character.
This is positive for characters drawn completely to the right of the
glyph origin.</doc>
      <source-position filename="../pango/pango-types.h" line="188"/>
      <parameters>
        <parameter name="rect">
          <doc xml:space="preserve"
               filename="../pango/pango-types.h"
               line="168">a #PangoRectangle</doc>
        </parameter>
      </parameters>
    </function-macro>
    <record name="Language"
            c:type="PangoLanguage"
            glib:type-name="PangoLanguage"
            glib:get-type="pango_language_get_type"
            c:symbol-prefix="language">
      <doc xml:space="preserve"
           filename="../pango/pango-language.c"
           line="136">The #PangoLanguage structure is used to
represent a language.

#PangoLanguage pointers can be efficiently
copied and compared with each other.</doc>
      <source-position filename="../pango/pango-language.h" line="32"/>
      <method name="get_sample_string"
              c:identifier="pango_language_get_sample_string">
        <doc xml:space="preserve"
             filename="../pango/pango-language.c"
             line="562">Get a string that is representative of the characters needed to
render a particular language.

The sample text may be a pangram, but is not necessarily.  It is chosen to
be demonstrative of normal text in the language, as well as exposing font
feature requirements unique to the language.  It is suitable for use
as sample text in a font selection dialog.

If @language is %NULL, the default language as found by
pango_language_get_default() is used.

If Pango does not have a sample string for @language, the classic
"The quick brown fox..." is returned.  This can be detected by
comparing the returned pointer value to that returned for (non-existent)
language code "xx".  That is, compare to:
&lt;informalexample&gt;&lt;programlisting&gt;
pango_language_get_sample_string (pango_language_from_string ("xx"))
&lt;/programlisting&gt;&lt;/informalexample&gt;</doc>
        <source-position filename="../pango/pango-language.h" line="52"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../pango/pango-language.c"
               line="585">the sample string. This value is owned by Pango
  and should not be freed.</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="language"
                              transfer-ownership="none"
                              nullable="1"
                              allow-none="1">
            <doc xml:space="preserve"
                 filename="../pango/pango-language.c"
                 line="564">a #PangoLanguage, or %NULL</doc>
            <type name="Language" c:type="PangoLanguage*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_scripts"
              c:identifier="pango_language_get_scripts"
              version="1.22">
        <doc xml:space="preserve"
             filename="../pango/pango-language.c"
             line="616">Determines the scripts used to to write @language.
If nothing is known about the language tag @language,
or if @language is %NULL, then %NULL is returned.
The list of scripts returned starts with the script that the
language uses most and continues to the one it uses least.

The value @num_script points at will be set to the number
of scripts in the returned array (or zero if %NULL is returned).

Most languages use only one script for writing, but there are
some that use two (Latin and Cyrillic for example), and a few
use three (Japanese for example).  Applications should not make
any assumptions on the maximum number of scripts returned
though, except that it is positive if the return value is not
%NULL, and it is a small number.

The pango_language_includes_script() function uses this function
internally.

Note: while the return value is declared as PangoScript, the
returned values are from the GUnicodeScript enumeration, which
may have more values. Callers need to handle unknown values.</doc>
        <source-position filename="../pango/pango-language.h" line="69"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="../pango/pango-language.c"
               line="645">An array of
#PangoScript values, with the number of entries in the array stored
in @num_scripts, or %NULL if Pango does not have any information
about this particular language tag (also the case if @language is
%NULL).  The returned array is owned by Pango and should not be
modified or freed.</doc>
          <array length="0" zero-terminated="0" c:type="const PangoScript*">
            <type name="Script" c:type="PangoScript"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="language"
                              transfer-ownership="none"
                              nullable="1"
                              allow-none="1">
            <doc xml:space="preserve"
                 filename="../pango/pango-language.c"
                 line="618">a #PangoLanguage, or %NULL</doc>
            <type name="Language" c:type="PangoLanguage*"/>
          </instance-parameter>
          <parameter name="num_scripts"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../pango/pango-language.c"
                 line="619">location to return number of scripts,
           or %NULL</doc>
            <type name="gint" c:type="int*"/>
          </parameter>
        </parameters>
      </method>
      <method name="includes_script"
              c:identifier="pango_language_includes_script"
              version="1.4">
        <doc xml:space="preserve"
             filename="../pango/pango-language.c"
             line="687">Determines if @script is one of the scripts used to
write @language. The returned value is conservative;
if nothing is known about the language tag @language,
%TRUE will be returned, since, as far as Pango knows,
@script might be used to write @language.

This routine is used in Pango's itemization process when
determining if a supplied language tag is relevant to
a particular section of text. It probably is not useful for
applications in most circumstances.

This function uses pango_language_get_scripts() internally.</doc>
        <source-position filename="../pango/pango-language.h" line="66"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../pango/pango-language.c"
               line="705">%TRUE if @script is one of the scripts used
to write @language or if nothing is known about @language
(including the case that @language is %NULL),
%FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="language"
                              transfer-ownership="none"
                              nullable="1"
                              allow-none="1">
            <doc xml:space="preserve"
                 filename="../pango/pango-language.c"
                 line="689">a #PangoLanguage, or %NULL</doc>
            <type name="Language" c:type="PangoLanguage*"/>
          </instance-parameter>
          <parameter name="script" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-language.c"
                 line="690">a #PangoScript</doc>
            <type name="Script" c:type="PangoScript"/>
          </parameter>
        </parameters>
      </method>
      <method name="matches" c:identifier="pango_language_matches">
        <doc xml:space="preserve"
             filename="../pango/pango-language.c"
             line="388">Checks if a language tag matches one of the elements in a list of
language ranges. A language tag is considered to match a range
in the list if the range is '*', the range is exactly the tag,
or the range is a prefix of the tag, and the character after it
in the tag is '-'.</doc>
        <source-position filename="../pango/pango-language.h" line="60"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../pango/pango-language.c"
               line="403">%TRUE if a match was found.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="language"
                              transfer-ownership="none"
                              nullable="1"
                              allow-none="1">
            <doc xml:space="preserve"
                 filename="../pango/pango-language.c"
                 line="390">a language tag (see pango_language_from_string()),
           %NULL is allowed and matches nothing but '*'</doc>
            <type name="Language" c:type="PangoLanguage*"/>
          </instance-parameter>
          <parameter name="range_list" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-language.c"
                 line="392">a list of language ranges, separated by ';', ':',
  ',', or space characters.
  Each element must either be '*', or a RFC 3066 language range
  canonicalized as by pango_language_from_string()</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="to_string" c:identifier="pango_language_to_string">
        <doc xml:space="preserve"
             filename="../pango/pango-language.c"
             line="373">Gets the RFC-3066 format string representing the given language tag.</doc>
        <source-position filename="../pango/pango-language.h" line="47"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../pango/pango-language.c"
               line="379">a string representing the language tag.  This is owned by
         Pango and should not be freed.</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="language" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-language.c"
                 line="375">a language tag.</doc>
            <type name="Language" c:type="PangoLanguage*"/>
          </instance-parameter>
        </parameters>
      </method>
      <function name="from_string" c:identifier="pango_language_from_string">
        <doc xml:space="preserve"
             filename="../pango/pango-language.c"
             line="307">Take a RFC-3066 format language tag as a string and convert it to a
#PangoLanguage pointer that can be efficiently copied (copy the
pointer) and compared with other language tags (compare the
pointer.)

This function first canonicalizes the string by converting it to
lowercase, mapping '_' to '-', and stripping all characters other
than letters and '-'.

Use pango_language_get_default() if you want to get the #PangoLanguage for
the current locale of the process.</doc>
        <source-position filename="../pango/pango-language.h" line="44"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="../pango/pango-language.c"
               line="323">an opaque pointer to a
              #PangoLanguage structure, or %NULL if @language was
              %NULL.  The returned pointer will be valid forever
              after, and should not be freed.</doc>
          <type name="Language" c:type="PangoLanguage*"/>
        </return-value>
        <parameters>
          <parameter name="language"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../pango/pango-language.c"
                 line="309">a string representing a language tag, or %NULL</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </function>
      <function name="get_default"
                c:identifier="pango_language_get_default"
                version="1.16">
        <doc xml:space="preserve"
             filename="../pango/pango-language.c"
             line="252">Returns the #PangoLanguage for the current locale of the process.
Note that this can change over the life of an application.

On Unix systems, this is the return value is derived from
&lt;literal&gt;setlocale(LC_CTYPE, NULL)&lt;/literal&gt;, and the user can
affect this through the environment variables LC_ALL, LC_CTYPE or
LANG (checked in that order). The locale string typically is in
the form lang_COUNTRY, where lang is an ISO-639 language code, and
COUNTRY is an ISO-3166 country code. For instance, sv_FI for
Swedish as written in Finland or pt_BR for Portuguese as written in
Brazil.

On Windows, the C library does not use any such environment
variables, and setting them won't affect the behavior of functions
like ctime(). The user sets the locale through the Regional Options
in the Control Panel. The C library (in the setlocale() function)
does not use country and language codes, but country and language
names spelled out in English.
However, this function does check the above environment
variables, and does return a Unix-style locale string based on
either said environment variables or the thread's current locale.

Your application should call &lt;literal&gt;setlocale(LC_ALL, "");&lt;/literal&gt;
for the user settings to take effect.  Gtk+ does this in its initialization
functions automatically (by calling gtk_set_locale()).
See &lt;literal&gt;man setlocale&lt;/literal&gt; for more details.</doc>
        <source-position filename="../pango/pango-language.h" line="54"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../pango/pango-language.c"
               line="282">the default language as a
              #PangoLanguage, must not be freed.</doc>
          <type name="Language" c:type="PangoLanguage*"/>
        </return-value>
      </function>
      <function name="get_preferred"
                c:identifier="pango_language_get_preferred"
                version="1.48">
        <doc xml:space="preserve"
             filename="../pango/pango-language.c"
             line="838">Returns the list of languages that the user prefers, as specified
by the PANGO_LANGUAGE or LANGUAGE environment variables, in order
of preference. Note that this list does not necessarily include
the language returned by pango_language_get_default().

When choosing language-specific resources, such as the sample
text returned by pango_language_get_sample_string(), you should
first try the default language, followed by the languages returned
by this function.</doc>
        <source-position filename="../pango/pango-language.h" line="57"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="../pango/pango-language.c"
               line="851">a %NULL-terminated array of
   PangoLanguage*</doc>
          <type name="Language" c:type="PangoLanguage**"/>
        </return-value>
      </function>
    </record>
    <class name="Layout"
           c:symbol-prefix="layout"
           c:type="PangoLayout"
           parent="GObject.Object"
           glib:type-name="PangoLayout"
           glib:get-type="pango_layout_get_type"
           glib:type-struct="LayoutClass">
      <doc xml:space="preserve"
           filename="../pango/pango-layout.c"
           line="36">The #PangoLayout structure represents an entire paragraph
of text. It is initialized with a #PangoContext, UTF-8 string
and set of attributes for that string. Once that is done, the
set of formatted lines can be extracted from the object,
the layout can be rendered, and conversion between logical
character positions within the layout's text, and the physical
position of the resulting glyphs can be made.

There are also a number of parameters to adjust the formatting
of a #PangoLayout, which are illustrated in &lt;xref linkend="parameters"/&gt;.
It is possible, as well, to ignore the 2-D setup, and simply
treat the results of a #PangoLayout as a list of lines.

&lt;figure id="parameters"&gt;
&lt;title&gt;Adjustable parameters (on the left) and font metrics (on the right) for a PangoLayout&lt;/title&gt;
&lt;graphic fileref="layout.png" format="PNG"&gt;&lt;/graphic&gt;
&lt;/figure&gt;

The #PangoLayout structure is opaque, and has no user-visible
fields.</doc>
      <source-position filename="../pango/pango-layout.h" line="33"/>
      <constructor name="new" c:identifier="pango_layout_new">
        <doc xml:space="preserve"
             filename="../pango/pango-layout.c"
             line="261">Create a new #PangoLayout object with attributes initialized to
default values for a particular #PangoContext.</doc>
        <source-position filename="../pango/pango-layout.h" line="140"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../pango/pango-layout.c"
               line="268">the newly allocated #PangoLayout, with a reference
              count of one, which should be freed with
              g_object_unref().</doc>
          <type name="Layout" c:type="PangoLayout*"/>
        </return-value>
        <parameters>
          <parameter name="context" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-layout.c"
                 line="263">a #PangoContext</doc>
            <type name="Context" c:type="PangoContext*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="context_changed"
              c:identifier="pango_layout_context_changed">
        <doc xml:space="preserve"
             filename="../pango/pango-layout.c"
             line="1377">Forces recomputation of any state in the #PangoLayout that
might depend on the layout's context. This function should
be called if you make changes to the context subsequent
to creating the layout.</doc>
        <source-position filename="../pango/pango-layout.h" line="258"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="layout" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-layout.c"
                 line="1379">a #PangoLayout</doc>
            <type name="Layout" c:type="PangoLayout*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="copy" c:identifier="pango_layout_copy">
        <doc xml:space="preserve"
             filename="../pango/pango-layout.c"
             line="288">Does a deep copy-by-value of the @src layout. The attribute list,
tab array, and text from the original layout are all copied by
value.</doc>
        <source-position filename="../pango/pango-layout.h" line="142"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../pango/pango-layout.c"
               line="296">the newly allocated #PangoLayout,
              with a reference count of one, which should be freed
              with g_object_unref().</doc>
          <type name="Layout" c:type="PangoLayout*"/>
        </return-value>
        <parameters>
          <instance-parameter name="src" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-layout.c"
                 line="290">a #PangoLayout</doc>
            <type name="Layout" c:type="PangoLayout*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_alignment" c:identifier="pango_layout_get_alignment">
        <doc xml:space="preserve"
             filename="../pango/pango-layout.c"
             line="907">Gets the alignment for the layout: how partial lines are
positioned within the horizontal space available.</doc>
        <source-position filename="../pango/pango-layout.h" line="228"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../pango/pango-layout.c"
               line="914">the alignment.</doc>
          <type name="Alignment" c:type="PangoAlignment"/>
        </return-value>
        <parameters>
          <instance-parameter name="layout" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-layout.c"
                 line="909">a #PangoLayout</doc>
            <type name="Layout" c:type="PangoLayout*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_attributes" c:identifier="pango_layout_get_attributes">
        <doc xml:space="preserve"
             filename="../pango/pango-layout.c"
             line="713">Gets the attribute list for the layout, if any.</doc>
        <source-position filename="../pango/pango-layout.h" line="151"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="../pango/pango-layout.c"
               line="719">a #PangoAttrList or %NULL
  if none was set.</doc>
          <type name="AttrList" c:type="PangoAttrList*"/>
        </return-value>
        <parameters>
          <instance-parameter name="layout" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-layout.c"
                 line="715">a #PangoLayout</doc>
            <type name="Layout" c:type="PangoLayout*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_auto_dir"
              c:identifier="pango_layout_get_auto_dir"
              version="1.4">
        <doc xml:space="preserve"
             filename="../pango/pango-layout.c"
             line="865">Gets whether to calculate the bidirectional base direction
for the layout according to the contents of the layout.
See pango_layout_set_auto_dir().</doc>
        <source-position filename="../pango/pango-layout.h" line="223"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../pango/pango-layout.c"
               line="873">%TRUE if the bidirectional base direction
  is computed from the layout's contents, %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="layout" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-layout.c"
                 line="867">a #PangoLayout</doc>
            <type name="Layout" c:type="PangoLayout*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_baseline"
              c:identifier="pango_layout_get_baseline"
              version="1.22">
        <doc xml:space="preserve"
             filename="../pango/pango-layout.c"
             line="2962">Gets the Y position of baseline of the first line in @layout.</doc>
        <source-position filename="../pango/pango-layout.h" line="317"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../pango/pango-layout.c"
               line="2968">baseline of first line, from top of @layout.</doc>
          <type name="gint" c:type="int"/>
        </return-value>
        <parameters>
          <instance-parameter name="layout" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-layout.c"
                 line="2964">a #PangoLayout</doc>
            <type name="Layout" c:type="PangoLayout*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_character_count"
              c:identifier="pango_layout_get_character_count"
              version="1.30">
        <doc xml:space="preserve"
             filename="../pango/pango-layout.c"
             line="1205">Returns the number of Unicode characters in the
the text of @layout.</doc>
        <source-position filename="../pango/pango-layout.h" line="161"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../pango/pango-layout.c"
               line="1212">the number of Unicode characters
    in the text of @layout</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="layout" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-layout.c"
                 line="1207">a #PangoLayout</doc>
            <type name="Layout" c:type="PangoLayout*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_context" c:identifier="pango_layout_get_context">
        <doc xml:space="preserve"
             filename="../pango/pango-layout.c"
             line="327">Retrieves the #PangoContext used for this layout.</doc>
        <source-position filename="../pango/pango-layout.h" line="145"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../pango/pango-layout.c"
               line="333">the #PangoContext for the layout.
This does not have an additional refcount added, so if you want to
keep a copy of this around, you must reference it yourself.</doc>
          <type name="Context" c:type="PangoContext*"/>
        </return-value>
        <parameters>
          <instance-parameter name="layout" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-layout.c"
                 line="329">a #PangoLayout</doc>
            <type name="Layout" c:type="PangoLayout*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_cursor_pos" c:identifier="pango_layout_get_cursor_pos">
        <doc xml:space="preserve"
             filename="../pango/pango-layout.c"
             line="2408">Given an index within a layout, determines the positions that of the
strong and weak cursors if the insertion point is at that
index. The position of each cursor is stored as a zero-width
rectangle. The strong cursor location is the location where
characters of the directionality equal to the base direction of the
layout are inserted.  The weak cursor location is the location
where characters of the directionality opposite to the base
direction of the layout are inserted.</doc>
        <source-position filename="../pango/pango-layout.h" line="282"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="layout" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-layout.c"
                 line="2410">a #PangoLayout</doc>
            <type name="Layout" c:type="PangoLayout*"/>
          </instance-parameter>
          <parameter name="index_" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-layout.c"
                 line="2411">the byte index of the cursor</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="strong_pos"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../pango/pango-layout.c"
                 line="2412">location to store the strong cursor position
                    (may be %NULL)</doc>
            <type name="Rectangle" c:type="PangoRectangle*"/>
          </parameter>
          <parameter name="weak_pos"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../pango/pango-layout.c"
                 line="2414">location to store the weak cursor position (may be %NULL)</doc>
            <type name="Rectangle" c:type="PangoRectangle*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_direction"
              c:identifier="pango_layout_get_direction"
              version="1.46">
        <doc xml:space="preserve"
             filename="../pango/pango-layout.c"
             line="2382">Gets the text direction at the given character
position in @layout.</doc>
        <source-position filename="../pango/pango-layout.h" line="254"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../pango/pango-layout.c"
               line="2390">the text direction at @index</doc>
          <type name="Direction" c:type="PangoDirection"/>
        </return-value>
        <parameters>
          <instance-parameter name="layout" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-layout.c"
                 line="2384">a #PangoLayout</doc>
            <type name="Layout" c:type="PangoLayout*"/>
          </instance-parameter>
          <parameter name="index" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-layout.c"
                 line="2385">the byte index of the char</doc>
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_ellipsize"
              c:identifier="pango_layout_get_ellipsize"
              version="1.6">
        <doc xml:space="preserve"
             filename="../pango/pango-layout.c"
             line="1051">Gets the type of ellipsization being performed for @layout.
See pango_layout_set_ellipsize()</doc>
        <source-position filename="../pango/pango-layout.h" line="246"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../pango/pango-layout.c"
               line="1058">the current ellipsization mode for @layout.

Use pango_layout_is_ellipsized() to query whether any paragraphs
were actually ellipsized.</doc>
          <type name="EllipsizeMode" c:type="PangoEllipsizeMode"/>
        </return-value>
        <parameters>
          <instance-parameter name="layout" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-layout.c"
                 line="1053">a #PangoLayout</doc>
            <type name="Layout" c:type="PangoLayout*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_extents" c:identifier="pango_layout_get_extents">
        <doc xml:space="preserve"
             filename="../pango/pango-layout.c"
             line="2851">Computes the logical and ink extents of @layout. Logical extents
are usually what you want for positioning things.  Note that both extents
may have non-zero x and y.  You may want to use those to offset where you
render the layout.  Not doing that is a very typical bug that shows up as
right-to-left layouts not being correctly positioned in a layout with
a set width.

The extents are given in layout coordinates and in Pango units; layout
coordinates begin at the top left corner of the layout.</doc>
        <source-position filename="../pango/pango-layout.h" line="301"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="layout" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-layout.c"
                 line="2853">a #PangoLayout</doc>
            <type name="Layout" c:type="PangoLayout*"/>
          </instance-parameter>
          <parameter name="ink_rect"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../pango/pango-layout.c"
                 line="2854">rectangle used to store the extents of the
                  layout as drawn or %NULL to indicate that the result is
                  not needed.</doc>
            <type name="Rectangle" c:type="PangoRectangle*"/>
          </parameter>
          <parameter name="logical_rect"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../pango/pango-layout.c"
                 line="2857">rectangle used to store the logical
                     extents of the layout or %NULL to indicate that the
                     result is not needed.</doc>
            <type name="Rectangle" c:type="PangoRectangle*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_font_description"
              c:identifier="pango_layout_get_font_description"
              version="1.8">
        <doc xml:space="preserve"
             filename="../pango/pango-layout.c"
             line="759">Gets the font description for the layout, if any.</doc>
        <source-position filename="../pango/pango-layout.h" line="180"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="../pango/pango-layout.c"
               line="765">a pointer to the layout's font
 description, or %NULL if the font description from the layout's
 context is inherited. This value is owned by the layout and must
 not be modified or freed.</doc>
          <type name="FontDescription" c:type="const PangoFontDescription*"/>
        </return-value>
        <parameters>
          <instance-parameter name="layout" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-layout.c"
                 line="761">a #PangoLayout</doc>
            <type name="Layout" c:type="PangoLayout*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_height"
              c:identifier="pango_layout_get_height"
              version="1.20">
        <doc xml:space="preserve"
             filename="../pango/pango-layout.c"
             line="444">Gets the height of layout used for ellipsization.  See
pango_layout_set_height() for details.</doc>
        <source-position filename="../pango/pango-layout.h" line="191"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../pango/pango-layout.c"
               line="451">the height, in Pango units if positive, or
number of lines if negative.</doc>
          <type name="gint" c:type="int"/>
        </return-value>
        <parameters>
          <instance-parameter name="layout" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-layout.c"
                 line="446">a #PangoLayout</doc>
            <type name="Layout" c:type="PangoLayout*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_indent" c:identifier="pango_layout_get_indent">
        <doc xml:space="preserve"
             filename="../pango/pango-layout.c"
             line="558">Gets the paragraph indent width in Pango units. A negative value
indicates a hanging indentation.</doc>
        <source-position filename="../pango/pango-layout.h" line="203"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../pango/pango-layout.c"
               line="565">the indent in Pango units.</doc>
          <type name="gint" c:type="int"/>
        </return-value>
        <parameters>
          <instance-parameter name="layout" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-layout.c"
                 line="560">a #PangoLayout</doc>
            <type name="Layout" c:type="PangoLayout*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_iter" c:identifier="pango_layout_get_iter">
        <doc xml:space="preserve"
             filename="../pango/pango-layout.c"
             line="6208">Returns an iterator to iterate over the visual extents of the layout.</doc>
        <source-position filename="../pango/pango-layout.h" line="380"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../pango/pango-layout.c"
               line="6214">the new #PangoLayoutIter that should be freed using
              pango_layout_iter_free().</doc>
          <type name="LayoutIter" c:type="PangoLayoutIter*"/>
        </return-value>
        <parameters>
          <instance-parameter name="layout" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-layout.c"
                 line="6210">a #PangoLayout</doc>
            <type name="Layout" c:type="PangoLayout*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_justify" c:identifier="pango_layout_get_justify">
        <doc xml:space="preserve"
             filename="../pango/pango-layout.c"
             line="809">Gets whether each complete line should be stretched to fill the entire
width of the layout.</doc>
        <source-position filename="../pango/pango-layout.h" line="218"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../pango/pango-layout.c"
               line="816">the justify.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="layout" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-layout.c"
                 line="811">a #PangoLayout</doc>
            <type name="Layout" c:type="PangoLayout*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_line" c:identifier="pango_layout_get_line">
        <doc xml:space="preserve"
             filename="../pango/pango-layout.c"
             line="1570">Retrieves a particular line from a #PangoLayout.

Use the faster pango_layout_get_line_readonly() if you do not plan
to modify the contents of the line (glyphs, glyph widths, etc.).</doc>
        <source-position filename="../pango/pango-layout.h" line="322"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="../pango/pango-layout.c"
               line="1581">the requested
              #PangoLayoutLine, or %NULL if the index is out of
              range. This layout line can be ref'ed and retained,
              but will become invalid if changes are made to the
              #PangoLayout.</doc>
          <type name="LayoutLine" c:type="PangoLayoutLine*"/>
        </return-value>
        <parameters>
          <instance-parameter name="layout" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-layout.c"
                 line="1572">a #PangoLayout</doc>
            <type name="Layout" c:type="PangoLayout*"/>
          </instance-parameter>
          <parameter name="line" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-layout.c"
                 line="1573">the index of a line, which must be between 0 and
       &lt;literal&gt;pango_layout_get_line_count(layout) - 1&lt;/literal&gt;, inclusive.</doc>
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_line_count" c:identifier="pango_layout_get_line_count">
        <doc xml:space="preserve"
             filename="../pango/pango-layout.c"
             line="1494">Retrieves the count of lines for the @layout.</doc>
        <source-position filename="../pango/pango-layout.h" line="320"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../pango/pango-layout.c"
               line="1500">the line count.</doc>
          <type name="gint" c:type="int"/>
        </return-value>
        <parameters>
          <instance-parameter name="layout" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-layout.c"
                 line="1496">#PangoLayout</doc>
            <type name="Layout" c:type="PangoLayout*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_line_readonly"
              c:identifier="pango_layout_get_line_readonly"
              version="1.16">
        <doc xml:space="preserve"
             filename="../pango/pango-layout.c"
             line="1612">Retrieves a particular line from a #PangoLayout.

This is a faster alternative to pango_layout_get_line(),
but the user is not expected
to modify the contents of the line (glyphs, glyph widths, etc.).</doc>
        <source-position filename="../pango/pango-layout.h" line="325"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="../pango/pango-layout.c"
               line="1624">the requested
              #PangoLayoutLine, or %NULL if the index is out of
              range. This layout line can be ref'ed and retained,
              but will become invalid if changes are made to the
              #PangoLayout.  No changes should be made to the line.</doc>
          <type name="LayoutLine" c:type="PangoLayoutLine*"/>
        </return-value>
        <parameters>
          <instance-parameter name="layout" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-layout.c"
                 line="1614">a #PangoLayout</doc>
            <type name="Layout" c:type="PangoLayout*"/>
          </instance-parameter>
          <parameter name="line" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-layout.c"
                 line="1615">the index of a line, which must be between 0 and
       &lt;literal&gt;pango_layout_get_line_count(layout) - 1&lt;/literal&gt;, inclusive.</doc>
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_line_spacing"
              c:identifier="pango_layout_get_line_spacing"
              version="1.44">
        <doc xml:space="preserve"
             filename="../pango/pango-layout.c"
             line="656">Gets the value that has been
set with pango_layout_set_line_spacing().</doc>
        <source-position filename="../pango/pango-layout.h" line="213"/>
        <return-value transfer-ownership="none">
          <type name="gfloat" c:type="float"/>
        </return-value>
        <parameters>
          <instance-parameter name="layout" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-layout.c"
                 line="658">a #PangoLayout</doc>
            <type name="Layout" c:type="PangoLayout*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_lines" c:identifier="pango_layout_get_lines">
        <doc xml:space="preserve"
             filename="../pango/pango-layout.c"
             line="1511">Returns the lines of the @layout as a list.

Use the faster pango_layout_get_lines_readonly() if you do not plan
to modify the contents of the lines (glyphs, glyph widths, etc.).</doc>
        <source-position filename="../pango/pango-layout.h" line="328"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../pango/pango-layout.c"
               line="1520">a #GSList containing
the lines in the layout. This points to internal data of the #PangoLayout
and must be used with care. It will become invalid on any change to the layout's
text or properties.</doc>
          <type name="GLib.SList" c:type="GSList*">
            <type name="LayoutLine"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="layout" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-layout.c"
                 line="1513">a #PangoLayout</doc>
            <type name="Layout" c:type="PangoLayout*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_lines_readonly"
              c:identifier="pango_layout_get_lines_readonly"
              version="1.16">
        <doc xml:space="preserve"
             filename="../pango/pango-layout.c"
             line="1545">Returns the lines of the @layout as a list.

This is a faster alternative to pango_layout_get_lines(),
but the user is not expected
to modify the contents of the lines (glyphs, glyph widths, etc.).</doc>
        <source-position filename="../pango/pango-layout.h" line="330"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../pango/pango-layout.c"
               line="1555">a #GSList containing
the lines in the layout. This points to internal data of the #PangoLayout and
must be used with care. It will become invalid on any change to the layout's
text or properties.  No changes should be made to the lines.</doc>
          <type name="GLib.SList" c:type="GSList*">
            <type name="LayoutLine"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="layout" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-layout.c"
                 line="1547">a #PangoLayout</doc>
            <type name="Layout" c:type="PangoLayout*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_log_attrs" c:identifier="pango_layout_get_log_attrs">
        <doc xml:space="preserve"
             filename="../pango/pango-layout.c"
             line="1421">Retrieves an array of logical attributes for each character in
the @layout.</doc>
        <source-position filename="../pango/pango-layout.h" line="263"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="layout" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-layout.c"
                 line="1423">a #PangoLayout</doc>
            <type name="Layout" c:type="PangoLayout*"/>
          </instance-parameter>
          <parameter name="attrs"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="container">
            <doc xml:space="preserve"
                 filename="../pango/pango-layout.c"
                 line="1424">
        location to store a pointer to an array of logical attributes
        This value must be freed with g_free().</doc>
            <array length="1" zero-terminated="0" c:type="PangoLogAttr**">
              <type name="LogAttr" c:type="PangoLogAttr*"/>
            </array>
          </parameter>
          <parameter name="n_attrs"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="../pango/pango-layout.c"
                 line="1427">location to store the number of the attributes in the
          array. (The stored value will be one more than the total number
          of characters in the layout, since there need to be attributes
          corresponding to both the position before the first character
          and the position after the last character.)</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_log_attrs_readonly"
              c:identifier="pango_layout_get_log_attrs_readonly"
              version="1.30">
        <doc xml:space="preserve"
             filename="../pango/pango-layout.c"
             line="1455">Retrieves an array of logical attributes for each character in
the @layout.

This is a faster alternative to pango_layout_get_log_attrs().
The returned array is part of @layout and must not be modified.
Modifying the layout will invalidate the returned array.

The number of attributes returned in @n_attrs will be one more
than the total number of characters in the layout, since there
need to be attributes corresponding to both the position before
the first character and the position after the last character.</doc>
        <source-position filename="../pango/pango-layout.h" line="268"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../pango/pango-layout.c"
               line="1473">an array of logical attributes</doc>
          <array length="0" zero-terminated="0" c:type="const PangoLogAttr*">
            <type name="LogAttr" c:type="PangoLogAttr"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="layout" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-layout.c"
                 line="1457">a #PangoLayout</doc>
            <type name="Layout" c:type="PangoLayout*"/>
          </instance-parameter>
          <parameter name="n_attrs"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="../pango/pango-layout.c"
                 line="1458">location to store the number of the attributes in
  the array</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_pixel_extents"
              c:identifier="pango_layout_get_pixel_extents">
        <doc xml:space="preserve"
             filename="../pango/pango-layout.c"
             line="2881">Computes the logical and ink extents of @layout in device units.
This function just calls pango_layout_get_extents() followed by
two pango_extents_to_pixels() calls, rounding @ink_rect and @logical_rect
such that the rounded rectangles fully contain the unrounded one (that is,
passes them as first argument to pango_extents_to_pixels()).</doc>
        <source-position filename="../pango/pango-layout.h" line="305"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="layout" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-layout.c"
                 line="2883">a #PangoLayout</doc>
            <type name="Layout" c:type="PangoLayout*"/>
          </instance-parameter>
          <parameter name="ink_rect"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../pango/pango-layout.c"
                 line="2884">rectangle used to store the extents of the
                  layout as drawn or %NULL to indicate that the result is
                  not needed.</doc>
            <type name="Rectangle" c:type="PangoRectangle*"/>
          </parameter>
          <parameter name="logical_rect"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../pango/pango-layout.c"
                 line="2887">rectangle used to store the logical
                      extents of the layout or %NULL to indicate that the
                      result is not needed.</doc>
            <type name="Rectangle" c:type="PangoRectangle*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_pixel_size" c:identifier="pango_layout_get_pixel_size">
        <doc xml:space="preserve"
             filename="../pango/pango-layout.c"
             line="2934">Determines the logical width and height of a #PangoLayout
in device units. (pango_layout_get_size() returns the width
and height scaled by %PANGO_SCALE.) This
is simply a convenience function around
pango_layout_get_pixel_extents().</doc>
        <source-position filename="../pango/pango-layout.h" line="313"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="layout" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-layout.c"
                 line="2936">a #PangoLayout</doc>
            <type name="Layout" c:type="PangoLayout*"/>
          </instance-parameter>
          <parameter name="width"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../pango/pango-layout.c"
                 line="2937">location to store the logical width, or %NULL</doc>
            <type name="gint" c:type="int*"/>
          </parameter>
          <parameter name="height"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../pango/pango-layout.c"
                 line="2938">location to store the logical height, or %NULL</doc>
            <type name="gint" c:type="int*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_serial"
              c:identifier="pango_layout_get_serial"
              version="1.32.4">
        <doc xml:space="preserve"
             filename="../pango/pango-layout.c"
             line="1395">Returns the current serial number of @layout.  The serial number is
initialized to an small number  larger than zero when a new layout
is created and is increased whenever the layout is changed using any
of the setter functions, or the #PangoContext it uses has changed.
The serial may wrap, but will never have the value 0. Since it
can wrap, never compare it with "less than", always use "not equals".

This can be used to automatically detect changes to a #PangoLayout, and
is useful for example to decide whether a layout needs redrawing.
To force the serial to be increased, use pango_layout_context_changed().</doc>
        <source-position filename="../pango/pango-layout.h" line="260"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../pango/pango-layout.c"
               line="1410">The current serial number of @layout.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="layout" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-layout.c"
                 line="1397">a #PangoLayout</doc>
            <type name="Layout" c:type="PangoLayout*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_single_paragraph_mode"
              c:identifier="pango_layout_get_single_paragraph_mode">
        <doc xml:space="preserve"
             filename="../pango/pango-layout.c"
             line="1000">Obtains the value set by pango_layout_set_single_paragraph_mode().</doc>
        <source-position filename="../pango/pango-layout.h" line="240"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../pango/pango-layout.c"
               line="1006">%TRUE if the layout does not break paragraphs at
paragraph separator characters, %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="layout" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-layout.c"
                 line="1002">a #PangoLayout</doc>
            <type name="Layout" c:type="PangoLayout*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_size" c:identifier="pango_layout_get_size">
        <doc xml:space="preserve"
             filename="../pango/pango-layout.c"
             line="2909">Determines the logical width and height of a #PangoLayout
in Pango units (device units scaled by %PANGO_SCALE). This
is simply a convenience function around pango_layout_get_extents().</doc>
        <source-position filename="../pango/pango-layout.h" line="309"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="layout" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-layout.c"
                 line="2911">a #PangoLayout</doc>
            <type name="Layout" c:type="PangoLayout*"/>
          </instance-parameter>
          <parameter name="width"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../pango/pango-layout.c"
                 line="2912">location to store the logical width, or %NULL</doc>
            <type name="gint" c:type="int*"/>
          </parameter>
          <parameter name="height"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../pango/pango-layout.c"
                 line="2913">location to store the logical height, or %NULL</doc>
            <type name="gint" c:type="int*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_spacing" c:identifier="pango_layout_get_spacing">
        <doc xml:space="preserve"
             filename="../pango/pango-layout.c"
             line="604">Gets the amount of spacing between the lines of the layout.</doc>
        <source-position filename="../pango/pango-layout.h" line="208"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../pango/pango-layout.c"
               line="610">the spacing in Pango units.</doc>
          <type name="gint" c:type="int"/>
        </return-value>
        <parameters>
          <instance-parameter name="layout" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-layout.c"
                 line="606">a #PangoLayout</doc>
            <type name="Layout" c:type="PangoLayout*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_tabs" c:identifier="pango_layout_get_tabs">
        <doc xml:space="preserve"
             filename="../pango/pango-layout.c"
             line="952">Gets the current #PangoTabArray used by this layout. If no
#PangoTabArray has been set, then the default tabs are in use
and %NULL is returned. Default tabs are every 8 spaces.
The return value should be freed with pango_tab_array_free().</doc>
        <source-position filename="../pango/pango-layout.h" line="234"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="../pango/pango-layout.c"
               line="961">a copy of the tabs for this layout, or
%NULL.</doc>
          <type name="TabArray" c:type="PangoTabArray*"/>
        </return-value>
        <parameters>
          <instance-parameter name="layout" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-layout.c"
                 line="954">a #PangoLayout</doc>
            <type name="Layout" c:type="PangoLayout*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_text" c:identifier="pango_layout_get_text">
        <doc xml:space="preserve"
             filename="../pango/pango-layout.c"
             line="1183">Gets the text in the layout. The returned text should not
be freed or modified.</doc>
        <source-position filename="../pango/pango-layout.h" line="158"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../pango/pango-layout.c"
               line="1190">the text in the @layout.</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="layout" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-layout.c"
                 line="1185">a #PangoLayout</doc>
            <type name="Layout" c:type="PangoLayout*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_unknown_glyphs_count"
              c:identifier="pango_layout_get_unknown_glyphs_count"
              version="1.16">
        <doc xml:space="preserve"
             filename="../pango/pango-layout.c"
             line="1299">Counts the number unknown glyphs in @layout.  That is, zero if
glyphs for all characters in the layout text were found, or more
than zero otherwise.

This function can be used to determine if there are any fonts
available to render all characters in a certain string, or when
used in combination with %PANGO_ATTR_FALLBACK, to check if a
certain font supports all the characters in the string.</doc>
        <source-position filename="../pango/pango-layout.h" line="251"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../pango/pango-layout.c"
               line="1312">The number of unknown glyphs in @layout.</doc>
          <type name="gint" c:type="int"/>
        </return-value>
        <parameters>
          <instance-parameter name="layout" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-layout.c"
                 line="1301">a #PangoLayout</doc>
            <type name="Layout" c:type="PangoLayout*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_width" c:identifier="pango_layout_get_width">
        <doc xml:space="preserve"
             filename="../pango/pango-layout.c"
             line="375">Gets the width to which the lines of the #PangoLayout should wrap.</doc>
        <source-position filename="../pango/pango-layout.h" line="186"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../pango/pango-layout.c"
               line="381">the width in Pango units, or -1 if no width set.</doc>
          <type name="gint" c:type="int"/>
        </return-value>
        <parameters>
          <instance-parameter name="layout" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-layout.c"
                 line="377">a #PangoLayout</doc>
            <type name="Layout" c:type="PangoLayout*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_wrap" c:identifier="pango_layout_get_wrap">
        <doc xml:space="preserve"
             filename="../pango/pango-layout.c"
             line="487">Gets the wrap mode for the layout.

Use pango_layout_is_wrapped() to query whether any paragraphs
were actually wrapped.</doc>
        <source-position filename="../pango/pango-layout.h" line="196"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../pango/pango-layout.c"
               line="496">active wrap mode.</doc>
          <type name="WrapMode" c:type="PangoWrapMode"/>
        </return-value>
        <parameters>
          <instance-parameter name="layout" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-layout.c"
                 line="489">a #PangoLayout</doc>
            <type name="Layout" c:type="PangoLayout*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="index_to_line_x"
              c:identifier="pango_layout_index_to_line_x">
        <doc xml:space="preserve"
             filename="../pango/pango-layout.c"
             line="1803">Converts from byte @index_ within the @layout to line and X position.
(X position is measured from the left edge of the line)</doc>
        <source-position filename="../pango/pango-layout.h" line="276"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="layout" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-layout.c"
                 line="1805">a #PangoLayout</doc>
            <type name="Layout" c:type="PangoLayout*"/>
          </instance-parameter>
          <parameter name="index_" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-layout.c"
                 line="1806">the byte index of a grapheme within the layout.</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="trailing" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-layout.c"
                 line="1807">an integer indicating the edge of the grapheme to retrieve the
            position of. If &gt; 0, the trailing edge of the grapheme, if 0,
            the leading of the grapheme.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="line"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../pango/pango-layout.c"
                 line="1810">location to store resulting line index. (which will
              between 0 and pango_layout_get_line_count(layout) - 1), or %NULL</doc>
            <type name="gint" c:type="int*"/>
          </parameter>
          <parameter name="x_pos"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../pango/pango-layout.c"
                 line="1812">location to store resulting position within line
             (%PANGO_SCALE units per device unit), or %NULL</doc>
            <type name="gint" c:type="int*"/>
          </parameter>
        </parameters>
      </method>
      <method name="index_to_pos" c:identifier="pango_layout_index_to_pos">
        <doc xml:space="preserve"
             filename="../pango/pango-layout.c"
             line="2151">Converts from an index within a #PangoLayout to the onscreen position
corresponding to the grapheme at that index, which is represented
as rectangle.  Note that &lt;literal&gt;pos-&gt;x&lt;/literal&gt; is always the leading
edge of the grapheme and &lt;literal&gt;pos-&gt;x + pos-&gt;width&lt;/literal&gt; the trailing
edge of the grapheme. If the directionality of the grapheme is right-to-left,
then &lt;literal&gt;pos-&gt;width&lt;/literal&gt; will be negative.</doc>
        <source-position filename="../pango/pango-layout.h" line="272"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="layout" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-layout.c"
                 line="2153">a #PangoLayout</doc>
            <type name="Layout" c:type="PangoLayout*"/>
          </instance-parameter>
          <parameter name="index_" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-layout.c"
                 line="2154">byte index within @layout</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="pos"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-layout.c"
                 line="2155">rectangle in which to store the position of the grapheme</doc>
            <type name="Rectangle" c:type="PangoRectangle*"/>
          </parameter>
        </parameters>
      </method>
      <method name="is_ellipsized"
              c:identifier="pango_layout_is_ellipsized"
              version="1.16">
        <doc xml:space="preserve"
             filename="../pango/pango-layout.c"
             line="1073">Queries whether the layout had to ellipsize any paragraphs.

This returns %TRUE if the ellipsization mode for @layout
is not %PANGO_ELLIPSIZE_NONE, a positive width is set on @layout,
and there are paragraphs exceeding that width that have to be
ellipsized.</doc>
        <source-position filename="../pango/pango-layout.h" line="248"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../pango/pango-layout.c"
               line="1084">%TRUE if any paragraphs had to be ellipsized, %FALSE
otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="layout" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-layout.c"
                 line="1075">a #PangoLayout</doc>
            <type name="Layout" c:type="PangoLayout*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="is_wrapped"
              c:identifier="pango_layout_is_wrapped"
              version="1.16">
        <doc xml:space="preserve"
             filename="../pango/pango-layout.c"
             line="506">Queries whether the layout had to wrap any paragraphs.

This returns %TRUE if a positive width is set on @layout,
ellipsization mode of @layout is set to %PANGO_ELLIPSIZE_NONE,
and there are paragraphs exceeding the layout width that have
to be wrapped.</doc>
        <source-position filename="../pango/pango-layout.h" line="198"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../pango/pango-layout.c"
               line="517">%TRUE if any paragraphs had to be wrapped, %FALSE
otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="layout" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-layout.c"
                 line="508">a #PangoLayout</doc>
            <type name="Layout" c:type="PangoLayout*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="move_cursor_visually"
              c:identifier="pango_layout_move_cursor_visually">
        <doc xml:space="preserve"
             filename="../pango/pango-layout.c"
             line="1857">Computes a new cursor position from an old position and
a count of positions to move visually. If @direction is positive,
then the new strong cursor position will be one position
to the right of the old cursor position. If @direction is negative,
then the new strong cursor position will be one position
to the left of the old cursor position.

In the presence of bidirectional text, the correspondence
between logical and visual order will depend on the direction
of the current run, and there may be jumps when the cursor
is moved off of the end of a run.

Motion here is in cursor positions, not in characters, so a
single call to pango_layout_move_cursor_visually() may move the
cursor over multiple characters when multiple characters combine
to form a single grapheme.</doc>
        <source-position filename="../pango/pango-layout.h" line="287"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="layout" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-layout.c"
                 line="1859">a #PangoLayout.</doc>
            <type name="Layout" c:type="PangoLayout*"/>
          </instance-parameter>
          <parameter name="strong" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-layout.c"
                 line="1860">whether the moving cursor is the strong cursor or the
               weak cursor. The strong cursor is the cursor corresponding
               to text insertion in the base direction for the layout.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="old_index" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-layout.c"
                 line="1863">the byte index of the grapheme for the old index</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="old_trailing" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-layout.c"
                 line="1864">if 0, the cursor was at the leading edge of the
               grapheme indicated by @old_index, if &gt; 0, the cursor
               was at the trailing edge.</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="direction" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-layout.c"
                 line="1867">direction to move cursor. A negative
               value indicates motion to the left.</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="new_index"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="../pango/pango-layout.c"
                 line="1869">location to store the new cursor byte index. A value of -1
               indicates that the cursor has been moved off the beginning
               of the layout. A value of %G_MAXINT indicates that
               the cursor has been moved off the end of the layout.</doc>
            <type name="gint" c:type="int*"/>
          </parameter>
          <parameter name="new_trailing"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="../pango/pango-layout.c"
                 line="1873">number of characters to move forward from the
               location returned for @new_index to get the position
               where the cursor should be displayed. This allows
               distinguishing the position at the beginning of one
               line from the position at the end of the preceding
               line. @new_index is always on the line where the
               cursor should be displayed.</doc>
            <type name="gint" c:type="int*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_alignment" c:identifier="pango_layout_set_alignment">
        <doc xml:space="preserve"
             filename="../pango/pango-layout.c"
             line="886">Sets the alignment for the layout: how partial lines are
positioned within the horizontal space available.</doc>
        <source-position filename="../pango/pango-layout.h" line="225"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="layout" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-layout.c"
                 line="888">a #PangoLayout</doc>
            <type name="Layout" c:type="PangoLayout*"/>
          </instance-parameter>
          <parameter name="alignment" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-layout.c"
                 line="889">the alignment</doc>
            <type name="Alignment" c:type="PangoAlignment"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_attributes" c:identifier="pango_layout_set_attributes">
        <doc xml:space="preserve"
             filename="../pango/pango-layout.c"
             line="672">Sets the text attributes for a layout object.
References @attrs, so the caller can unref its reference.</doc>
        <source-position filename="../pango/pango-layout.h" line="148"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="layout" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-layout.c"
                 line="674">a #PangoLayout</doc>
            <type name="Layout" c:type="PangoLayout*"/>
          </instance-parameter>
          <parameter name="attrs"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../pango/pango-layout.c"
                 line="675">a #PangoAttrList, can be %NULL</doc>
            <type name="AttrList" c:type="PangoAttrList*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_auto_dir"
              c:identifier="pango_layout_set_auto_dir"
              version="1.4">
        <doc xml:space="preserve"
             filename="../pango/pango-layout.c"
             line="825">Sets whether to calculate the bidirectional base direction
for the layout according to the contents of the layout;
when this flag is on (the default), then paragraphs in
   @layout that begin with strong right-to-left characters
(Arabic and Hebrew principally), will have right-to-left
layout, paragraphs with letters from other scripts will
have left-to-right layout. Paragraphs with only neutral
characters get their direction from the surrounding paragraphs.

When %FALSE, the choice between left-to-right and
right-to-left layout is done according to the base direction
of the layout's #PangoContext. (See pango_context_set_base_dir()).

When the auto-computed direction of a paragraph differs from the
base direction of the context, the interpretation of
%PANGO_ALIGN_LEFT and %PANGO_ALIGN_RIGHT are swapped.</doc>
        <source-position filename="../pango/pango-layout.h" line="220"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="layout" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-layout.c"
                 line="827">a #PangoLayout</doc>
            <type name="Layout" c:type="PangoLayout*"/>
          </instance-parameter>
          <parameter name="auto_dir" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-layout.c"
                 line="828">if %TRUE, compute the bidirectional base direction
  from the layout's contents.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_ellipsize"
              c:identifier="pango_layout_set_ellipsize"
              version="1.6">
        <doc xml:space="preserve"
             filename="../pango/pango-layout.c"
             line="1017">Sets the type of ellipsization being performed for @layout.
Depending on the ellipsization mode @ellipsize text is
removed from the start, middle, or end of text so they
fit within the width and height of layout set with
pango_layout_set_width() and pango_layout_set_height().

If the layout contains characters such as newlines that
force it to be layed out in multiple paragraphs, then whether
each paragraph is ellipsized separately or the entire layout
is ellipsized as a whole depends on the set height of the layout.
See pango_layout_set_height() for details.</doc>
        <source-position filename="../pango/pango-layout.h" line="243"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="layout" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-layout.c"
                 line="1019">a #PangoLayout</doc>
            <type name="Layout" c:type="PangoLayout*"/>
          </instance-parameter>
          <parameter name="ellipsize" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-layout.c"
                 line="1020">the new ellipsization mode for @layout</doc>
            <type name="EllipsizeMode" c:type="PangoEllipsizeMode"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_font_description"
              c:identifier="pango_layout_set_font_description">
        <doc xml:space="preserve"
             filename="../pango/pango-layout.c"
             line="730">Sets the default font description for the layout. If no font
description is set on the layout, the font description from
the layout's context is used.</doc>
        <source-position filename="../pango/pango-layout.h" line="176"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="layout" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-layout.c"
                 line="732">a #PangoLayout</doc>
            <type name="Layout" c:type="PangoLayout*"/>
          </instance-parameter>
          <parameter name="desc"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../pango/pango-layout.c"
                 line="733">the new #PangoFontDescription, or %NULL to unset the
       current font description</doc>
            <type name="FontDescription" c:type="const PangoFontDescription*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_height"
              c:identifier="pango_layout_set_height"
              version="1.20">
        <doc xml:space="preserve"
             filename="../pango/pango-layout.c"
             line="390">Sets the height to which the #PangoLayout should be ellipsized at.  There
are two different behaviors, based on whether @height is positive or
negative.

If @height is positive, it will be the maximum height of the layout.  Only
lines would be shown that would fit, and if there is any text omitted,
an ellipsis added.  At least one line is included in each paragraph regardless
of how small the height value is.  A value of zero will render exactly one
line for the entire layout.

If @height is negative, it will be the (negative of) maximum number of lines per
paragraph.  That is, the total number of lines shown may well be more than
this value if the layout contains multiple paragraphs of text.
The default value of -1 means that first line of each paragraph is ellipsized.
This behvaior may be changed in the future to act per layout instead of per
paragraph.  File a bug against pango at &lt;ulink
url="http://bugzilla.gnome.org/"&gt;http://bugzilla.gnome.org/&lt;/ulink&gt; if your
code relies on this behavior.

Height setting only has effect if a positive width is set on
@layout and ellipsization mode of @layout is not %PANGO_ELLIPSIZE_NONE.
The behavior is undefined if a height other than -1 is set and
ellipsization mode is set to %PANGO_ELLIPSIZE_NONE, and may change in the
future.</doc>
        <source-position filename="../pango/pango-layout.h" line="188"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="layout" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-layout.c"
                 line="392">a #PangoLayout.</doc>
            <type name="Layout" c:type="PangoLayout*"/>
          </instance-parameter>
          <parameter name="height" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-layout.c"
                 line="393">the desired height of the layout in Pango units if positive,
         or desired number of lines if negative.</doc>
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_indent" c:identifier="pango_layout_set_indent">
        <doc xml:space="preserve"
             filename="../pango/pango-layout.c"
             line="532">Sets the width in Pango units to indent each paragraph. A negative value
of @indent will produce a hanging indentation. That is, the first line will
have the full width, and subsequent lines will be indented by the
absolute value of @indent.

The indent setting is ignored if layout alignment is set to
%PANGO_ALIGN_CENTER.</doc>
        <source-position filename="../pango/pango-layout.h" line="200"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="layout" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-layout.c"
                 line="534">a #PangoLayout.</doc>
            <type name="Layout" c:type="PangoLayout*"/>
          </instance-parameter>
          <parameter name="indent" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-layout.c"
                 line="535">the amount by which to indent.</doc>
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_justify" c:identifier="pango_layout_set_justify">
        <doc xml:space="preserve"
             filename="../pango/pango-layout.c"
             line="780">Sets whether each complete line should be stretched to
fill the entire width of the layout. This stretching is typically
done by adding whitespace, but for some scripts (such as Arabic),
the justification may be done in more complex ways, like extending
the characters.

Note that this setting is not implemented and so is ignored in Pango
older than 1.18.</doc>
        <source-position filename="../pango/pango-layout.h" line="215"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="layout" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-layout.c"
                 line="782">a #PangoLayout</doc>
            <type name="Layout" c:type="PangoLayout*"/>
          </instance-parameter>
          <parameter name="justify" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-layout.c"
                 line="783">whether the lines in the layout should be justified.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_line_spacing"
              c:identifier="pango_layout_set_line_spacing"
              version="1.44">
        <doc xml:space="preserve"
             filename="../pango/pango-layout.c"
             line="619">Sets a factor for line spacing.
Typical values are: 0, 1, 1.5, 2.
The default values is 0.

If @factor is non-zero, lines are placed
so that

baseline2 = baseline1 + factor * height2

where height2 is the line height of the
second line (as determined by the font(s)).
In this case, the spacing set with
pango_layout_set_spacing() is ignored.

If @factor is zero, spacing is applied as
before.</doc>
        <source-position filename="../pango/pango-layout.h" line="210"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="layout" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-layout.c"
                 line="621">a #PangoLayout</doc>
            <type name="Layout" c:type="PangoLayout*"/>
          </instance-parameter>
          <parameter name="factor" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-layout.c"
                 line="622">the new line spacing factor</doc>
            <type name="gfloat" c:type="float"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_markup" c:identifier="pango_layout_set_markup">
        <doc xml:space="preserve"
             filename="../pango/pango-layout.c"
             line="1225">Same as pango_layout_set_markup_with_accel(), but
the markup text isn't scanned for accelerators.</doc>
        <source-position filename="../pango/pango-layout.h" line="164"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="layout" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-layout.c"
                 line="1227">a #PangoLayout</doc>
            <type name="Layout" c:type="PangoLayout*"/>
          </instance-parameter>
          <parameter name="markup" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-layout.c"
                 line="1228">marked-up text</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="length" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-layout.c"
                 line="1229">length of marked-up text in bytes, or -1 if @markup is
         null-terminated</doc>
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_markup_with_accel"
              c:identifier="pango_layout_set_markup_with_accel">
        <doc xml:space="preserve"
             filename="../pango/pango-layout.c"
             line="1244">Sets the layout text and attribute list from marked-up text (see
&lt;link linkend="PangoMarkupFormat"&gt;markup format&lt;/link&gt;). Replaces
the current text and attribute list.

If @accel_marker is nonzero, the given character will mark the
character following it as an accelerator. For example, @accel_marker
might be an ampersand or underscore. All characters marked
as an accelerator will receive a %PANGO_UNDERLINE_LOW attribute,
and the first character so marked will be returned in @accel_char.
Two @accel_marker characters following each other produce a single
literal @accel_marker character.</doc>
        <source-position filename="../pango/pango-layout.h" line="169"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="layout" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-layout.c"
                 line="1246">a #PangoLayout</doc>
            <type name="Layout" c:type="PangoLayout*"/>
          </instance-parameter>
          <parameter name="markup" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-layout.c"
                 line="1247">marked-up text
(see &lt;link linkend="PangoMarkupFormat"&gt;markup format&lt;/link&gt;)</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="length" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-layout.c"
                 line="1249">length of marked-up text in bytes, or -1 if @markup is
         null-terminated</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="accel_marker" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-layout.c"
                 line="1251">marker for accelerators in the text</doc>
            <type name="gunichar" c:type="gunichar"/>
          </parameter>
          <parameter name="accel_char"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../pango/pango-layout.c"
                 line="1252">return location
                   for first located accelerator, or %NULL</doc>
            <type name="gunichar" c:type="gunichar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_single_paragraph_mode"
              c:identifier="pango_layout_set_single_paragraph_mode">
        <doc xml:space="preserve"
             filename="../pango/pango-layout.c"
             line="975">If @setting is %TRUE, do not treat newlines and similar characters
as paragraph separators; instead, keep all text in a single paragraph,
and display a glyph for paragraph separator characters. Used when
you want to allow editing of newlines on a single text line.</doc>
        <source-position filename="../pango/pango-layout.h" line="237"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="layout" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-layout.c"
                 line="977">a #PangoLayout</doc>
            <type name="Layout" c:type="PangoLayout*"/>
          </instance-parameter>
          <parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-layout.c"
                 line="978">new setting</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_spacing" c:identifier="pango_layout_set_spacing">
        <doc xml:space="preserve"
             filename="../pango/pango-layout.c"
             line="574">Sets the amount of spacing in Pango unit between
the lines of the layout. When placing lines with
spacing, Pango arranges things so that

line2.top = line1.bottom + spacing

Note: Since 1.44, Pango defaults to using the
line height (as determined by the font) for placing
lines. The @spacing set with this function is only
taken into account when the line-height factor is
set to zero with pango_layout_set_line_spacing().</doc>
        <source-position filename="../pango/pango-layout.h" line="205"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="layout" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-layout.c"
                 line="576">a #PangoLayout.</doc>
            <type name="Layout" c:type="PangoLayout*"/>
          </instance-parameter>
          <parameter name="spacing" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-layout.c"
                 line="577">the amount of spacing</doc>
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_tabs" c:identifier="pango_layout_set_tabs">
        <doc xml:space="preserve"
             filename="../pango/pango-layout.c"
             line="924">Sets the tabs to use for @layout, overriding the default tabs
(by default, tabs are every 8 spaces). If @tabs is %NULL, the default
tabs are reinstated. @tabs is copied into the layout; you must
free your copy of @tabs yourself.</doc>
        <source-position filename="../pango/pango-layout.h" line="231"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="layout" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-layout.c"
                 line="926">a #PangoLayout</doc>
            <type name="Layout" c:type="PangoLayout*"/>
          </instance-parameter>
          <parameter name="tabs"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../pango/pango-layout.c"
                 line="927">a #PangoTabArray, or %NULL</doc>
            <type name="TabArray" c:type="PangoTabArray*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_text" c:identifier="pango_layout_set_text">
        <doc xml:space="preserve"
             filename="../pango/pango-layout.c"
             line="1099">Sets the text of the layout.

This function validates @text and renders invalid UTF-8
with a placeholder glyph.

Note that if you have used pango_layout_set_markup() or
pango_layout_set_markup_with_accel() on @layout before, you may
want to call pango_layout_set_attributes() to clear the attributes
set on the layout from the markup as this function does not clear
attributes.</doc>
        <source-position filename="../pango/pango-layout.h" line="154"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="layout" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-layout.c"
                 line="1101">a #PangoLayout</doc>
            <type name="Layout" c:type="PangoLayout*"/>
          </instance-parameter>
          <parameter name="text" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-layout.c"
                 line="1102">the text</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="length" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-layout.c"
                 line="1103">maximum length of @text, in bytes. -1 indicates that
         the string is nul-terminated and the length should be
         calculated.  The text will also be truncated on
         encountering a nul-termination even when @length is
         positive.</doc>
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_width" c:identifier="pango_layout_set_width">
        <doc xml:space="preserve"
             filename="../pango/pango-layout.c"
             line="345">Sets the width to which the lines of the #PangoLayout should wrap or
ellipsized.  The default value is -1: no width set.</doc>
        <source-position filename="../pango/pango-layout.h" line="183"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="layout" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-layout.c"
                 line="347">a #PangoLayout.</doc>
            <type name="Layout" c:type="PangoLayout*"/>
          </instance-parameter>
          <parameter name="width" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-layout.c"
                 line="348">the desired width in Pango units, or -1 to indicate that no
        wrapping or ellipsization should be performed.</doc>
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_wrap" c:identifier="pango_layout_set_wrap">
        <doc xml:space="preserve"
             filename="../pango/pango-layout.c"
             line="463">Sets the wrap mode; the wrap mode only has effect if a width
is set on the layout with pango_layout_set_width().
To turn off wrapping, set the width to -1.</doc>
        <source-position filename="../pango/pango-layout.h" line="193"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="layout" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-layout.c"
                 line="465">a #PangoLayout</doc>
            <type name="Layout" c:type="PangoLayout*"/>
          </instance-parameter>
          <parameter name="wrap" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-layout.c"
                 line="466">the wrap mode</doc>
            <type name="WrapMode" c:type="PangoWrapMode"/>
          </parameter>
        </parameters>
      </method>
      <method name="xy_to_index" c:identifier="pango_layout_xy_to_index">
        <doc xml:space="preserve"
             filename="../pango/pango-layout.c"
             line="2044">Converts from X and Y position within a layout to the byte
index to the character at that logical position. If the
Y position is not inside the layout, the closest position is chosen
(the position will be clamped inside the layout). If the
X position is not within the layout, then the start or the
end of the line is chosen as described for pango_layout_line_x_to_index().
If either the X or Y positions were not inside the layout, then the
function returns %FALSE; on an exact hit, it returns %TRUE.</doc>
        <source-position filename="../pango/pango-layout.h" line="295"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../pango/pango-layout.c"
               line="2066">%TRUE if the coordinates were inside text, %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="layout" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-layout.c"
                 line="2046">a #PangoLayout</doc>
            <type name="Layout" c:type="PangoLayout*"/>
          </instance-parameter>
          <parameter name="x" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-layout.c"
                 line="2047">the X offset (in Pango units)
            from the left edge of the layout.</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="y" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-layout.c"
                 line="2049">the Y offset (in Pango units)
            from the top edge of the layout</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="index_"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="../pango/pango-layout.c"
                 line="2051">location to store calculated byte index</doc>
            <type name="gint" c:type="int*"/>
          </parameter>
          <parameter name="trailing"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="../pango/pango-layout.c"
                 line="2052">location to store a integer indicating where
            in the grapheme the user clicked. It will either
            be zero, or the number of characters in the
            grapheme. 0 represents the leading edge of the grapheme.</doc>
            <type name="gint" c:type="int*"/>
          </parameter>
        </parameters>
      </method>
    </class>
    <record name="LayoutClass"
            c:type="PangoLayoutClass"
            disguised="1"
            glib:is-gtype-struct-for="Layout">
      <source-position filename="../pango/pango-layout.h" line="33"/>
    </record>
    <record name="LayoutIter"
            c:type="PangoLayoutIter"
            glib:type-name="PangoLayoutIter"
            glib:get-type="pango_layout_iter_get_type"
            c:symbol-prefix="layout_iter">
      <doc xml:space="preserve"
           filename="../pango/pango-layout.c"
           line="61">A #PangoLayoutIter structure can be used to
iterate over the visual extents of a #PangoLayout.

The #PangoLayoutIter structure is opaque, and
has no user-visible fields.</doc>
      <source-position filename="../pango/pango-layout.h" line="372"/>
      <method name="at_last_line"
              c:identifier="pango_layout_iter_at_last_line">
        <doc xml:space="preserve"
             filename="../pango/pango-layout.c"
             line="6437">Determines whether @iter is on the last line of the layout.</doc>
        <source-position filename="../pango/pango-layout.h" line="397"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../pango/pango-layout.c"
               line="6443">%TRUE if @iter is on the last line.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="iter" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-layout.c"
                 line="6439">a #PangoLayoutIter</doc>
            <type name="LayoutIter" c:type="PangoLayoutIter*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="copy" c:identifier="pango_layout_iter_copy" version="1.20">
        <doc xml:space="preserve"
             filename="../pango/pango-layout.c"
             line="6146">Copies a #PangoLayoutIter.</doc>
        <source-position filename="../pango/pango-layout.h" line="382"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="../pango/pango-layout.c"
               line="6152">the newly allocated #PangoLayoutIter,
              which should be freed with pango_layout_iter_free(),
              or %NULL if @iter was %NULL.</doc>
          <type name="LayoutIter" c:type="PangoLayoutIter*"/>
        </return-value>
        <parameters>
          <instance-parameter name="iter"
                              transfer-ownership="none"
                              nullable="1"
                              allow-none="1">
            <doc xml:space="preserve"
                 filename="../pango/pango-layout.c"
                 line="6148">a #PangoLayoutIter, may be %NULL</doc>
            <type name="LayoutIter" c:type="PangoLayoutIter*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="free" c:identifier="pango_layout_iter_free">
        <doc xml:space="preserve"
             filename="../pango/pango-layout.c"
             line="6294">Frees an iterator that's no longer in use.</doc>
        <source-position filename="../pango/pango-layout.h" line="384"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="iter"
                              transfer-ownership="none"
                              nullable="1"
                              allow-none="1">
            <doc xml:space="preserve"
                 filename="../pango/pango-layout.c"
                 line="6296">a #PangoLayoutIter, may be %NULL</doc>
            <type name="LayoutIter" c:type="PangoLayoutIter*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_baseline"
              c:identifier="pango_layout_iter_get_baseline">
        <doc xml:space="preserve"
             filename="../pango/pango-layout.c"
             line="6978">Gets the Y position of the current line's baseline, in layout
coordinates (origin at top left of the entire layout).</doc>
        <source-position filename="../pango/pango-layout.h" line="437"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../pango/pango-layout.c"
               line="6985">baseline of current line.</doc>
          <type name="gint" c:type="int"/>
        </return-value>
        <parameters>
          <instance-parameter name="iter" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-layout.c"
                 line="6980">a #PangoLayoutIter</doc>
            <type name="LayoutIter" c:type="PangoLayoutIter*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_char_extents"
              c:identifier="pango_layout_iter_get_char_extents">
        <doc xml:space="preserve"
             filename="../pango/pango-layout.c"
             line="6724">Gets the extents of the current character, in layout coordinates
(origin is the top left of the entire layout). Only logical extents
can sensibly be obtained for characters; ink extents make sense only
down to the level of clusters.</doc>
        <source-position filename="../pango/pango-layout.h" line="411"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="iter" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-layout.c"
                 line="6726">a #PangoLayoutIter</doc>
            <type name="LayoutIter" c:type="PangoLayoutIter*"/>
          </instance-parameter>
          <parameter name="logical_rect"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-layout.c"
                 line="6727">rectangle to fill with
  logical extents</doc>
            <type name="Rectangle" c:type="PangoRectangle*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_cluster_extents"
              c:identifier="pango_layout_iter_get_cluster_extents">
        <doc xml:space="preserve"
             filename="../pango/pango-layout.c"
             line="6776">Gets the extents of the current cluster, in layout coordinates
(origin is the top left of the entire layout).</doc>
        <source-position filename="../pango/pango-layout.h" line="414"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="iter" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-layout.c"
                 line="6778">a #PangoLayoutIter</doc>
            <type name="LayoutIter" c:type="PangoLayoutIter*"/>
          </instance-parameter>
          <parameter name="ink_rect"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../pango/pango-layout.c"
                 line="6779">rectangle to fill with ink extents, or %NULL</doc>
            <type name="Rectangle" c:type="PangoRectangle*"/>
          </parameter>
          <parameter name="logical_rect"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../pango/pango-layout.c"
                 line="6780">rectangle to fill with logical extents, or %NULL</doc>
            <type name="Rectangle" c:type="PangoRectangle*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_index" c:identifier="pango_layout_iter_get_index">
        <doc xml:space="preserve"
             filename="../pango/pango-layout.c"
             line="6310">Gets the current byte index. Note that iterating forward by char
moves in visual order, not logical order, so indexes may not be
sequential. Also, the index may be equal to the length of the text
in the layout, if on the %NULL run (see pango_layout_iter_get_run()).</doc>
        <source-position filename="../pango/pango-layout.h" line="387"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../pango/pango-layout.c"
               line="6319">current byte index.</doc>
          <type name="gint" c:type="int"/>
        </return-value>
        <parameters>
          <instance-parameter name="iter" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-layout.c"
                 line="6312">a #PangoLayoutIter</doc>
            <type name="LayoutIter" c:type="PangoLayoutIter*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_layout"
              c:identifier="pango_layout_iter_get_layout"
              version="1.20">
        <doc xml:space="preserve"
             filename="../pango/pango-layout.c"
             line="6454">Gets the layout associated with a #PangoLayoutIter.</doc>
        <source-position filename="../pango/pango-layout.h" line="399"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../pango/pango-layout.c"
               line="6460">the layout associated with @iter.</doc>
          <type name="Layout" c:type="PangoLayout*"/>
        </return-value>
        <parameters>
          <instance-parameter name="iter" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-layout.c"
                 line="6456">a #PangoLayoutIter</doc>
            <type name="LayoutIter" c:type="PangoLayoutIter*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_layout_extents"
              c:identifier="pango_layout_iter_get_layout_extents">
        <doc xml:space="preserve"
             filename="../pango/pango-layout.c"
             line="6996">Obtains the extents of the #PangoLayout being iterated
over. @ink_rect or @logical_rect can be %NULL if you
aren't interested in them.</doc>
        <source-position filename="../pango/pango-layout.h" line="433"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="iter" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-layout.c"
                 line="6998">a #PangoLayoutIter</doc>
            <type name="LayoutIter" c:type="PangoLayoutIter*"/>
          </instance-parameter>
          <parameter name="ink_rect"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../pango/pango-layout.c"
                 line="6999">rectangle to fill with ink extents,
           or %NULL</doc>
            <type name="Rectangle" c:type="PangoRectangle*"/>
          </parameter>
          <parameter name="logical_rect"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../pango/pango-layout.c"
                 line="7001">rectangle to fill with logical
               extents, or %NULL</doc>
            <type name="Rectangle" c:type="PangoRectangle*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_line" c:identifier="pango_layout_iter_get_line">
        <doc xml:space="preserve"
             filename="../pango/pango-layout.c"
             line="6391">Gets the current line.

Use the faster pango_layout_iter_get_line_readonly() if you do not plan
to modify the contents of the line (glyphs, glyph widths, etc.).</doc>
        <source-position filename="../pango/pango-layout.h" line="393"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../pango/pango-layout.c"
               line="6400">the current line.</doc>
          <type name="LayoutLine" c:type="PangoLayoutLine*"/>
        </return-value>
        <parameters>
          <instance-parameter name="iter" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-layout.c"
                 line="6393">a #PangoLayoutIter</doc>
            <type name="LayoutIter" c:type="PangoLayoutIter*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_line_extents"
              c:identifier="pango_layout_iter_get_line_extents">
        <doc xml:space="preserve"
             filename="../pango/pango-layout.c"
             line="6881">Obtains the extents of the current line. @ink_rect or @logical_rect
can be %NULL if you aren't interested in them. Extents are in layout
coordinates (origin is the top-left corner of the entire
#PangoLayout).  Thus the extents returned by this function will be
the same width/height but not at the same x/y as the extents
returned from pango_layout_line_get_extents().</doc>
        <source-position filename="../pango/pango-layout.h" line="422"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="iter" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-layout.c"
                 line="6883">a #PangoLayoutIter</doc>
            <type name="LayoutIter" c:type="PangoLayoutIter*"/>
          </instance-parameter>
          <parameter name="ink_rect"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../pango/pango-layout.c"
                 line="6884">rectangle to fill with ink extents, or %NULL</doc>
            <type name="Rectangle" c:type="PangoRectangle*"/>
          </parameter>
          <parameter name="logical_rect"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../pango/pango-layout.c"
                 line="6885">rectangle to fill with logical extents, or %NULL</doc>
            <type name="Rectangle" c:type="PangoRectangle*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_line_readonly"
              c:identifier="pango_layout_iter_get_line_readonly"
              version="1.16">
        <doc xml:space="preserve"
             filename="../pango/pango-layout.c"
             line="6413">Gets the current line for read-only access.

This is a faster alternative to pango_layout_iter_get_line(),
but the user is not expected
to modify the contents of the line (glyphs, glyph widths, etc.).</doc>
        <source-position filename="../pango/pango-layout.h" line="395"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../pango/pango-layout.c"
               line="6423">the current line, that should not be
modified.</doc>
          <type name="LayoutLine" c:type="PangoLayoutLine*"/>
        </return-value>
        <parameters>
          <instance-parameter name="iter" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-layout.c"
                 line="6415">a #PangoLayoutIter</doc>
            <type name="LayoutIter" c:type="PangoLayoutIter*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_line_yrange"
              c:identifier="pango_layout_iter_get_line_yrange">
        <doc xml:space="preserve"
             filename="../pango/pango-layout.c"
             line="6921">Divides the vertical space in the #PangoLayout being iterated over
between the lines in the layout, and returns the space belonging to
the current line.  A line's range includes the line's logical
extents, plus half of the spacing above and below the line, if
pango_layout_set_spacing() has been called to set layout spacing.
The Y positions are in layout coordinates (origin at top left of the
entire layout).

Note: Since 1.44, Pango uses line heights for placing lines,
and there may be gaps between the ranges returned by this
function.</doc>
        <source-position filename="../pango/pango-layout.h" line="429"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="iter" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-layout.c"
                 line="6923">a #PangoLayoutIter</doc>
            <type name="LayoutIter" c:type="PangoLayoutIter*"/>
          </instance-parameter>
          <parameter name="y0_"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../pango/pango-layout.c"
                 line="6924">start of line, or %NULL</doc>
            <type name="gint" c:type="int*"/>
          </parameter>
          <parameter name="y1_"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../pango/pango-layout.c"
                 line="6925">end of line, or %NULL</doc>
            <type name="gint" c:type="int*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_run" c:identifier="pango_layout_iter_get_run">
        <doc xml:space="preserve"
             filename="../pango/pango-layout.c"
             line="6330">Gets the current run. When iterating by run, at the end of each
line, there's a position with a %NULL run, so this function can return
%NULL. The %NULL run at the end of each line ensures that all lines have
at least one run, even lines consisting of only a newline.

Use the faster pango_layout_iter_get_run_readonly() if you do not plan
to modify the contents of the run (glyphs, glyph widths, etc.).</doc>
        <source-position filename="../pango/pango-layout.h" line="389"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="../pango/pango-layout.c"
               line="6342">the current run.</doc>
          <type name="LayoutRun" c:type="PangoLayoutRun*"/>
        </return-value>
        <parameters>
          <instance-parameter name="iter" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-layout.c"
                 line="6332">a #PangoLayoutIter</doc>
            <type name="LayoutIter" c:type="PangoLayoutIter*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_run_extents"
              c:identifier="pango_layout_iter_get_run_extents">
        <doc xml:space="preserve"
             filename="../pango/pango-layout.c"
             line="6824">Gets the extents of the current run in layout coordinates
(origin is the top left of the entire layout).</doc>
        <source-position filename="../pango/pango-layout.h" line="418"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="iter" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-layout.c"
                 line="6826">a #PangoLayoutIter</doc>
            <type name="LayoutIter" c:type="PangoLayoutIter*"/>
          </instance-parameter>
          <parameter name="ink_rect"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../pango/pango-layout.c"
                 line="6827">rectangle to fill with ink extents, or %NULL</doc>
            <type name="Rectangle" c:type="PangoRectangle*"/>
          </parameter>
          <parameter name="logical_rect"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../pango/pango-layout.c"
                 line="6828">rectangle to fill with logical extents, or %NULL</doc>
            <type name="Rectangle" c:type="PangoRectangle*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_run_readonly"
              c:identifier="pango_layout_iter_get_run_readonly"
              version="1.16">
        <doc xml:space="preserve"
             filename="../pango/pango-layout.c"
             line="6355">Gets the current run. When iterating by run, at the end of each
line, there's a position with a %NULL run, so this function can return
%NULL. The %NULL run at the end of each line ensures that all lines have
at least one run, even lines consisting of only a newline.

This is a faster alternative to pango_layout_iter_get_run(),
but the user is not expected
to modify the contents of the run (glyphs, glyph widths, etc.).</doc>
        <source-position filename="../pango/pango-layout.h" line="391"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="../pango/pango-layout.c"
               line="6368">the current run, that
should not be modified.</doc>
          <type name="LayoutRun" c:type="PangoLayoutRun*"/>
        </return-value>
        <parameters>
          <instance-parameter name="iter" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-layout.c"
                 line="6357">a #PangoLayoutIter</doc>
            <type name="LayoutIter" c:type="PangoLayoutIter*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="next_char" c:identifier="pango_layout_iter_next_char">
        <doc xml:space="preserve"
             filename="../pango/pango-layout.c"
             line="6577">Moves @iter forward to the next character in visual order. If @iter was already at
the end of the layout, returns %FALSE.</doc>
        <source-position filename="../pango/pango-layout.h" line="402"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../pango/pango-layout.c"
               line="6584">whether motion was possible.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="iter" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-layout.c"
                 line="6579">a #PangoLayoutIter</doc>
            <type name="LayoutIter" c:type="PangoLayoutIter*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="next_cluster"
              c:identifier="pango_layout_iter_next_cluster">
        <doc xml:space="preserve"
             filename="../pango/pango-layout.c"
             line="6621">Moves @iter forward to the next cluster in visual order. If @iter
was already at the end of the layout, returns %FALSE.</doc>
        <source-position filename="../pango/pango-layout.h" line="404"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../pango/pango-layout.c"
               line="6628">whether motion was possible.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="iter" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-layout.c"
                 line="6623">a #PangoLayoutIter</doc>
            <type name="LayoutIter" c:type="PangoLayoutIter*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="next_line" c:identifier="pango_layout_iter_next_line">
        <doc xml:space="preserve"
             filename="../pango/pango-layout.c"
             line="6680">Moves @iter forward to the start of the next line. If @iter is
already on the last line, returns %FALSE.</doc>
        <source-position filename="../pango/pango-layout.h" line="408"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../pango/pango-layout.c"
               line="6687">whether motion was possible.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="iter" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-layout.c"
                 line="6682">a #PangoLayoutIter</doc>
            <type name="LayoutIter" c:type="PangoLayoutIter*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="next_run" c:identifier="pango_layout_iter_next_run">
        <doc xml:space="preserve"
             filename="../pango/pango-layout.c"
             line="6636">Moves @iter forward to the next run in visual order. If @iter was
already at the end of the layout, returns %FALSE.</doc>
        <source-position filename="../pango/pango-layout.h" line="406"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../pango/pango-layout.c"
               line="6643">whether motion was possible.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="iter" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-layout.c"
                 line="6638">a #PangoLayoutIter</doc>
            <type name="LayoutIter" c:type="PangoLayoutIter*"/>
          </instance-parameter>
        </parameters>
      </method>
    </record>
    <record name="LayoutLine"
            c:type="PangoLayoutLine"
            glib:type-name="PangoLayoutLine"
            glib:get-type="pango_layout_line_get_type"
            c:symbol-prefix="layout_line">
      <doc xml:space="preserve"
           filename="../pango/pango-layout.h"
           line="97">The #PangoLayoutLine structure represents one of the lines resulting
from laying out a paragraph via #PangoLayout. #PangoLayoutLine
structures are obtained by calling pango_layout_get_line() and
are only valid until the text, attributes, or settings of the
parent #PangoLayout are modified.

Routines for rendering PangoLayout objects are provided in
code specific to each rendering system.</doc>
      <source-position filename="../pango/pango-layout.h" line="124"/>
      <field name="layout" writable="1">
        <doc xml:space="preserve"
             filename="../pango/pango-layout.h"
             line="99">the layout this line belongs to, might be %NULL</doc>
        <type name="Layout" c:type="PangoLayout*"/>
      </field>
      <field name="start_index" writable="1">
        <doc xml:space="preserve"
             filename="../pango/pango-layout.h"
             line="100">start of line as byte index into layout-&gt;text</doc>
        <type name="gint" c:type="gint"/>
      </field>
      <field name="length" writable="1">
        <doc xml:space="preserve"
             filename="../pango/pango-layout.h"
             line="101">length of line in bytes</doc>
        <type name="gint" c:type="gint"/>
      </field>
      <field name="runs" writable="1">
        <doc xml:space="preserve"
             filename="../pango/pango-layout.h"
             line="102">list of runs in the
       line, from left to right</doc>
        <type name="GLib.SList" c:type="GSList*">
          <type name="LayoutRun"/>
        </type>
      </field>
      <field name="is_paragraph_start" writable="1" bits="1">
        <doc xml:space="preserve"
             filename="../pango/pango-layout.h"
             line="104">#TRUE if this is the first line of the paragraph</doc>
        <type name="guint" c:type="guint"/>
      </field>
      <field name="resolved_dir" writable="1" bits="3">
        <doc xml:space="preserve"
             filename="../pango/pango-layout.h"
             line="105">#Resolved PangoDirection of line</doc>
        <type name="guint" c:type="guint"/>
      </field>
      <method name="get_extents" c:identifier="pango_layout_line_get_extents">
        <doc xml:space="preserve"
             filename="../pango/pango-layout.c"
             line="5224">Computes the logical and ink extents of a layout line. See
pango_font_get_glyph_extents() for details about the interpretation
of the rectangles.</doc>
        <source-position filename="../pango/pango-layout.h" line="360"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="line" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-layout.c"
                 line="5226">a #PangoLayoutLine</doc>
            <type name="LayoutLine" c:type="PangoLayoutLine*"/>
          </instance-parameter>
          <parameter name="ink_rect"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../pango/pango-layout.c"
                 line="5227">rectangle used to store the extents of
           the glyph string as drawn, or %NULL</doc>
            <type name="Rectangle" c:type="PangoRectangle*"/>
          </parameter>
          <parameter name="logical_rect"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../pango/pango-layout.c"
                 line="5229">rectangle used to store the logical
               extents of the glyph string, or %NULL</doc>
            <type name="Rectangle" c:type="PangoRectangle*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_height"
              c:identifier="pango_layout_line_get_height"
              version="1.44">
        <doc xml:space="preserve"
             filename="../pango/pango-layout.c"
             line="5244">Computes the height of the line, ie the distance between
this and the previous lines baseline.</doc>
        <source-position filename="../pango/pango-layout.h" line="364"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="line" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-layout.c"
                 line="5246">a #PangoLayoutLine</doc>
            <type name="LayoutLine" c:type="PangoLayoutLine*"/>
          </instance-parameter>
          <parameter name="height"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../pango/pango-layout.c"
                 line="5247">return location for the line height</doc>
            <type name="gint" c:type="int*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_pixel_extents"
              c:identifier="pango_layout_line_get_pixel_extents">
        <doc xml:space="preserve"
             filename="../pango/pango-layout.c"
             line="5278">Computes the logical and ink extents of @layout_line in device units.
This function just calls pango_layout_line_get_extents() followed by
two pango_extents_to_pixels() calls, rounding @ink_rect and @logical_rect
such that the rounded rectangles fully contain the unrounded one (that is,
passes them as first argument to pango_extents_to_pixels()).</doc>
        <source-position filename="../pango/pango-layout.h" line="368"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="layout_line" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-layout.c"
                 line="5280">a #PangoLayoutLine</doc>
            <type name="LayoutLine" c:type="PangoLayoutLine*"/>
          </instance-parameter>
          <parameter name="ink_rect"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../pango/pango-layout.c"
                 line="5281">rectangle used to store the extents of
                  the glyph string as drawn, or %NULL</doc>
            <type name="Rectangle" c:type="PangoRectangle*"/>
          </parameter>
          <parameter name="logical_rect"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../pango/pango-layout.c"
                 line="5283">rectangle used to store the logical
                      extents of the glyph string, or %NULL</doc>
            <type name="Rectangle" c:type="PangoRectangle*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_x_ranges"
              c:identifier="pango_layout_line_get_x_ranges">
        <doc xml:space="preserve"
             filename="../pango/pango-layout.c"
             line="4716">Gets a list of visual ranges corresponding to a given logical range.
This list is not necessarily minimal - there may be consecutive
ranges which are adjacent. The ranges will be sorted from left to
right. The ranges are with respect to the left edge of the entire
layout, not with respect to the line.</doc>
        <source-position filename="../pango/pango-layout.h" line="354"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="line" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-layout.c"
                 line="4718">a #PangoLayoutLine</doc>
            <type name="LayoutLine" c:type="PangoLayoutLine*"/>
          </instance-parameter>
          <parameter name="start_index" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-layout.c"
                 line="4719">Start byte index of the logical range. If this value
              is less than the start index for the line, then
              the first range will extend all the way to the leading
              edge of the layout. Otherwise it will start at the
              leading edge of the first character.</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="end_index" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-layout.c"
                 line="4724">Ending byte index of the logical range. If this value
              is greater than the end index for the line, then
              the last range will extend all the way to the trailing
              edge of the layout. Otherwise, it will end at the
              trailing edge of the last character.</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="ranges"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="../pango/pango-layout.c"
                 line="4729">
              location to store a pointer to an array of ranges.
              The array will be of length &lt;literal&gt;2*n_ranges&lt;/literal&gt;,
              with each range starting at &lt;literal&gt;(*ranges)[2*n]&lt;/literal&gt;
              and of width &lt;literal&gt;(*ranges)[2*n + 1] - (*ranges)[2*n]&lt;/literal&gt;.
              This array must be freed with g_free(). The coordinates are relative
              to the layout and are in Pango units.</doc>
            <array length="3" zero-terminated="0" c:type="int**">
              <type name="gint" c:type="int*"/>
            </array>
          </parameter>
          <parameter name="n_ranges"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="../pango/pango-layout.c"
                 line="4736">The number of ranges stored in @ranges.</doc>
            <type name="gint" c:type="int*"/>
          </parameter>
        </parameters>
      </method>
      <method name="index_to_x" c:identifier="pango_layout_line_index_to_x">
        <doc xml:space="preserve"
             filename="../pango/pango-layout.c"
             line="1655">Converts an index within a line to a X position.</doc>
        <source-position filename="../pango/pango-layout.h" line="349"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="line" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-layout.c"
                 line="1657">a #PangoLayoutLine</doc>
            <type name="LayoutLine" c:type="PangoLayoutLine*"/>
          </instance-parameter>
          <parameter name="index_" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-layout.c"
                 line="1658">byte offset of a grapheme within the layout</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="trailing" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-layout.c"
                 line="1659">an integer indicating the edge of the grapheme to retrieve
           the position of. If &gt; 0, the trailing edge of the grapheme,
           if 0, the leading of the grapheme.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="x_pos"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="../pango/pango-layout.c"
                 line="1662">location to store the x_offset (in Pango unit)</doc>
            <type name="gint" c:type="int*"/>
          </parameter>
        </parameters>
      </method>
      <method name="ref" c:identifier="pango_layout_line_ref" version="1.10">
        <doc xml:space="preserve"
             filename="../pango/pango-layout.c"
             line="4443">Increase the reference count of a #PangoLayoutLine by one.</doc>
        <source-position filename="../pango/pango-layout.h" line="339"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../pango/pango-layout.c"
               line="4449">the line passed in.</doc>
          <type name="LayoutLine" c:type="PangoLayoutLine*"/>
        </return-value>
        <parameters>
          <instance-parameter name="line"
                              transfer-ownership="none"
                              nullable="1"
                              allow-none="1">
            <doc xml:space="preserve"
                 filename="../pango/pango-layout.c"
                 line="4445">a #PangoLayoutLine, may be %NULL</doc>
            <type name="LayoutLine" c:type="PangoLayoutLine*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="unref" c:identifier="pango_layout_line_unref">
        <doc xml:space="preserve"
             filename="../pango/pango-layout.c"
             line="4466">Decrease the reference count of a #PangoLayoutLine by one.
If the result is zero, the line and all associated memory
will be freed.</doc>
        <source-position filename="../pango/pango-layout.h" line="341"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="line" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-layout.c"
                 line="4468">a #PangoLayoutLine</doc>
            <type name="LayoutLine" c:type="PangoLayoutLine*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="x_to_index" c:identifier="pango_layout_line_x_to_index">
        <doc xml:space="preserve"
             filename="../pango/pango-layout.c"
             line="4496">Converts from x offset to the byte index of the corresponding
character within the text of the layout. If @x_pos is outside the line,
@index_ and @trailing will point to the very first or very last position
in the line. This determination is based on the resolved direction
of the paragraph; for example, if the resolved direction is
right-to-left, then an X position to the right of the line (after it)
results in 0 being stored in @index_ and @trailing. An X position to the
left of the line results in @index_ pointing to the (logical) last
grapheme in the line and @trailing being set to the number of characters
in that grapheme. The reverse is true for a left-to-right line.</doc>
        <source-position filename="../pango/pango-layout.h" line="344"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../pango/pango-layout.c"
               line="4519">%FALSE if @x_pos was outside the line, %TRUE if inside</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="line" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-layout.c"
                 line="4498">a #PangoLayoutLine</doc>
            <type name="LayoutLine" c:type="PangoLayoutLine*"/>
          </instance-parameter>
          <parameter name="x_pos" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-layout.c"
                 line="4499">the X offset (in Pango units)
            from the left edge of the line.</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="index_"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="../pango/pango-layout.c"
                 line="4501">location to store calculated byte index for
                  the grapheme in which the user clicked.</doc>
            <type name="gint" c:type="int*"/>
          </parameter>
          <parameter name="trailing"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="../pango/pango-layout.c"
                 line="4503">location to store an integer indicating where
                  in the grapheme the user clicked. It will either
                  be zero, or the number of characters in the
                  grapheme. 0 represents the leading edge of the grapheme.</doc>
            <type name="gint" c:type="int*"/>
          </parameter>
        </parameters>
      </method>
    </record>
    <record name="LogAttr" c:type="PangoLogAttr">
      <doc xml:space="preserve"
           filename="../pango/pango-break.h"
           line="33">The #PangoLogAttr structure stores information
about the attributes of a single character.</doc>
      <source-position filename="../pango/pango-break.h" line="101"/>
      <field name="is_line_break" writable="1" bits="1">
        <doc xml:space="preserve"
             filename="../pango/pango-break.h"
             line="35">if set, can break line in front of character</doc>
        <type name="guint" c:type="guint"/>
      </field>
      <field name="is_mandatory_break" writable="1" bits="1">
        <doc xml:space="preserve"
             filename="../pango/pango-break.h"
             line="36">if set, must break line in front of character</doc>
        <type name="guint" c:type="guint"/>
      </field>
      <field name="is_char_break" writable="1" bits="1">
        <doc xml:space="preserve"
             filename="../pango/pango-break.h"
             line="37">if set, can break here when doing character wrapping</doc>
        <type name="guint" c:type="guint"/>
      </field>
      <field name="is_white" writable="1" bits="1">
        <doc xml:space="preserve"
             filename="../pango/pango-break.h"
             line="38">is whitespace character</doc>
        <type name="guint" c:type="guint"/>
      </field>
      <field name="is_cursor_position" writable="1" bits="1">
        <doc xml:space="preserve"
             filename="../pango/pango-break.h"
             line="39">if set, cursor can appear in front of character.
i.e. this is a grapheme boundary, or the first character
in the text.
This flag implements Unicode's
&lt;ulink url="http://www.unicode.org/reports/tr29/"&gt;Grapheme
Cluster Boundaries&lt;/ulink&gt; semantics.</doc>
        <type name="guint" c:type="guint"/>
      </field>
      <field name="is_word_start" writable="1" bits="1">
        <doc xml:space="preserve"
             filename="../pango/pango-break.h"
             line="45">is first character in a word</doc>
        <type name="guint" c:type="guint"/>
      </field>
      <field name="is_word_end" writable="1" bits="1">
        <doc xml:space="preserve"
             filename="../pango/pango-break.h"
             line="46">is first non-word char after a word
Note that in degenerate cases, you could have both @is_word_start
and @is_word_end set for some character.</doc>
        <type name="guint" c:type="guint"/>
      </field>
      <field name="is_sentence_boundary" writable="1" bits="1">
        <doc xml:space="preserve"
             filename="../pango/pango-break.h"
             line="49">is a sentence boundary.
There are two ways to divide sentences. The first assigns all
inter-sentence whitespace/control/format chars to some sentence,
so all chars are in some sentence; @is_sentence_boundary denotes
the boundaries there. The second way doesn't assign
between-sentence spaces, etc. to any sentence, so
@is_sentence_start/@is_sentence_end mark the boundaries of those sentences.</doc>
        <type name="guint" c:type="guint"/>
      </field>
      <field name="is_sentence_start" writable="1" bits="1">
        <doc xml:space="preserve"
             filename="../pango/pango-break.h"
             line="56">is first character in a sentence</doc>
        <type name="guint" c:type="guint"/>
      </field>
      <field name="is_sentence_end" writable="1" bits="1">
        <doc xml:space="preserve"
             filename="../pango/pango-break.h"
             line="57">is first char after a sentence.
Note that in degenerate cases, you could have both @is_sentence_start
and @is_sentence_end set for some character. (e.g. no space after a
period, so the next sentence starts right away)</doc>
        <type name="guint" c:type="guint"/>
      </field>
      <field name="backspace_deletes_character" writable="1" bits="1">
        <doc xml:space="preserve"
             filename="../pango/pango-break.h"
             line="61">if set, backspace deletes one character
rather than the entire grapheme cluster. This
field is only meaningful on grapheme
boundaries (where @is_cursor_position is
set).  In some languages, the full grapheme
(e.g.  letter + diacritics) is considered a
unit, while in others, each decomposed
character in the grapheme is a unit. In the
default implementation of pango_break(), this
bit is set on all grapheme boundaries except
those following Latin, Cyrillic or Greek base characters.</doc>
        <type name="guint" c:type="guint"/>
      </field>
      <field name="is_expandable_space" writable="1" bits="1">
        <doc xml:space="preserve"
             filename="../pango/pango-break.h"
             line="72">is a whitespace character that can possibly be
expanded for justification purposes. (Since: 1.18)</doc>
        <type name="guint" c:type="guint"/>
      </field>
      <field name="is_word_boundary" writable="1" bits="1">
        <doc xml:space="preserve"
             filename="../pango/pango-break.h"
             line="74">is a word boundary, as defined by UAX#29.
More specifically, means that this is not a position in the middle
of a word.  For example, both sides of a punctuation mark are
considered word boundaries.  This flag is particularly useful when
selecting text word-by-word.
This flag implements Unicode's
&lt;ulink url="http://www.unicode.org/reports/tr29/"&gt;Word
Boundaries&lt;/ulink&gt; semantics. (Since: 1.22)</doc>
        <type name="guint" c:type="guint"/>
      </field>
    </record>
    <record name="Map" c:type="PangoMap" disguised="1">
      <source-position filename="../pango/pango-modules.h" line="31"/>
      <method name="get_engine"
              c:identifier="pango_map_get_engine"
              introspectable="0"
              deprecated="1"
              deprecated-version="1.38">
        <doc xml:space="preserve"
             filename="../pango/modules.c"
             line="59">Do not use.  Does not do anything.</doc>
        <source-position filename="../pango/pango-modules.h" line="63"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="../pango/modules.c"
               line="66">%NULL.</doc>
          <type name="Engine" c:type="PangoEngine*"/>
        </return-value>
        <parameters>
          <instance-parameter name="map" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/modules.c"
                 line="61">a #PangoMap</doc>
            <type name="Map" c:type="PangoMap*"/>
          </instance-parameter>
          <parameter name="script" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/modules.c"
                 line="62">a #PangoScript</doc>
            <type name="Script" c:type="PangoScript"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_engines"
              c:identifier="pango_map_get_engines"
              version="1.4"
              introspectable="0"
              deprecated="1"
              deprecated-version="1.38">
        <doc xml:space="preserve"
             filename="../pango/modules.c"
             line="77">Do not use.  Does not do anything.</doc>
        <source-position filename="../pango/pango-modules.h" line="66"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="map" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/modules.c"
                 line="79">a #PangoMap</doc>
            <type name="Map" c:type="PangoMap*"/>
          </instance-parameter>
          <parameter name="script" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/modules.c"
                 line="80">a #PangoScript</doc>
            <type name="Script" c:type="PangoScript"/>
          </parameter>
          <parameter name="exact_engines"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../pango/modules.c"
                 line="81">location to store list of engines that exactly
 handle this script.</doc>
            <type name="GLib.SList" c:type="GSList**">
              <type name="gpointer" c:type="gpointer"/>
            </type>
          </parameter>
          <parameter name="fallback_engines"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../pango/modules.c"
                 line="83">location to store list of engines that
 approximately handle this script.</doc>
            <type name="GLib.SList" c:type="GSList**">
              <type name="gpointer" c:type="gpointer"/>
            </type>
          </parameter>
        </parameters>
      </method>
    </record>
    <record name="MapEntry" c:type="PangoMapEntry" disguised="1">
      <source-position filename="../pango/pango-modules.h" line="32"/>
    </record>
    <record name="Matrix"
            c:type="PangoMatrix"
            version="1.6"
            glib:type-name="PangoMatrix"
            glib:get-type="pango_matrix_get_type"
            c:symbol-prefix="matrix">
      <doc xml:space="preserve"
           filename="../pango/pango-matrix.h"
           line="32">A structure specifying a transformation between user-space
coordinates and device coordinates. The transformation
is given by

&lt;programlisting&gt;
x_device = x_user * matrix-&gt;xx + y_user * matrix-&gt;xy + matrix-&gt;x0;
y_device = x_user * matrix-&gt;yx + y_user * matrix-&gt;yy + matrix-&gt;y0;
&lt;/programlisting&gt;</doc>
      <source-position filename="../pango/pango-matrix.h" line="60"/>
      <field name="xx" writable="1">
        <doc xml:space="preserve"
             filename="../pango/pango-matrix.h"
             line="34">1st component of the transformation matrix</doc>
        <type name="gdouble" c:type="double"/>
      </field>
      <field name="xy" writable="1">
        <doc xml:space="preserve"
             filename="../pango/pango-matrix.h"
             line="35">2nd component of the transformation matrix</doc>
        <type name="gdouble" c:type="double"/>
      </field>
      <field name="yx" writable="1">
        <doc xml:space="preserve"
             filename="../pango/pango-matrix.h"
             line="36">3rd component of the transformation matrix</doc>
        <type name="gdouble" c:type="double"/>
      </field>
      <field name="yy" writable="1">
        <doc xml:space="preserve"
             filename="../pango/pango-matrix.h"
             line="37">4th component of the transformation matrix</doc>
        <type name="gdouble" c:type="double"/>
      </field>
      <field name="x0" writable="1">
        <doc xml:space="preserve"
             filename="../pango/pango-matrix.h"
             line="38">x translation</doc>
        <type name="gdouble" c:type="double"/>
      </field>
      <field name="y0" writable="1">
        <doc xml:space="preserve"
             filename="../pango/pango-matrix.h"
             line="39">y translation</doc>
        <type name="gdouble" c:type="double"/>
      </field>
      <method name="concat" c:identifier="pango_matrix_concat" version="1.6">
        <doc xml:space="preserve"
             filename="../pango/pango-matrix.c"
             line="160">Changes the transformation represented by @matrix to be the
transformation given by first applying transformation
given by @new_matrix then applying the original transformation.</doc>
        <source-position filename="../pango/pango-matrix.h" line="107"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="matrix" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-matrix.c"
                 line="162">a #PangoMatrix</doc>
            <type name="Matrix" c:type="PangoMatrix*"/>
          </instance-parameter>
          <parameter name="new_matrix" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-matrix.c"
                 line="163">a #PangoMatrix</doc>
            <type name="Matrix" c:type="const PangoMatrix*"/>
          </parameter>
        </parameters>
      </method>
      <method name="copy" c:identifier="pango_matrix_copy" version="1.6">
        <doc xml:space="preserve"
             filename="../pango/pango-matrix.c"
             line="33">Copies a #PangoMatrix.</doc>
        <source-position filename="../pango/pango-matrix.h" line="91"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="../pango/pango-matrix.c"
               line="39">the newly allocated #PangoMatrix, which
              should be freed with pango_matrix_free(), or %NULL if
              @matrix was %NULL.</doc>
          <type name="Matrix" c:type="PangoMatrix*"/>
        </return-value>
        <parameters>
          <instance-parameter name="matrix"
                              transfer-ownership="none"
                              nullable="1"
                              allow-none="1">
            <doc xml:space="preserve"
                 filename="../pango/pango-matrix.c"
                 line="35">a #PangoMatrix, may be %NULL</doc>
            <type name="Matrix" c:type="const PangoMatrix*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="free" c:identifier="pango_matrix_free" version="1.6">
        <doc xml:space="preserve"
             filename="../pango/pango-matrix.c"
             line="60">Free a #PangoMatrix created with pango_matrix_copy().</doc>
        <source-position filename="../pango/pango-matrix.h" line="93"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="matrix"
                              transfer-ownership="none"
                              nullable="1"
                              allow-none="1">
            <doc xml:space="preserve"
                 filename="../pango/pango-matrix.c"
                 line="62">a #PangoMatrix, may be %NULL</doc>
            <type name="Matrix" c:type="PangoMatrix*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_font_scale_factor"
              c:identifier="pango_matrix_get_font_scale_factor"
              version="1.12">
        <doc xml:space="preserve"
             filename="../pango/pango-matrix.c"
             line="189">Returns the scale factor of a matrix on the height of the font.
That is, the scale factor in the direction perpendicular to the
vector that the X coordinate is mapped to.  If the scale in the X
coordinate is needed as well, use pango_matrix_get_font_scale_factors().</doc>
        <source-position filename="../pango/pango-matrix.h" line="124"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../pango/pango-matrix.c"
               line="198">the scale factor of @matrix on the height of the font,
or 1.0 if @matrix is %NULL.</doc>
          <type name="gdouble" c:type="double"/>
        </return-value>
        <parameters>
          <instance-parameter name="matrix"
                              transfer-ownership="none"
                              nullable="1"
                              allow-none="1">
            <doc xml:space="preserve"
                 filename="../pango/pango-matrix.c"
                 line="191">a #PangoMatrix, may be %NULL</doc>
            <type name="Matrix" c:type="const PangoMatrix*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_font_scale_factors"
              c:identifier="pango_matrix_get_font_scale_factors"
              version="1.38">
        <doc xml:space="preserve"
             filename="../pango/pango-matrix.c"
             line="211">Calculates the scale factor of a matrix on the width and height of the font.
That is, @xscale is the scale factor in the direction of the X coordinate,
and @yscale is the scale factor in the direction perpendicular to the
vector that the X coordinate is mapped to.

Note that output numbers will always be non-negative.</doc>
        <source-position filename="../pango/pango-matrix.h" line="126"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="matrix"
                              transfer-ownership="none"
                              nullable="1"
                              allow-none="1">
            <doc xml:space="preserve"
                 filename="../pango/pango-matrix.c"
                 line="213">a #PangoMatrix, or %NULL</doc>
            <type name="Matrix" c:type="const PangoMatrix*"/>
          </instance-parameter>
          <parameter name="xscale"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../pango/pango-matrix.c"
                 line="214">output scale factor in the x direction, or %NULL</doc>
            <type name="gdouble" c:type="double*"/>
          </parameter>
          <parameter name="yscale"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../pango/pango-matrix.c"
                 line="215">output scale factor perpendicular to the x direction, or %NULL</doc>
            <type name="gdouble" c:type="double*"/>
          </parameter>
        </parameters>
      </method>
      <method name="rotate" c:identifier="pango_matrix_rotate" version="1.6">
        <doc xml:space="preserve"
             filename="../pango/pango-matrix.c"
             line="126">Changes the transformation represented by @matrix to be the
transformation given by first rotating by @degrees degrees
counter-clockwise then applying the original transformation.</doc>
        <source-position filename="../pango/pango-matrix.h" line="104"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="matrix" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-matrix.c"
                 line="128">a #PangoMatrix</doc>
            <type name="Matrix" c:type="PangoMatrix*"/>
          </instance-parameter>
          <parameter name="degrees" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-matrix.c"
                 line="129">degrees to rotate counter-clockwise</doc>
            <type name="gdouble" c:type="double"/>
          </parameter>
        </parameters>
      </method>
      <method name="scale" c:identifier="pango_matrix_scale" version="1.6">
        <doc xml:space="preserve"
             filename="../pango/pango-matrix.c"
             line="100">Changes the transformation represented by @matrix to be the
transformation given by first scaling by @sx in the X direction
and @sy in the Y direction then applying the original
transformation.</doc>
        <source-position filename="../pango/pango-matrix.h" line="100"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="matrix" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-matrix.c"
                 line="102">a #PangoMatrix</doc>
            <type name="Matrix" c:type="PangoMatrix*"/>
          </instance-parameter>
          <parameter name="scale_x" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-matrix.c"
                 line="103">amount to scale by in X direction</doc>
            <type name="gdouble" c:type="double"/>
          </parameter>
          <parameter name="scale_y" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-matrix.c"
                 line="104">amount to scale by in Y direction</doc>
            <type name="gdouble" c:type="double"/>
          </parameter>
        </parameters>
      </method>
      <method name="transform_distance"
              c:identifier="pango_matrix_transform_distance"
              version="1.16">
        <doc xml:space="preserve"
             filename="../pango/pango-matrix.c"
             line="265">Transforms the distance vector (@dx,@dy) by @matrix. This is
similar to pango_matrix_transform_point() except that the translation
components of the transformation are ignored. The calculation of
the returned vector is as follows:

&lt;programlisting&gt;
dx2 = dx1 * xx + dy1 * xy;
dy2 = dx1 * yx + dy1 * yy;
&lt;/programlisting&gt;

Affine transformations are position invariant, so the same vector
always transforms to the same vector. If (@x1,@y1) transforms
to (@x2,@y2) then (@x1+@dx1,@y1+@dy1) will transform to
(@x1+@dx2,@y1+@dy2) for all values of @x1 and @x2.</doc>
        <source-position filename="../pango/pango-matrix.h" line="114"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="matrix"
                              transfer-ownership="none"
                              nullable="1"
                              allow-none="1">
            <doc xml:space="preserve"
                 filename="../pango/pango-matrix.c"
                 line="267">a #PangoMatrix, or %NULL</doc>
            <type name="Matrix" c:type="const PangoMatrix*"/>
          </instance-parameter>
          <parameter name="dx"
                     direction="inout"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="../pango/pango-matrix.c"
                 line="268">in/out X component of a distance vector</doc>
            <type name="gdouble" c:type="double*"/>
          </parameter>
          <parameter name="dy"
                     direction="inout"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="../pango/pango-matrix.c"
                 line="269">in/out Y component of a distance vector</doc>
            <type name="gdouble" c:type="double*"/>
          </parameter>
        </parameters>
      </method>
      <method name="transform_pixel_rectangle"
              c:identifier="pango_matrix_transform_pixel_rectangle"
              version="1.16">
        <doc xml:space="preserve"
             filename="../pango/pango-matrix.c"
             line="409">First transforms the @rect using @matrix, then calculates the bounding box
of the transformed rectangle.  The rectangle should be in device units
(pixels).

This function is useful for example when you want to draw a rotated
@PangoLayout to an image buffer, and want to know how large the image
should be and how much you should shift the layout when rendering.

For better accuracy, you should use pango_matrix_transform_rectangle() on
original rectangle in Pango units and convert to pixels afterward
using pango_extents_to_pixels()'s first argument.</doc>
        <source-position filename="../pango/pango-matrix.h" line="121"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="matrix"
                              transfer-ownership="none"
                              nullable="1"
                              allow-none="1">
            <doc xml:space="preserve"
                 filename="../pango/pango-matrix.c"
                 line="411">a #PangoMatrix, or %NULL</doc>
            <type name="Matrix" c:type="const PangoMatrix*"/>
          </instance-parameter>
          <parameter name="rect"
                     direction="inout"
                     caller-allocates="0"
                     transfer-ownership="full"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../pango/pango-matrix.c"
                 line="412">in/out bounding box in device units, or %NULL</doc>
            <type name="Rectangle" c:type="PangoRectangle*"/>
          </parameter>
        </parameters>
      </method>
      <method name="transform_point"
              c:identifier="pango_matrix_transform_point"
              version="1.16">
        <doc xml:space="preserve"
             filename="../pango/pango-matrix.c"
             line="305">Transforms the point (@x, @y) by @matrix.</doc>
        <source-position filename="../pango/pango-matrix.h" line="110"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="matrix"
                              transfer-ownership="none"
                              nullable="1"
                              allow-none="1">
            <doc xml:space="preserve"
                 filename="../pango/pango-matrix.c"
                 line="307">a #PangoMatrix, or %NULL</doc>
            <type name="Matrix" c:type="const PangoMatrix*"/>
          </instance-parameter>
          <parameter name="x"
                     direction="inout"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="../pango/pango-matrix.c"
                 line="308">in/out X position</doc>
            <type name="gdouble" c:type="double*"/>
          </parameter>
          <parameter name="y"
                     direction="inout"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="../pango/pango-matrix.c"
                 line="309">in/out Y position</doc>
            <type name="gdouble" c:type="double*"/>
          </parameter>
        </parameters>
      </method>
      <method name="transform_rectangle"
              c:identifier="pango_matrix_transform_rectangle"
              version="1.16">
        <doc xml:space="preserve"
             filename="../pango/pango-matrix.c"
             line="329">First transforms @rect using @matrix, then calculates the bounding box
of the transformed rectangle.  The rectangle should be in Pango units.

This function is useful for example when you want to draw a rotated
@PangoLayout to an image buffer, and want to know how large the image
should be and how much you should shift the layout when rendering.

If you have a rectangle in device units (pixels), use
pango_matrix_transform_pixel_rectangle().

If you have the rectangle in Pango units and want to convert to
transformed pixel bounding box, it is more accurate to transform it first
(using this function) and pass the result to pango_extents_to_pixels(),
first argument, for an inclusive rounded rectangle.
However, there are valid reasons that you may want to convert
to pixels first and then transform, for example when the transformed
coordinates may overflow in Pango units (large matrix translation for
example).</doc>
        <source-position filename="../pango/pango-matrix.h" line="118"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="matrix"
                              transfer-ownership="none"
                              nullable="1"
                              allow-none="1">
            <doc xml:space="preserve"
                 filename="../pango/pango-matrix.c"
                 line="331">a #PangoMatrix, or %NULL</doc>
            <type name="Matrix" c:type="const PangoMatrix*"/>
          </instance-parameter>
          <parameter name="rect"
                     direction="inout"
                     caller-allocates="0"
                     transfer-ownership="full"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../pango/pango-matrix.c"
                 line="332">in/out bounding box in Pango units, or %NULL</doc>
            <type name="Rectangle" c:type="PangoRectangle*"/>
          </parameter>
        </parameters>
      </method>
      <method name="translate"
              c:identifier="pango_matrix_translate"
              version="1.6">
        <doc xml:space="preserve"
             filename="../pango/pango-matrix.c"
             line="77">Changes the transformation represented by @matrix to be the
transformation given by first translating by (@tx, @ty)
then applying the original transformation.</doc>
        <source-position filename="../pango/pango-matrix.h" line="96"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="matrix" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-matrix.c"
                 line="79">a #PangoMatrix</doc>
            <type name="Matrix" c:type="PangoMatrix*"/>
          </instance-parameter>
          <parameter name="tx" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-matrix.c"
                 line="80">amount to translate in the X direction</doc>
            <type name="gdouble" c:type="double"/>
          </parameter>
          <parameter name="ty" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-matrix.c"
                 line="81">amount to translate in the Y direction</doc>
            <type name="gdouble" c:type="double"/>
          </parameter>
        </parameters>
      </method>
    </record>
    <enumeration name="Overline"
                 version="1.46"
                 glib:type-name="PangoOverline"
                 glib:get-type="pango_overline_get_type"
                 c:type="PangoOverline">
      <doc xml:space="preserve"
           filename="../pango/pango-attributes.h"
           line="245">The #PangoOverline enumeration is used to specify
whether text should be overlined, and if so, the type
of line.</doc>
      <member name="none"
              value="0"
              c:identifier="PANGO_OVERLINE_NONE"
              glib:nick="none">
        <doc xml:space="preserve"
             filename="../pango/pango-attributes.h"
             line="247">no overline should be drawn</doc>
      </member>
      <member name="single"
              value="1"
              c:identifier="PANGO_OVERLINE_SINGLE"
              glib:nick="single">
        <doc xml:space="preserve"
             filename="../pango/pango-attributes.h"
             line="248">Draw a single line above the ink
    extents of the text being underlined.</doc>
      </member>
    </enumeration>
    <function-macro name="PIXELS"
                    c:identifier="PANGO_PIXELS"
                    introspectable="0">
      <doc xml:space="preserve"
           filename="../pango/pango-types.h"
           line="66">Converts a dimension to device units by rounding.</doc>
      <source-position filename="../pango/pango-types.h" line="93"/>
      <parameters>
        <parameter name="d">
          <doc xml:space="preserve"
               filename="../pango/pango-types.h"
               line="68">a dimension in Pango units.</doc>
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="PIXELS_CEIL"
                    c:identifier="PANGO_PIXELS_CEIL"
                    version="1.14"
                    introspectable="0">
      <doc xml:space="preserve"
           filename="../pango/pango-types.h"
           line="83">Converts a dimension to device units by ceiling.</doc>
      <source-position filename="../pango/pango-types.h" line="95"/>
      <parameters>
        <parameter name="d">
          <doc xml:space="preserve"
               filename="../pango/pango-types.h"
               line="85">a dimension in Pango units.</doc>
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="PIXELS_FLOOR"
                    c:identifier="PANGO_PIXELS_FLOOR"
                    version="1.14"
                    introspectable="0">
      <doc xml:space="preserve"
           filename="../pango/pango-types.h"
           line="74">Converts a dimension to device units by flooring.</doc>
      <source-position filename="../pango/pango-types.h" line="94"/>
      <parameters>
        <parameter name="d">
          <doc xml:space="preserve"
               filename="../pango/pango-types.h"
               line="76">a dimension in Pango units.</doc>
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="RBEARING"
                    c:identifier="PANGO_RBEARING"
                    introspectable="0">
      <doc xml:space="preserve"
           filename="../pango/pango-types.h"
           line="176">Extracts the &lt;firstterm&gt;right bearing&lt;/firstterm&gt; from a #PangoRectangle
representing glyph extents. The right bearing is the distance from the
horizontal origin to the farthest right point of the character.
This is positive except for characters drawn completely to the left of the
horizontal origin.</doc>
      <source-position filename="../pango/pango-types.h" line="189"/>
      <parameters>
        <parameter name="rect">
          <doc xml:space="preserve"
               filename="../pango/pango-types.h"
               line="178">a #PangoRectangle</doc>
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="RENDERER"
                    c:identifier="PANGO_RENDERER"
                    introspectable="0">
      <source-position filename="../pango/pango-renderer.h" line="29"/>
      <parameters>
        <parameter name="object">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="RENDERER_CLASS"
                    c:identifier="PANGO_RENDERER_CLASS"
                    introspectable="0">
      <source-position filename="../pango/pango-renderer.h" line="31"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="RENDERER_GET_CLASS"
                    c:identifier="PANGO_RENDERER_GET_CLASS"
                    introspectable="0">
      <source-position filename="../pango/pango-renderer.h" line="33"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <constant name="RENDER_TYPE_NONE"
              value="PangoRenderNone"
              c:type="PANGO_RENDER_TYPE_NONE"
              deprecated="1"
              deprecated-version="1.38">
      <doc xml:space="preserve"
           filename="../pango/pango-engine.h"
           line="35">A string constant defining the render type
for engines that are not rendering-system specific.</doc>
      <source-position filename="../pango/pango-engine.h" line="43"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <record name="Rectangle" c:type="PangoRectangle">
      <doc xml:space="preserve"
           filename="../pango/pango-types.h"
           line="126">The #PangoRectangle structure represents a rectangle. It is frequently
used to represent the logical or ink extents of a single glyph or section
of text. (See, for instance, pango_font_get_glyph_extents())</doc>
      <source-position filename="../pango/pango-types.h" line="144"/>
      <field name="x" writable="1">
        <doc xml:space="preserve"
             filename="../pango/pango-types.h"
             line="128">X coordinate of the left side of the rectangle.</doc>
        <type name="gint" c:type="int"/>
      </field>
      <field name="y" writable="1">
        <doc xml:space="preserve"
             filename="../pango/pango-types.h"
             line="129">Y coordinate of the the top side of the rectangle.</doc>
        <type name="gint" c:type="int"/>
      </field>
      <field name="width" writable="1">
        <doc xml:space="preserve"
             filename="../pango/pango-types.h"
             line="130">width of the rectangle.</doc>
        <type name="gint" c:type="int"/>
      </field>
      <field name="height" writable="1">
        <doc xml:space="preserve"
             filename="../pango/pango-types.h"
             line="131">height of the rectangle.</doc>
        <type name="gint" c:type="int"/>
      </field>
    </record>
    <enumeration name="RenderPart"
                 version="1.8"
                 glib:type-name="PangoRenderPart"
                 glib:get-type="pango_render_part_get_type"
                 c:type="PangoRenderPart">
      <doc xml:space="preserve"
           filename="../pango/pango-renderer.h"
           line="39">#PangoRenderPart defines different items to render for such
purposes as setting colors.</doc>
      <member name="foreground"
              value="0"
              c:identifier="PANGO_RENDER_PART_FOREGROUND"
              glib:nick="foreground">
        <doc xml:space="preserve"
             filename="../pango/pango-renderer.h"
             line="41">the text itself</doc>
      </member>
      <member name="background"
              value="1"
              c:identifier="PANGO_RENDER_PART_BACKGROUND"
              glib:nick="background">
        <doc xml:space="preserve"
             filename="../pango/pango-renderer.h"
             line="42">the area behind the text</doc>
      </member>
      <member name="underline"
              value="2"
              c:identifier="PANGO_RENDER_PART_UNDERLINE"
              glib:nick="underline">
        <doc xml:space="preserve"
             filename="../pango/pango-renderer.h"
             line="43">underlines</doc>
      </member>
      <member name="strikethrough"
              value="3"
              c:identifier="PANGO_RENDER_PART_STRIKETHROUGH"
              glib:nick="strikethrough">
        <doc xml:space="preserve"
             filename="../pango/pango-renderer.h"
             line="44">strikethrough lines</doc>
      </member>
      <member name="overline"
              value="4"
              c:identifier="PANGO_RENDER_PART_OVERLINE"
              glib:nick="overline">
        <doc xml:space="preserve"
             filename="../pango/pango-renderer.h"
             line="45">overlines</doc>
      </member>
    </enumeration>
    <class name="Renderer"
           c:symbol-prefix="renderer"
           c:type="PangoRenderer"
           version="1.8"
           parent="GObject.Object"
           abstract="1"
           glib:type-name="PangoRenderer"
           glib:get-type="pango_renderer_get_type"
           glib:type-struct="RendererClass">
      <doc xml:space="preserve"
           filename="../pango/pango-renderer.h"
           line="62">#PangoRenderer is a base class for objects that are used to
render Pango objects such as #PangoGlyphString and
#PangoLayout.</doc>
      <source-position filename="../pango/pango-renderer.h" line="192"/>
      <virtual-method name="begin">
        <source-position filename="../pango/pango-renderer.h" line="174"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="renderer" transfer-ownership="none">
            <type name="Renderer" c:type="PangoRenderer*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="draw_error_underline"
                      invoker="draw_error_underline"
                      version="1.8">
        <doc xml:space="preserve"
             filename="../pango/pango-renderer.c"
             line="995">Draw a squiggly line that approximately covers the given rectangle
in the style of an underline used to indicate a spelling error.
(The width of the underline is rounded to an integer number
of up/down segments and the resulting rectangle is centered
in the original rectangle)

This should be called while @renderer is already active.  Use
pango_renderer_activate() to activate a renderer.</doc>
        <source-position filename="../pango/pango-renderer.h" line="147"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="renderer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-renderer.c"
                 line="997">a #PangoRenderer</doc>
            <type name="Renderer" c:type="PangoRenderer*"/>
          </instance-parameter>
          <parameter name="x" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-renderer.c"
                 line="998">X coordinate of underline, in Pango units in user coordinate system</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="y" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-renderer.c"
                 line="999">Y coordinate of underline, in Pango units in user coordinate system</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="width" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-renderer.c"
                 line="1000">width of underline, in Pango units in user coordinate system</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="height" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-renderer.c"
                 line="1001">height of underline, in Pango units in user coordinate system</doc>
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="draw_glyph" invoker="draw_glyph" version="1.8">
        <doc xml:space="preserve"
             filename="../pango/pango-renderer.c"
             line="1189">Draws a single glyph with coordinates in device space.</doc>
        <source-position filename="../pango/pango-renderer.h" line="165"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="renderer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-renderer.c"
                 line="1191">a #PangoRenderer</doc>
            <type name="Renderer" c:type="PangoRenderer*"/>
          </instance-parameter>
          <parameter name="font" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-renderer.c"
                 line="1192">a #PangoFont</doc>
            <type name="Font" c:type="PangoFont*"/>
          </parameter>
          <parameter name="glyph" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-renderer.c"
                 line="1193">the glyph index of a single glyph</doc>
            <type name="Glyph" c:type="PangoGlyph"/>
          </parameter>
          <parameter name="x" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-renderer.c"
                 line="1194">X coordinate of left edge of baseline of glyph</doc>
            <type name="gdouble" c:type="double"/>
          </parameter>
          <parameter name="y" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-renderer.c"
                 line="1195">Y coordinate of left edge of baseline of glyph</doc>
            <type name="gdouble" c:type="double"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="draw_glyph_item"
                      invoker="draw_glyph_item"
                      version="1.22">
        <doc xml:space="preserve"
             filename="../pango/pango-renderer.c"
             line="794">Draws the glyphs in @glyph_item with the specified #PangoRenderer,
embedding the text associated with the glyphs in the output if the
output format supports it (PDF for example).

Note that @text is the start of the text for layout, which is then
indexed by &lt;literal&gt;@glyph_item-&gt;item-&gt;offset&lt;/literal&gt;.

If @text is %NULL, this simply calls pango_renderer_draw_glyphs().

The default implementation of this method simply falls back to
pango_renderer_draw_glyphs().</doc>
        <source-position filename="../pango/pango-renderer.h" line="180"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="renderer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-renderer.c"
                 line="796">a #PangoRenderer</doc>
            <type name="Renderer" c:type="PangoRenderer*"/>
          </instance-parameter>
          <parameter name="text"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../pango/pango-renderer.c"
                 line="797">the UTF-8 text that @glyph_item refers to, or %NULL</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="glyph_item" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-renderer.c"
                 line="798">a #PangoGlyphItem</doc>
            <type name="GlyphItem" c:type="PangoGlyphItem*"/>
          </parameter>
          <parameter name="x" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-renderer.c"
                 line="799">X position of left edge of baseline, in user space coordinates
  in Pango units.</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="y" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-renderer.c"
                 line="801">Y position of left edge of baseline, in user space coordinates
   in Pango units.</doc>
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="draw_glyphs" invoker="draw_glyphs" version="1.8">
        <doc xml:space="preserve"
             filename="../pango/pango-renderer.c"
             line="738">Draws the glyphs in @glyphs with the specified #PangoRenderer.</doc>
        <source-position filename="../pango/pango-renderer.h" line="136"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="renderer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-renderer.c"
                 line="740">a #PangoRenderer</doc>
            <type name="Renderer" c:type="PangoRenderer*"/>
          </instance-parameter>
          <parameter name="font" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-renderer.c"
                 line="741">a #PangoFont</doc>
            <type name="Font" c:type="PangoFont*"/>
          </parameter>
          <parameter name="glyphs" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-renderer.c"
                 line="742">a #PangoGlyphString</doc>
            <type name="GlyphString" c:type="PangoGlyphString*"/>
          </parameter>
          <parameter name="x" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-renderer.c"
                 line="743">X position of left edge of baseline, in user space coordinates
  in Pango units.</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="y" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-renderer.c"
                 line="745">Y position of left edge of baseline, in user space coordinates
   in Pango units.</doc>
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="draw_rectangle"
                      invoker="draw_rectangle"
                      version="1.8">
        <doc xml:space="preserve"
             filename="../pango/pango-renderer.c"
             line="856">Draws an axis-aligned rectangle in user space coordinates with the
specified #PangoRenderer.

This should be called while @renderer is already active.  Use
pango_renderer_activate() to activate a renderer.</doc>
        <source-position filename="../pango/pango-renderer.h" line="141"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="renderer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-renderer.c"
                 line="858">a #PangoRenderer</doc>
            <type name="Renderer" c:type="PangoRenderer*"/>
          </instance-parameter>
          <parameter name="part" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-renderer.c"
                 line="859">type of object this rectangle is part of</doc>
            <type name="RenderPart" c:type="PangoRenderPart"/>
          </parameter>
          <parameter name="x" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-renderer.c"
                 line="860">X position at which to draw rectangle, in user space coordinates in Pango units</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="y" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-renderer.c"
                 line="861">Y position at which to draw rectangle, in user space coordinates in Pango units</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="width" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-renderer.c"
                 line="862">width of rectangle in Pango units in user space coordinates</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="height" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-renderer.c"
                 line="863">height of rectangle in Pango units in user space coordinates</doc>
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="draw_shape">
        <source-position filename="../pango/pango-renderer.h" line="152"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="renderer" transfer-ownership="none">
            <type name="Renderer" c:type="PangoRenderer*"/>
          </instance-parameter>
          <parameter name="attr" transfer-ownership="none">
            <type name="AttrShape" c:type="PangoAttrShape*"/>
          </parameter>
          <parameter name="x" transfer-ownership="none">
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="y" transfer-ownership="none">
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="draw_trapezoid"
                      invoker="draw_trapezoid"
                      version="1.8">
        <doc xml:space="preserve"
             filename="../pango/pango-renderer.c"
             line="1154">Draws a trapezoid with the parallel sides aligned with the X axis
using the given #PangoRenderer; coordinates are in device space.</doc>
        <source-position filename="../pango/pango-renderer.h" line="157"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="renderer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-renderer.c"
                 line="1156">a #PangoRenderer</doc>
            <type name="Renderer" c:type="PangoRenderer*"/>
          </instance-parameter>
          <parameter name="part" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-renderer.c"
                 line="1157">type of object this trapezoid is part of</doc>
            <type name="RenderPart" c:type="PangoRenderPart"/>
          </parameter>
          <parameter name="y1_" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-renderer.c"
                 line="1158">Y coordinate of top of trapezoid</doc>
            <type name="gdouble" c:type="double"/>
          </parameter>
          <parameter name="x11" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-renderer.c"
                 line="1159">X coordinate of left end of top of trapezoid</doc>
            <type name="gdouble" c:type="double"/>
          </parameter>
          <parameter name="x21" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-renderer.c"
                 line="1160">X coordinate of right end of top of trapezoid</doc>
            <type name="gdouble" c:type="double"/>
          </parameter>
          <parameter name="y2" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-renderer.c"
                 line="1161">Y coordinate of bottom of trapezoid</doc>
            <type name="gdouble" c:type="double"/>
          </parameter>
          <parameter name="x12" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-renderer.c"
                 line="1162">X coordinate of left end of bottom of trapezoid</doc>
            <type name="gdouble" c:type="double"/>
          </parameter>
          <parameter name="x22" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-renderer.c"
                 line="1163">X coordinate of right end of bottom of trapezoid</doc>
            <type name="gdouble" c:type="double"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="end">
        <source-position filename="../pango/pango-renderer.h" line="175"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="renderer" transfer-ownership="none">
            <type name="Renderer" c:type="PangoRenderer*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="part_changed" invoker="part_changed" version="1.8">
        <doc xml:space="preserve"
             filename="../pango/pango-renderer.c"
             line="1386">Informs Pango that the way that the rendering is done
for @part has changed in a way that would prevent multiple
pieces being joined together into one drawing call. For
instance, if a subclass of #PangoRenderer was to add a stipple
option for drawing underlines, it needs to call

&lt;informalexample&gt;&lt;programlisting&gt;
pango_renderer_part_changed (render, PANGO_RENDER_PART_UNDERLINE);
&lt;/programlisting&gt;&lt;/informalexample&gt;

When the stipple changes or underlines with different stipples
might be joined together. Pango automatically calls this for
changes to colors. (See pango_renderer_set_color())</doc>
        <source-position filename="../pango/pango-renderer.h" line="171"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="renderer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-renderer.c"
                 line="1388">a #PangoRenderer</doc>
            <type name="Renderer" c:type="PangoRenderer*"/>
          </instance-parameter>
          <parameter name="part" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-renderer.c"
                 line="1389">the part for which rendering has changed.</doc>
            <type name="RenderPart" c:type="PangoRenderPart"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="prepare_run">
        <source-position filename="../pango/pango-renderer.h" line="177"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="renderer" transfer-ownership="none">
            <type name="Renderer" c:type="PangoRenderer*"/>
          </instance-parameter>
          <parameter name="run" transfer-ownership="none">
            <type name="LayoutRun" c:type="PangoLayoutRun*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="activate"
              c:identifier="pango_renderer_activate"
              version="1.8">
        <doc xml:space="preserve"
             filename="../pango/pango-renderer.c"
             line="1218">Does initial setup before rendering operations on @renderer.
pango_renderer_deactivate() should be called when done drawing.
Calls such as pango_renderer_draw_layout() automatically
activate the layout before drawing on it. Calls to
pango_renderer_activate() and pango_renderer_deactivate() can
be nested and the renderer will only be initialized and
deinitialized once.</doc>
        <source-position filename="../pango/pango-renderer.h" line="249"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="renderer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-renderer.c"
                 line="1220">a #PangoRenderer</doc>
            <type name="Renderer" c:type="PangoRenderer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="deactivate"
              c:identifier="pango_renderer_deactivate"
              version="1.8">
        <doc xml:space="preserve"
             filename="../pango/pango-renderer.c"
             line="1245">Cleans up after rendering operations on @renderer. See
docs for pango_renderer_activate().</doc>
        <source-position filename="../pango/pango-renderer.h" line="251"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="renderer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-renderer.c"
                 line="1247">a #PangoRenderer</doc>
            <type name="Renderer" c:type="PangoRenderer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="draw_error_underline"
              c:identifier="pango_renderer_draw_error_underline"
              version="1.8">
        <doc xml:space="preserve"
             filename="../pango/pango-renderer.c"
             line="995">Draw a squiggly line that approximately covers the given rectangle
in the style of an underline used to indicate a spelling error.
(The width of the underline is rounded to an integer number
of up/down segments and the resulting rectangle is centered
in the original rectangle)

This should be called while @renderer is already active.  Use
pango_renderer_activate() to activate a renderer.</doc>
        <source-position filename="../pango/pango-renderer.h" line="227"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="renderer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-renderer.c"
                 line="997">a #PangoRenderer</doc>
            <type name="Renderer" c:type="PangoRenderer*"/>
          </instance-parameter>
          <parameter name="x" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-renderer.c"
                 line="998">X coordinate of underline, in Pango units in user coordinate system</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="y" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-renderer.c"
                 line="999">Y coordinate of underline, in Pango units in user coordinate system</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="width" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-renderer.c"
                 line="1000">width of underline, in Pango units in user coordinate system</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="height" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-renderer.c"
                 line="1001">height of underline, in Pango units in user coordinate system</doc>
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </method>
      <method name="draw_glyph"
              c:identifier="pango_renderer_draw_glyph"
              version="1.8">
        <doc xml:space="preserve"
             filename="../pango/pango-renderer.c"
             line="1189">Draws a single glyph with coordinates in device space.</doc>
        <source-position filename="../pango/pango-renderer.h" line="242"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="renderer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-renderer.c"
                 line="1191">a #PangoRenderer</doc>
            <type name="Renderer" c:type="PangoRenderer*"/>
          </instance-parameter>
          <parameter name="font" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-renderer.c"
                 line="1192">a #PangoFont</doc>
            <type name="Font" c:type="PangoFont*"/>
          </parameter>
          <parameter name="glyph" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-renderer.c"
                 line="1193">the glyph index of a single glyph</doc>
            <type name="Glyph" c:type="PangoGlyph"/>
          </parameter>
          <parameter name="x" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-renderer.c"
                 line="1194">X coordinate of left edge of baseline of glyph</doc>
            <type name="gdouble" c:type="double"/>
          </parameter>
          <parameter name="y" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-renderer.c"
                 line="1195">Y coordinate of left edge of baseline of glyph</doc>
            <type name="gdouble" c:type="double"/>
          </parameter>
        </parameters>
      </method>
      <method name="draw_glyph_item"
              c:identifier="pango_renderer_draw_glyph_item"
              version="1.22">
        <doc xml:space="preserve"
             filename="../pango/pango-renderer.c"
             line="794">Draws the glyphs in @glyph_item with the specified #PangoRenderer,
embedding the text associated with the glyphs in the output if the
output format supports it (PDF for example).

Note that @text is the start of the text for layout, which is then
indexed by &lt;literal&gt;@glyph_item-&gt;item-&gt;offset&lt;/literal&gt;.

If @text is %NULL, this simply calls pango_renderer_draw_glyphs().

The default implementation of this method simply falls back to
pango_renderer_draw_glyphs().</doc>
        <source-position filename="../pango/pango-renderer.h" line="214"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="renderer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-renderer.c"
                 line="796">a #PangoRenderer</doc>
            <type name="Renderer" c:type="PangoRenderer*"/>
          </instance-parameter>
          <parameter name="text"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../pango/pango-renderer.c"
                 line="797">the UTF-8 text that @glyph_item refers to, or %NULL</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="glyph_item" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-renderer.c"
                 line="798">a #PangoGlyphItem</doc>
            <type name="GlyphItem" c:type="PangoGlyphItem*"/>
          </parameter>
          <parameter name="x" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-renderer.c"
                 line="799">X position of left edge of baseline, in user space coordinates
  in Pango units.</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="y" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-renderer.c"
                 line="801">Y position of left edge of baseline, in user space coordinates
   in Pango units.</doc>
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </method>
      <method name="draw_glyphs"
              c:identifier="pango_renderer_draw_glyphs"
              version="1.8">
        <doc xml:space="preserve"
             filename="../pango/pango-renderer.c"
             line="738">Draws the glyphs in @glyphs with the specified #PangoRenderer.</doc>
        <source-position filename="../pango/pango-renderer.h" line="208"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="renderer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-renderer.c"
                 line="740">a #PangoRenderer</doc>
            <type name="Renderer" c:type="PangoRenderer*"/>
          </instance-parameter>
          <parameter name="font" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-renderer.c"
                 line="741">a #PangoFont</doc>
            <type name="Font" c:type="PangoFont*"/>
          </parameter>
          <parameter name="glyphs" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-renderer.c"
                 line="742">a #PangoGlyphString</doc>
            <type name="GlyphString" c:type="PangoGlyphString*"/>
          </parameter>
          <parameter name="x" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-renderer.c"
                 line="743">X position of left edge of baseline, in user space coordinates
  in Pango units.</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="y" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-renderer.c"
                 line="745">Y position of left edge of baseline, in user space coordinates
   in Pango units.</doc>
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </method>
      <method name="draw_layout"
              c:identifier="pango_renderer_draw_layout"
              version="1.8">
        <doc xml:space="preserve"
             filename="../pango/pango-renderer.c"
             line="149">Draws @layout with the specified #PangoRenderer.</doc>
        <source-position filename="../pango/pango-renderer.h" line="198"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="renderer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-renderer.c"
                 line="151">a #PangoRenderer</doc>
            <type name="Renderer" c:type="PangoRenderer*"/>
          </instance-parameter>
          <parameter name="layout" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-renderer.c"
                 line="152">a #PangoLayout</doc>
            <type name="Layout" c:type="PangoLayout*"/>
          </parameter>
          <parameter name="x" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-renderer.c"
                 line="153">X position of left edge of baseline, in user space coordinates
  in Pango units.</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="y" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-renderer.c"
                 line="155">Y position of left edge of baseline, in user space coordinates
   in Pango units.</doc>
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </method>
      <method name="draw_layout_line"
              c:identifier="pango_renderer_draw_layout_line"
              version="1.8">
        <doc xml:space="preserve"
             filename="../pango/pango-renderer.c"
             line="550">Draws @line with the specified #PangoRenderer.</doc>
        <source-position filename="../pango/pango-renderer.h" line="203"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="renderer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-renderer.c"
                 line="552">a #PangoRenderer</doc>
            <type name="Renderer" c:type="PangoRenderer*"/>
          </instance-parameter>
          <parameter name="line" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-renderer.c"
                 line="553">a #PangoLayoutLine</doc>
            <type name="LayoutLine" c:type="PangoLayoutLine*"/>
          </parameter>
          <parameter name="x" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-renderer.c"
                 line="554">X position of left edge of baseline, in user space coordinates
  in Pango units.</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="y" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-renderer.c"
                 line="556">Y position of left edge of baseline, in user space coordinates
   in Pango units.</doc>
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </method>
      <method name="draw_rectangle"
              c:identifier="pango_renderer_draw_rectangle"
              version="1.8">
        <doc xml:space="preserve"
             filename="../pango/pango-renderer.c"
             line="856">Draws an axis-aligned rectangle in user space coordinates with the
specified #PangoRenderer.

This should be called while @renderer is already active.  Use
pango_renderer_activate() to activate a renderer.</doc>
        <source-position filename="../pango/pango-renderer.h" line="220"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="renderer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-renderer.c"
                 line="858">a #PangoRenderer</doc>
            <type name="Renderer" c:type="PangoRenderer*"/>
          </instance-parameter>
          <parameter name="part" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-renderer.c"
                 line="859">type of object this rectangle is part of</doc>
            <type name="RenderPart" c:type="PangoRenderPart"/>
          </parameter>
          <parameter name="x" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-renderer.c"
                 line="860">X position at which to draw rectangle, in user space coordinates in Pango units</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="y" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-renderer.c"
                 line="861">Y position at which to draw rectangle, in user space coordinates in Pango units</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="width" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-renderer.c"
                 line="862">width of rectangle in Pango units in user space coordinates</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="height" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-renderer.c"
                 line="863">height of rectangle in Pango units in user space coordinates</doc>
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </method>
      <method name="draw_trapezoid"
              c:identifier="pango_renderer_draw_trapezoid"
              version="1.8">
        <doc xml:space="preserve"
             filename="../pango/pango-renderer.c"
             line="1154">Draws a trapezoid with the parallel sides aligned with the X axis
using the given #PangoRenderer; coordinates are in device space.</doc>
        <source-position filename="../pango/pango-renderer.h" line="233"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="renderer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-renderer.c"
                 line="1156">a #PangoRenderer</doc>
            <type name="Renderer" c:type="PangoRenderer*"/>
          </instance-parameter>
          <parameter name="part" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-renderer.c"
                 line="1157">type of object this trapezoid is part of</doc>
            <type name="RenderPart" c:type="PangoRenderPart"/>
          </parameter>
          <parameter name="y1_" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-renderer.c"
                 line="1158">Y coordinate of top of trapezoid</doc>
            <type name="gdouble" c:type="double"/>
          </parameter>
          <parameter name="x11" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-renderer.c"
                 line="1159">X coordinate of left end of top of trapezoid</doc>
            <type name="gdouble" c:type="double"/>
          </parameter>
          <parameter name="x21" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-renderer.c"
                 line="1160">X coordinate of right end of top of trapezoid</doc>
            <type name="gdouble" c:type="double"/>
          </parameter>
          <parameter name="y2" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-renderer.c"
                 line="1161">Y coordinate of bottom of trapezoid</doc>
            <type name="gdouble" c:type="double"/>
          </parameter>
          <parameter name="x12" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-renderer.c"
                 line="1162">X coordinate of left end of bottom of trapezoid</doc>
            <type name="gdouble" c:type="double"/>
          </parameter>
          <parameter name="x22" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-renderer.c"
                 line="1163">X coordinate of right end of bottom of trapezoid</doc>
            <type name="gdouble" c:type="double"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_alpha"
              c:identifier="pango_renderer_get_alpha"
              version="1.38">
        <doc xml:space="preserve"
             filename="../pango/pango-renderer.c"
             line="1363">Gets the current alpha for the specified part.</doc>
        <source-position filename="../pango/pango-renderer.h" line="270"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../pango/pango-renderer.c"
               line="1370">the alpha for the specified part,
  or 0 if it hasn't been set and should be
  inherited from the environment.</doc>
          <type name="guint16" c:type="guint16"/>
        </return-value>
        <parameters>
          <instance-parameter name="renderer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-renderer.c"
                 line="1365">a #PangoRenderer</doc>
            <type name="Renderer" c:type="PangoRenderer*"/>
          </instance-parameter>
          <parameter name="part" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-renderer.c"
                 line="1366">the part to get the alpha for</doc>
            <type name="RenderPart" c:type="PangoRenderPart"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_color"
              c:identifier="pango_renderer_get_color"
              version="1.8">
        <doc xml:space="preserve"
             filename="../pango/pango-renderer.c"
             line="1307">Gets the current rendering color for the specified part.</doc>
        <source-position filename="../pango/pango-renderer.h" line="262"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="../pango/pango-renderer.c"
               line="1314">the color for the
  specified part, or %NULL if it hasn't been set and should be
  inherited from the environment.</doc>
          <type name="Color" c:type="PangoColor*"/>
        </return-value>
        <parameters>
          <instance-parameter name="renderer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-renderer.c"
                 line="1309">a #PangoRenderer</doc>
            <type name="Renderer" c:type="PangoRenderer*"/>
          </instance-parameter>
          <parameter name="part" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-renderer.c"
                 line="1310">the part to get the color for</doc>
            <type name="RenderPart" c:type="PangoRenderPart"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_layout"
              c:identifier="pango_renderer_get_layout"
              version="1.20">
        <doc xml:space="preserve"
             filename="../pango/pango-renderer.c"
             line="1570">Gets the layout currently being rendered using @renderer.
Calling this function only makes sense from inside a subclass's
methods, like in its draw_shape vfunc, for example.

The returned layout should not be modified while still being
rendered.</doc>
        <source-position filename="../pango/pango-renderer.h" line="280"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="../pango/pango-renderer.c"
               line="1581">the layout, or %NULL if
 no layout is being rendered using @renderer at this time.</doc>
          <type name="Layout" c:type="PangoLayout*"/>
        </return-value>
        <parameters>
          <instance-parameter name="renderer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-renderer.c"
                 line="1572">a #PangoRenderer</doc>
            <type name="Renderer" c:type="PangoRenderer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_layout_line"
              c:identifier="pango_renderer_get_layout_line"
              version="1.20">
        <doc xml:space="preserve"
             filename="../pango/pango-renderer.c"
             line="1595">Gets the layout line currently being rendered using @renderer.
Calling this function only makes sense from inside a subclass's
methods, like in its draw_shape vfunc, for example.

The returned layout line should not be modified while still being
rendered.</doc>
        <source-position filename="../pango/pango-renderer.h" line="282"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="../pango/pango-renderer.c"
               line="1606">the layout line, or %NULL
  if no layout line is being rendered using @renderer at this time.</doc>
          <type name="LayoutLine" c:type="PangoLayoutLine*"/>
        </return-value>
        <parameters>
          <instance-parameter name="renderer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-renderer.c"
                 line="1597">a #PangoRenderer</doc>
            <type name="Renderer" c:type="PangoRenderer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_matrix"
              c:identifier="pango_renderer_get_matrix"
              version="1.8">
        <doc xml:space="preserve"
             filename="../pango/pango-renderer.c"
             line="1549">Gets the transformation matrix that will be applied when
rendering. See pango_renderer_set_matrix().</doc>
        <source-position filename="../pango/pango-renderer.h" line="277"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="../pango/pango-renderer.c"
               line="1556">the matrix, or %NULL if no matrix has
 been set (which is the same as the identity matrix). The returned
 matrix is owned by Pango and must not be modified or freed.</doc>
          <type name="Matrix" c:type="const PangoMatrix*"/>
        </return-value>
        <parameters>
          <instance-parameter name="renderer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-renderer.c"
                 line="1551">a #PangoRenderer</doc>
            <type name="Renderer" c:type="PangoRenderer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="part_changed"
              c:identifier="pango_renderer_part_changed"
              version="1.8">
        <doc xml:space="preserve"
             filename="../pango/pango-renderer.c"
             line="1386">Informs Pango that the way that the rendering is done
for @part has changed in a way that would prevent multiple
pieces being joined together into one drawing call. For
instance, if a subclass of #PangoRenderer was to add a stipple
option for drawing underlines, it needs to call

&lt;informalexample&gt;&lt;programlisting&gt;
pango_renderer_part_changed (render, PANGO_RENDER_PART_UNDERLINE);
&lt;/programlisting&gt;&lt;/informalexample&gt;

When the stipple changes or underlines with different stipples
might be joined together. Pango automatically calls this for
changes to colors. (See pango_renderer_set_color())</doc>
        <source-position filename="../pango/pango-renderer.h" line="254"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="renderer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-renderer.c"
                 line="1388">a #PangoRenderer</doc>
            <type name="Renderer" c:type="PangoRenderer*"/>
          </instance-parameter>
          <parameter name="part" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-renderer.c"
                 line="1389">the part for which rendering has changed.</doc>
            <type name="RenderPart" c:type="PangoRenderPart"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_alpha"
              c:identifier="pango_renderer_set_alpha"
              version="1.38">
        <doc xml:space="preserve"
             filename="../pango/pango-renderer.c"
             line="1333">Sets the alpha for part of the rendering.
Note that the alpha may only be used if a color is
specified for @part as well.</doc>
        <source-position filename="../pango/pango-renderer.h" line="266"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="renderer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-renderer.c"
                 line="1335">a #PangoRenderer</doc>
            <type name="Renderer" c:type="PangoRenderer*"/>
          </instance-parameter>
          <parameter name="part" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-renderer.c"
                 line="1336">the part to set the alpha for</doc>
            <type name="RenderPart" c:type="PangoRenderPart"/>
          </parameter>
          <parameter name="alpha" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-renderer.c"
                 line="1337">an alpha value between 1 and 65536, or 0 to unset the alpha</doc>
            <type name="guint16" c:type="guint16"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_color"
              c:identifier="pango_renderer_set_color"
              version="1.8">
        <doc xml:space="preserve"
             filename="../pango/pango-renderer.c"
             line="1268">Sets the color for part of the rendering.
Also see pango_renderer_set_alpha().</doc>
        <source-position filename="../pango/pango-renderer.h" line="258"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="renderer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-renderer.c"
                 line="1270">a #PangoRenderer</doc>
            <type name="Renderer" c:type="PangoRenderer*"/>
          </instance-parameter>
          <parameter name="part" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-renderer.c"
                 line="1271">the part to change the color of</doc>
            <type name="RenderPart" c:type="PangoRenderPart"/>
          </parameter>
          <parameter name="color"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../pango/pango-renderer.c"
                 line="1272">the new color or %NULL to unset the current color</doc>
            <type name="Color" c:type="const PangoColor*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_matrix"
              c:identifier="pango_renderer_set_matrix"
              version="1.8">
        <doc xml:space="preserve"
             filename="../pango/pango-renderer.c"
             line="1529">Sets the transformation matrix that will be applied when rendering.</doc>
        <source-position filename="../pango/pango-renderer.h" line="274"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="renderer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-renderer.c"
                 line="1531">a #PangoRenderer</doc>
            <type name="Renderer" c:type="PangoRenderer*"/>
          </instance-parameter>
          <parameter name="matrix"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../pango/pango-renderer.c"
                 line="1532">a #PangoMatrix, or %NULL to unset any existing matrix.
 (No matrix set is the same as setting the identity matrix.)</doc>
            <type name="Matrix" c:type="const PangoMatrix*"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent_instance" readable="0" private="1">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="underline" readable="0" private="1">
        <type name="Underline" c:type="PangoUnderline"/>
      </field>
      <field name="strikethrough" readable="0" private="1">
        <type name="gboolean" c:type="gboolean"/>
      </field>
      <field name="active_count" readable="0" private="1">
        <type name="gint" c:type="int"/>
      </field>
      <field name="matrix">
        <doc xml:space="preserve"
             filename="../pango/pango-renderer.h"
             line="64">the current transformation matrix for
   the Renderer; may be %NULL, which should be treated the
   same as the identity matrix.</doc>
        <type name="Matrix" c:type="PangoMatrix*"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="RendererPrivate" c:type="PangoRendererPrivate*"/>
      </field>
    </class>
    <record name="RendererClass"
            c:type="PangoRendererClass"
            glib:is-gtype-struct-for="Renderer"
            version="1.8">
      <doc xml:space="preserve"
           filename="../pango/pango-renderer.h"
           line="90">Class structure for #PangoRenderer.

The following vfuncs take user space coordinates in Pango units
and have default implementations:
- draw_glyphs
- draw_rectangle
- draw_error_underline
- draw_shape
- draw_glyph_item

The default draw_shape implementation draws nothing.

The following vfuncs take device space coordinates as doubles
and must be implemented:
- draw_trapezoid
- draw_glyph</doc>
      <source-position filename="../pango/pango-renderer.h" line="192"/>
      <field name="parent_class" readable="0" private="1">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="draw_glyphs">
        <callback name="draw_glyphs">
          <source-position filename="../pango/pango-renderer.h" line="136"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="renderer" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="../pango/pango-renderer.c"
                   line="740">a #PangoRenderer</doc>
              <type name="Renderer" c:type="PangoRenderer*"/>
            </parameter>
            <parameter name="font" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="../pango/pango-renderer.c"
                   line="741">a #PangoFont</doc>
              <type name="Font" c:type="PangoFont*"/>
            </parameter>
            <parameter name="glyphs" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="../pango/pango-renderer.c"
                   line="742">a #PangoGlyphString</doc>
              <type name="GlyphString" c:type="PangoGlyphString*"/>
            </parameter>
            <parameter name="x" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="../pango/pango-renderer.c"
                   line="743">X position of left edge of baseline, in user space coordinates
  in Pango units.</doc>
              <type name="gint" c:type="int"/>
            </parameter>
            <parameter name="y" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="../pango/pango-renderer.c"
                   line="745">Y position of left edge of baseline, in user space coordinates
   in Pango units.</doc>
              <type name="gint" c:type="int"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="draw_rectangle">
        <callback name="draw_rectangle">
          <source-position filename="../pango/pango-renderer.h" line="141"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="renderer" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="../pango/pango-renderer.c"
                   line="858">a #PangoRenderer</doc>
              <type name="Renderer" c:type="PangoRenderer*"/>
            </parameter>
            <parameter name="part" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="../pango/pango-renderer.c"
                   line="859">type of object this rectangle is part of</doc>
              <type name="RenderPart" c:type="PangoRenderPart"/>
            </parameter>
            <parameter name="x" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="../pango/pango-renderer.c"
                   line="860">X position at which to draw rectangle, in user space coordinates in Pango units</doc>
              <type name="gint" c:type="int"/>
            </parameter>
            <parameter name="y" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="../pango/pango-renderer.c"
                   line="861">Y position at which to draw rectangle, in user space coordinates in Pango units</doc>
              <type name="gint" c:type="int"/>
            </parameter>
            <parameter name="width" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="../pango/pango-renderer.c"
                   line="862">width of rectangle in Pango units in user space coordinates</doc>
              <type name="gint" c:type="int"/>
            </parameter>
            <parameter name="height" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="../pango/pango-renderer.c"
                   line="863">height of rectangle in Pango units in user space coordinates</doc>
              <type name="gint" c:type="int"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="draw_error_underline">
        <callback name="draw_error_underline">
          <source-position filename="../pango/pango-renderer.h" line="147"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="renderer" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="../pango/pango-renderer.c"
                   line="997">a #PangoRenderer</doc>
              <type name="Renderer" c:type="PangoRenderer*"/>
            </parameter>
            <parameter name="x" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="../pango/pango-renderer.c"
                   line="998">X coordinate of underline, in Pango units in user coordinate system</doc>
              <type name="gint" c:type="int"/>
            </parameter>
            <parameter name="y" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="../pango/pango-renderer.c"
                   line="999">Y coordinate of underline, in Pango units in user coordinate system</doc>
              <type name="gint" c:type="int"/>
            </parameter>
            <parameter name="width" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="../pango/pango-renderer.c"
                   line="1000">width of underline, in Pango units in user coordinate system</doc>
              <type name="gint" c:type="int"/>
            </parameter>
            <parameter name="height" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="../pango/pango-renderer.c"
                   line="1001">height of underline, in Pango units in user coordinate system</doc>
              <type name="gint" c:type="int"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="draw_shape">
        <callback name="draw_shape">
          <source-position filename="../pango/pango-renderer.h" line="152"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="renderer" transfer-ownership="none">
              <type name="Renderer" c:type="PangoRenderer*"/>
            </parameter>
            <parameter name="attr" transfer-ownership="none">
              <type name="AttrShape" c:type="PangoAttrShape*"/>
            </parameter>
            <parameter name="x" transfer-ownership="none">
              <type name="gint" c:type="int"/>
            </parameter>
            <parameter name="y" transfer-ownership="none">
              <type name="gint" c:type="int"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="draw_trapezoid">
        <callback name="draw_trapezoid">
          <source-position filename="../pango/pango-renderer.h" line="157"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="renderer" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="../pango/pango-renderer.c"
                   line="1156">a #PangoRenderer</doc>
              <type name="Renderer" c:type="PangoRenderer*"/>
            </parameter>
            <parameter name="part" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="../pango/pango-renderer.c"
                   line="1157">type of object this trapezoid is part of</doc>
              <type name="RenderPart" c:type="PangoRenderPart"/>
            </parameter>
            <parameter name="y1_" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="../pango/pango-renderer.c"
                   line="1158">Y coordinate of top of trapezoid</doc>
              <type name="gdouble" c:type="double"/>
            </parameter>
            <parameter name="x11" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="../pango/pango-renderer.c"
                   line="1159">X coordinate of left end of top of trapezoid</doc>
              <type name="gdouble" c:type="double"/>
            </parameter>
            <parameter name="x21" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="../pango/pango-renderer.c"
                   line="1160">X coordinate of right end of top of trapezoid</doc>
              <type name="gdouble" c:type="double"/>
            </parameter>
            <parameter name="y2" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="../pango/pango-renderer.c"
                   line="1161">Y coordinate of bottom of trapezoid</doc>
              <type name="gdouble" c:type="double"/>
            </parameter>
            <parameter name="x12" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="../pango/pango-renderer.c"
                   line="1162">X coordinate of left end of bottom of trapezoid</doc>
              <type name="gdouble" c:type="double"/>
            </parameter>
            <parameter name="x22" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="../pango/pango-renderer.c"
                   line="1163">X coordinate of right end of bottom of trapezoid</doc>
              <type name="gdouble" c:type="double"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="draw_glyph">
        <callback name="draw_glyph">
          <source-position filename="../pango/pango-renderer.h" line="165"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="renderer" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="../pango/pango-renderer.c"
                   line="1191">a #PangoRenderer</doc>
              <type name="Renderer" c:type="PangoRenderer*"/>
            </parameter>
            <parameter name="font" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="../pango/pango-renderer.c"
                   line="1192">a #PangoFont</doc>
              <type name="Font" c:type="PangoFont*"/>
            </parameter>
            <parameter name="glyph" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="../pango/pango-renderer.c"
                   line="1193">the glyph index of a single glyph</doc>
              <type name="Glyph" c:type="PangoGlyph"/>
            </parameter>
            <parameter name="x" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="../pango/pango-renderer.c"
                   line="1194">X coordinate of left edge of baseline of glyph</doc>
              <type name="gdouble" c:type="double"/>
            </parameter>
            <parameter name="y" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="../pango/pango-renderer.c"
                   line="1195">Y coordinate of left edge of baseline of glyph</doc>
              <type name="gdouble" c:type="double"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="part_changed">
        <callback name="part_changed">
          <source-position filename="../pango/pango-renderer.h" line="171"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="renderer" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="../pango/pango-renderer.c"
                   line="1388">a #PangoRenderer</doc>
              <type name="Renderer" c:type="PangoRenderer*"/>
            </parameter>
            <parameter name="part" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="../pango/pango-renderer.c"
                   line="1389">the part for which rendering has changed.</doc>
              <type name="RenderPart" c:type="PangoRenderPart"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="begin">
        <callback name="begin">
          <source-position filename="../pango/pango-renderer.h" line="174"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="renderer" transfer-ownership="none">
              <type name="Renderer" c:type="PangoRenderer*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="end">
        <callback name="end">
          <source-position filename="../pango/pango-renderer.h" line="175"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="renderer" transfer-ownership="none">
              <type name="Renderer" c:type="PangoRenderer*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="prepare_run">
        <callback name="prepare_run">
          <source-position filename="../pango/pango-renderer.h" line="177"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="renderer" transfer-ownership="none">
              <type name="Renderer" c:type="PangoRenderer*"/>
            </parameter>
            <parameter name="run" transfer-ownership="none">
              <type name="LayoutRun" c:type="PangoLayoutRun*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="draw_glyph_item">
        <callback name="draw_glyph_item">
          <source-position filename="../pango/pango-renderer.h" line="180"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="renderer" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="../pango/pango-renderer.c"
                   line="796">a #PangoRenderer</doc>
              <type name="Renderer" c:type="PangoRenderer*"/>
            </parameter>
            <parameter name="text"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <doc xml:space="preserve"
                   filename="../pango/pango-renderer.c"
                   line="797">the UTF-8 text that @glyph_item refers to, or %NULL</doc>
              <type name="utf8" c:type="const char*"/>
            </parameter>
            <parameter name="glyph_item" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="../pango/pango-renderer.c"
                   line="798">a #PangoGlyphItem</doc>
              <type name="GlyphItem" c:type="PangoGlyphItem*"/>
            </parameter>
            <parameter name="x" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="../pango/pango-renderer.c"
                   line="799">X position of left edge of baseline, in user space coordinates
  in Pango units.</doc>
              <type name="gint" c:type="int"/>
            </parameter>
            <parameter name="y" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="../pango/pango-renderer.c"
                   line="801">Y position of left edge of baseline, in user space coordinates
   in Pango units.</doc>
              <type name="gint" c:type="int"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="_pango_reserved2" introspectable="0">
        <callback name="_pango_reserved2">
          <source-position filename="../pango/pango-renderer.h" line="189"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_pango_reserved3" introspectable="0">
        <callback name="_pango_reserved3">
          <source-position filename="../pango/pango-renderer.h" line="190"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_pango_reserved4" introspectable="0">
        <callback name="_pango_reserved4">
          <source-position filename="../pango/pango-renderer.h" line="191"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <record name="RendererPrivate" c:type="PangoRendererPrivate" disguised="1">
      <source-position filename="../pango/pango-renderer.h" line="37"/>
    </record>
    <constant name="SCALE" value="1024" c:type="PANGO_SCALE">
      <doc xml:space="preserve"
           filename="../pango/pango-types.h"
           line="54">The %PANGO_SCALE macro represents the scale between dimensions used
for Pango distances and device units. (The definition of device
units is dependent on the output device; it will typically be pixels
for a screen, and points for a printer.) %PANGO_SCALE is currently
1024, but this may be changed in the future.

When setting font sizes, device units are always considered to be
points (as in "12 point font"), rather than pixels.</doc>
      <source-position filename="../pango/pango-types.h" line="92"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <enumeration name="Script"
                 glib:type-name="PangoScript"
                 glib:get-type="pango_script_get_type"
                 c:type="PangoScript">
      <doc xml:space="preserve"
           filename="../pango/pango-script.h"
           line="37">The #PangoScript enumeration identifies different writing
systems. The values correspond to the names as defined in the
Unicode standard. See &lt;ulink
url="http://www.unicode.org/reports/tr24/"&gt;Unicode Standard Annex
#24: Script names&lt;/ulink&gt;.

Note that this enumeration is deprecated and will not be updated
to include values in newer versions of the Unicode standard.
Applications should use the GUnicodeScript enumeration instead,
whose values are interchangeable with PangoScript.</doc>
      <member name="invalid_code"
              value="-1"
              c:identifier="PANGO_SCRIPT_INVALID_CODE"
              glib:nick="invalid-code">
        <doc xml:space="preserve"
             filename="../pango/pango-script.h"
             line="39">a value never returned from pango_script_for_unichar()</doc>
      </member>
      <member name="common"
              value="0"
              c:identifier="PANGO_SCRIPT_COMMON"
              glib:nick="common">
        <doc xml:space="preserve"
             filename="../pango/pango-script.h"
             line="40">a character used by multiple different scripts</doc>
      </member>
      <member name="inherited"
              value="1"
              c:identifier="PANGO_SCRIPT_INHERITED"
              glib:nick="inherited">
        <doc xml:space="preserve"
             filename="../pango/pango-script.h"
             line="41">a mark glyph that takes its script from the
base glyph to which it is attached</doc>
      </member>
      <member name="arabic"
              value="2"
              c:identifier="PANGO_SCRIPT_ARABIC"
              glib:nick="arabic">
        <doc xml:space="preserve"
             filename="../pango/pango-script.h"
             line="43">Arabic</doc>
      </member>
      <member name="armenian"
              value="3"
              c:identifier="PANGO_SCRIPT_ARMENIAN"
              glib:nick="armenian">
        <doc xml:space="preserve"
             filename="../pango/pango-script.h"
             line="44">Armenian</doc>
      </member>
      <member name="bengali"
              value="4"
              c:identifier="PANGO_SCRIPT_BENGALI"
              glib:nick="bengali">
        <doc xml:space="preserve"
             filename="../pango/pango-script.h"
             line="45">Bengali</doc>
      </member>
      <member name="bopomofo"
              value="5"
              c:identifier="PANGO_SCRIPT_BOPOMOFO"
              glib:nick="bopomofo">
        <doc xml:space="preserve"
             filename="../pango/pango-script.h"
             line="46">Bopomofo</doc>
      </member>
      <member name="cherokee"
              value="6"
              c:identifier="PANGO_SCRIPT_CHEROKEE"
              glib:nick="cherokee">
        <doc xml:space="preserve"
             filename="../pango/pango-script.h"
             line="47">Cherokee</doc>
      </member>
      <member name="coptic"
              value="7"
              c:identifier="PANGO_SCRIPT_COPTIC"
              glib:nick="coptic">
        <doc xml:space="preserve"
             filename="../pango/pango-script.h"
             line="48">Coptic</doc>
      </member>
      <member name="cyrillic"
              value="8"
              c:identifier="PANGO_SCRIPT_CYRILLIC"
              glib:nick="cyrillic">
        <doc xml:space="preserve"
             filename="../pango/pango-script.h"
             line="49">Cyrillic</doc>
      </member>
      <member name="deseret"
              value="9"
              c:identifier="PANGO_SCRIPT_DESERET"
              glib:nick="deseret">
        <doc xml:space="preserve"
             filename="../pango/pango-script.h"
             line="50">Deseret</doc>
      </member>
      <member name="devanagari"
              value="10"
              c:identifier="PANGO_SCRIPT_DEVANAGARI"
              glib:nick="devanagari">
        <doc xml:space="preserve"
             filename="../pango/pango-script.h"
             line="51">Devanagari</doc>
      </member>
      <member name="ethiopic"
              value="11"
              c:identifier="PANGO_SCRIPT_ETHIOPIC"
              glib:nick="ethiopic">
        <doc xml:space="preserve"
             filename="../pango/pango-script.h"
             line="52">Ethiopic</doc>
      </member>
      <member name="georgian"
              value="12"
              c:identifier="PANGO_SCRIPT_GEORGIAN"
              glib:nick="georgian">
        <doc xml:space="preserve"
             filename="../pango/pango-script.h"
             line="53">Georgian</doc>
      </member>
      <member name="gothic"
              value="13"
              c:identifier="PANGO_SCRIPT_GOTHIC"
              glib:nick="gothic">
        <doc xml:space="preserve"
             filename="../pango/pango-script.h"
             line="54">Gothic</doc>
      </member>
      <member name="greek"
              value="14"
              c:identifier="PANGO_SCRIPT_GREEK"
              glib:nick="greek">
        <doc xml:space="preserve"
             filename="../pango/pango-script.h"
             line="55">Greek</doc>
      </member>
      <member name="gujarati"
              value="15"
              c:identifier="PANGO_SCRIPT_GUJARATI"
              glib:nick="gujarati">
        <doc xml:space="preserve"
             filename="../pango/pango-script.h"
             line="56">Gujarati</doc>
      </member>
      <member name="gurmukhi"
              value="16"
              c:identifier="PANGO_SCRIPT_GURMUKHI"
              glib:nick="gurmukhi">
        <doc xml:space="preserve"
             filename="../pango/pango-script.h"
             line="57">Gurmukhi</doc>
      </member>
      <member name="han"
              value="17"
              c:identifier="PANGO_SCRIPT_HAN"
              glib:nick="han">
        <doc xml:space="preserve"
             filename="../pango/pango-script.h"
             line="58">Han</doc>
      </member>
      <member name="hangul"
              value="18"
              c:identifier="PANGO_SCRIPT_HANGUL"
              glib:nick="hangul">
        <doc xml:space="preserve"
             filename="../pango/pango-script.h"
             line="59">Hangul</doc>
      </member>
      <member name="hebrew"
              value="19"
              c:identifier="PANGO_SCRIPT_HEBREW"
              glib:nick="hebrew">
        <doc xml:space="preserve"
             filename="../pango/pango-script.h"
             line="60">Hebrew</doc>
      </member>
      <member name="hiragana"
              value="20"
              c:identifier="PANGO_SCRIPT_HIRAGANA"
              glib:nick="hiragana">
        <doc xml:space="preserve"
             filename="../pango/pango-script.h"
             line="61">Hiragana</doc>
      </member>
      <member name="kannada"
              value="21"
              c:identifier="PANGO_SCRIPT_KANNADA"
              glib:nick="kannada">
        <doc xml:space="preserve"
             filename="../pango/pango-script.h"
             line="62">Kannada</doc>
      </member>
      <member name="katakana"
              value="22"
              c:identifier="PANGO_SCRIPT_KATAKANA"
              glib:nick="katakana">
        <doc xml:space="preserve"
             filename="../pango/pango-script.h"
             line="63">Katakana</doc>
      </member>
      <member name="khmer"
              value="23"
              c:identifier="PANGO_SCRIPT_KHMER"
              glib:nick="khmer">
        <doc xml:space="preserve"
             filename="../pango/pango-script.h"
             line="64">Khmer</doc>
      </member>
      <member name="lao"
              value="24"
              c:identifier="PANGO_SCRIPT_LAO"
              glib:nick="lao">
        <doc xml:space="preserve"
             filename="../pango/pango-script.h"
             line="65">Lao</doc>
      </member>
      <member name="latin"
              value="25"
              c:identifier="PANGO_SCRIPT_LATIN"
              glib:nick="latin">
        <doc xml:space="preserve"
             filename="../pango/pango-script.h"
             line="66">Latin</doc>
      </member>
      <member name="malayalam"
              value="26"
              c:identifier="PANGO_SCRIPT_MALAYALAM"
              glib:nick="malayalam">
        <doc xml:space="preserve"
             filename="../pango/pango-script.h"
             line="67">Malayalam</doc>
      </member>
      <member name="mongolian"
              value="27"
              c:identifier="PANGO_SCRIPT_MONGOLIAN"
              glib:nick="mongolian">
        <doc xml:space="preserve"
             filename="../pango/pango-script.h"
             line="68">Mongolian</doc>
      </member>
      <member name="myanmar"
              value="28"
              c:identifier="PANGO_SCRIPT_MYANMAR"
              glib:nick="myanmar">
        <doc xml:space="preserve"
             filename="../pango/pango-script.h"
             line="69">Myanmar</doc>
      </member>
      <member name="ogham"
              value="29"
              c:identifier="PANGO_SCRIPT_OGHAM"
              glib:nick="ogham">
        <doc xml:space="preserve"
             filename="../pango/pango-script.h"
             line="70">Ogham</doc>
      </member>
      <member name="old_italic"
              value="30"
              c:identifier="PANGO_SCRIPT_OLD_ITALIC"
              glib:nick="old-italic">
        <doc xml:space="preserve"
             filename="../pango/pango-script.h"
             line="71">Old Italic</doc>
      </member>
      <member name="oriya"
              value="31"
              c:identifier="PANGO_SCRIPT_ORIYA"
              glib:nick="oriya">
        <doc xml:space="preserve"
             filename="../pango/pango-script.h"
             line="72">Oriya</doc>
      </member>
      <member name="runic"
              value="32"
              c:identifier="PANGO_SCRIPT_RUNIC"
              glib:nick="runic">
        <doc xml:space="preserve"
             filename="../pango/pango-script.h"
             line="73">Runic</doc>
      </member>
      <member name="sinhala"
              value="33"
              c:identifier="PANGO_SCRIPT_SINHALA"
              glib:nick="sinhala">
        <doc xml:space="preserve"
             filename="../pango/pango-script.h"
             line="74">Sinhala</doc>
      </member>
      <member name="syriac"
              value="34"
              c:identifier="PANGO_SCRIPT_SYRIAC"
              glib:nick="syriac">
        <doc xml:space="preserve"
             filename="../pango/pango-script.h"
             line="75">Syriac</doc>
      </member>
      <member name="tamil"
              value="35"
              c:identifier="PANGO_SCRIPT_TAMIL"
              glib:nick="tamil">
        <doc xml:space="preserve"
             filename="../pango/pango-script.h"
             line="76">Tamil</doc>
      </member>
      <member name="telugu"
              value="36"
              c:identifier="PANGO_SCRIPT_TELUGU"
              glib:nick="telugu">
        <doc xml:space="preserve"
             filename="../pango/pango-script.h"
             line="77">Telugu</doc>
      </member>
      <member name="thaana"
              value="37"
              c:identifier="PANGO_SCRIPT_THAANA"
              glib:nick="thaana">
        <doc xml:space="preserve"
             filename="../pango/pango-script.h"
             line="78">Thaana</doc>
      </member>
      <member name="thai"
              value="38"
              c:identifier="PANGO_SCRIPT_THAI"
              glib:nick="thai">
        <doc xml:space="preserve"
             filename="../pango/pango-script.h"
             line="79">Thai</doc>
      </member>
      <member name="tibetan"
              value="39"
              c:identifier="PANGO_SCRIPT_TIBETAN"
              glib:nick="tibetan">
        <doc xml:space="preserve"
             filename="../pango/pango-script.h"
             line="80">Tibetan</doc>
      </member>
      <member name="canadian_aboriginal"
              value="40"
              c:identifier="PANGO_SCRIPT_CANADIAN_ABORIGINAL"
              glib:nick="canadian-aboriginal">
        <doc xml:space="preserve"
             filename="../pango/pango-script.h"
             line="81">Canadian Aboriginal</doc>
      </member>
      <member name="yi"
              value="41"
              c:identifier="PANGO_SCRIPT_YI"
              glib:nick="yi">
        <doc xml:space="preserve"
             filename="../pango/pango-script.h"
             line="82">Yi</doc>
      </member>
      <member name="tagalog"
              value="42"
              c:identifier="PANGO_SCRIPT_TAGALOG"
              glib:nick="tagalog">
        <doc xml:space="preserve"
             filename="../pango/pango-script.h"
             line="83">Tagalog</doc>
      </member>
      <member name="hanunoo"
              value="43"
              c:identifier="PANGO_SCRIPT_HANUNOO"
              glib:nick="hanunoo">
        <doc xml:space="preserve"
             filename="../pango/pango-script.h"
             line="84">Hanunoo</doc>
      </member>
      <member name="buhid"
              value="44"
              c:identifier="PANGO_SCRIPT_BUHID"
              glib:nick="buhid">
        <doc xml:space="preserve"
             filename="../pango/pango-script.h"
             line="85">Buhid</doc>
      </member>
      <member name="tagbanwa"
              value="45"
              c:identifier="PANGO_SCRIPT_TAGBANWA"
              glib:nick="tagbanwa">
        <doc xml:space="preserve"
             filename="../pango/pango-script.h"
             line="86">Tagbanwa</doc>
      </member>
      <member name="braille"
              value="46"
              c:identifier="PANGO_SCRIPT_BRAILLE"
              glib:nick="braille">
        <doc xml:space="preserve"
             filename="../pango/pango-script.h"
             line="87">Braille</doc>
      </member>
      <member name="cypriot"
              value="47"
              c:identifier="PANGO_SCRIPT_CYPRIOT"
              glib:nick="cypriot">
        <doc xml:space="preserve"
             filename="../pango/pango-script.h"
             line="88">Cypriot</doc>
      </member>
      <member name="limbu"
              value="48"
              c:identifier="PANGO_SCRIPT_LIMBU"
              glib:nick="limbu">
        <doc xml:space="preserve"
             filename="../pango/pango-script.h"
             line="89">Limbu</doc>
      </member>
      <member name="osmanya"
              value="49"
              c:identifier="PANGO_SCRIPT_OSMANYA"
              glib:nick="osmanya">
        <doc xml:space="preserve"
             filename="../pango/pango-script.h"
             line="90">Osmanya</doc>
      </member>
      <member name="shavian"
              value="50"
              c:identifier="PANGO_SCRIPT_SHAVIAN"
              glib:nick="shavian">
        <doc xml:space="preserve"
             filename="../pango/pango-script.h"
             line="91">Shavian</doc>
      </member>
      <member name="linear_b"
              value="51"
              c:identifier="PANGO_SCRIPT_LINEAR_B"
              glib:nick="linear-b">
        <doc xml:space="preserve"
             filename="../pango/pango-script.h"
             line="92">Linear B</doc>
      </member>
      <member name="tai_le"
              value="52"
              c:identifier="PANGO_SCRIPT_TAI_LE"
              glib:nick="tai-le">
        <doc xml:space="preserve"
             filename="../pango/pango-script.h"
             line="93">Tai Le</doc>
      </member>
      <member name="ugaritic"
              value="53"
              c:identifier="PANGO_SCRIPT_UGARITIC"
              glib:nick="ugaritic">
        <doc xml:space="preserve"
             filename="../pango/pango-script.h"
             line="94">Ugaritic</doc>
      </member>
      <member name="new_tai_lue"
              value="54"
              c:identifier="PANGO_SCRIPT_NEW_TAI_LUE"
              glib:nick="new-tai-lue">
        <doc xml:space="preserve"
             filename="../pango/pango-script.h"
             line="95">New Tai Lue. Since 1.10</doc>
      </member>
      <member name="buginese"
              value="55"
              c:identifier="PANGO_SCRIPT_BUGINESE"
              glib:nick="buginese">
        <doc xml:space="preserve"
             filename="../pango/pango-script.h"
             line="96">Buginese. Since 1.10</doc>
      </member>
      <member name="glagolitic"
              value="56"
              c:identifier="PANGO_SCRIPT_GLAGOLITIC"
              glib:nick="glagolitic">
        <doc xml:space="preserve"
             filename="../pango/pango-script.h"
             line="97">Glagolitic. Since 1.10</doc>
      </member>
      <member name="tifinagh"
              value="57"
              c:identifier="PANGO_SCRIPT_TIFINAGH"
              glib:nick="tifinagh">
        <doc xml:space="preserve"
             filename="../pango/pango-script.h"
             line="98">Tifinagh. Since 1.10</doc>
      </member>
      <member name="syloti_nagri"
              value="58"
              c:identifier="PANGO_SCRIPT_SYLOTI_NAGRI"
              glib:nick="syloti-nagri">
        <doc xml:space="preserve"
             filename="../pango/pango-script.h"
             line="99">Syloti Nagri. Since 1.10</doc>
      </member>
      <member name="old_persian"
              value="59"
              c:identifier="PANGO_SCRIPT_OLD_PERSIAN"
              glib:nick="old-persian">
        <doc xml:space="preserve"
             filename="../pango/pango-script.h"
             line="100">Old Persian. Since 1.10</doc>
      </member>
      <member name="kharoshthi"
              value="60"
              c:identifier="PANGO_SCRIPT_KHAROSHTHI"
              glib:nick="kharoshthi">
        <doc xml:space="preserve"
             filename="../pango/pango-script.h"
             line="101">Kharoshthi. Since 1.10</doc>
      </member>
      <member name="unknown"
              value="61"
              c:identifier="PANGO_SCRIPT_UNKNOWN"
              glib:nick="unknown">
        <doc xml:space="preserve"
             filename="../pango/pango-script.h"
             line="102">an unassigned code point. Since 1.14</doc>
      </member>
      <member name="balinese"
              value="62"
              c:identifier="PANGO_SCRIPT_BALINESE"
              glib:nick="balinese">
        <doc xml:space="preserve"
             filename="../pango/pango-script.h"
             line="103">Balinese. Since 1.14</doc>
      </member>
      <member name="cuneiform"
              value="63"
              c:identifier="PANGO_SCRIPT_CUNEIFORM"
              glib:nick="cuneiform">
        <doc xml:space="preserve"
             filename="../pango/pango-script.h"
             line="104">Cuneiform. Since 1.14</doc>
      </member>
      <member name="phoenician"
              value="64"
              c:identifier="PANGO_SCRIPT_PHOENICIAN"
              glib:nick="phoenician">
        <doc xml:space="preserve"
             filename="../pango/pango-script.h"
             line="105">Phoenician. Since 1.14</doc>
      </member>
      <member name="phags_pa"
              value="65"
              c:identifier="PANGO_SCRIPT_PHAGS_PA"
              glib:nick="phags-pa">
        <doc xml:space="preserve"
             filename="../pango/pango-script.h"
             line="106">Phags-pa. Since 1.14</doc>
      </member>
      <member name="nko"
              value="66"
              c:identifier="PANGO_SCRIPT_NKO"
              glib:nick="nko">
        <doc xml:space="preserve"
             filename="../pango/pango-script.h"
             line="107">N'Ko. Since 1.14</doc>
      </member>
      <member name="kayah_li"
              value="67"
              c:identifier="PANGO_SCRIPT_KAYAH_LI"
              glib:nick="kayah-li">
        <doc xml:space="preserve"
             filename="../pango/pango-script.h"
             line="108">Kayah Li. Since 1.20.1</doc>
      </member>
      <member name="lepcha"
              value="68"
              c:identifier="PANGO_SCRIPT_LEPCHA"
              glib:nick="lepcha">
        <doc xml:space="preserve"
             filename="../pango/pango-script.h"
             line="109">Lepcha. Since 1.20.1</doc>
      </member>
      <member name="rejang"
              value="69"
              c:identifier="PANGO_SCRIPT_REJANG"
              glib:nick="rejang">
        <doc xml:space="preserve"
             filename="../pango/pango-script.h"
             line="110">Rejang. Since 1.20.1</doc>
      </member>
      <member name="sundanese"
              value="70"
              c:identifier="PANGO_SCRIPT_SUNDANESE"
              glib:nick="sundanese">
        <doc xml:space="preserve"
             filename="../pango/pango-script.h"
             line="111">Sundanese. Since 1.20.1</doc>
      </member>
      <member name="saurashtra"
              value="71"
              c:identifier="PANGO_SCRIPT_SAURASHTRA"
              glib:nick="saurashtra">
        <doc xml:space="preserve"
             filename="../pango/pango-script.h"
             line="112">Saurashtra. Since 1.20.1</doc>
      </member>
      <member name="cham"
              value="72"
              c:identifier="PANGO_SCRIPT_CHAM"
              glib:nick="cham">
        <doc xml:space="preserve"
             filename="../pango/pango-script.h"
             line="113">Cham. Since 1.20.1</doc>
      </member>
      <member name="ol_chiki"
              value="73"
              c:identifier="PANGO_SCRIPT_OL_CHIKI"
              glib:nick="ol-chiki">
        <doc xml:space="preserve"
             filename="../pango/pango-script.h"
             line="114">Ol Chiki. Since 1.20.1</doc>
      </member>
      <member name="vai"
              value="74"
              c:identifier="PANGO_SCRIPT_VAI"
              glib:nick="vai">
        <doc xml:space="preserve"
             filename="../pango/pango-script.h"
             line="115">Vai. Since 1.20.1</doc>
      </member>
      <member name="carian"
              value="75"
              c:identifier="PANGO_SCRIPT_CARIAN"
              glib:nick="carian">
        <doc xml:space="preserve"
             filename="../pango/pango-script.h"
             line="116">Carian. Since 1.20.1</doc>
      </member>
      <member name="lycian"
              value="76"
              c:identifier="PANGO_SCRIPT_LYCIAN"
              glib:nick="lycian">
        <doc xml:space="preserve"
             filename="../pango/pango-script.h"
             line="117">Lycian. Since 1.20.1</doc>
      </member>
      <member name="lydian"
              value="77"
              c:identifier="PANGO_SCRIPT_LYDIAN"
              glib:nick="lydian">
        <doc xml:space="preserve"
             filename="../pango/pango-script.h"
             line="118">Lydian. Since 1.20.1</doc>
      </member>
      <member name="batak"
              value="78"
              c:identifier="PANGO_SCRIPT_BATAK"
              glib:nick="batak">
        <doc xml:space="preserve"
             filename="../pango/pango-script.h"
             line="119">Batak. Since 1.32</doc>
      </member>
      <member name="brahmi"
              value="79"
              c:identifier="PANGO_SCRIPT_BRAHMI"
              glib:nick="brahmi">
        <doc xml:space="preserve"
             filename="../pango/pango-script.h"
             line="120">Brahmi. Since 1.32</doc>
      </member>
      <member name="mandaic"
              value="80"
              c:identifier="PANGO_SCRIPT_MANDAIC"
              glib:nick="mandaic">
        <doc xml:space="preserve"
             filename="../pango/pango-script.h"
             line="121">Mandaic. Since 1.32</doc>
      </member>
      <member name="chakma"
              value="81"
              c:identifier="PANGO_SCRIPT_CHAKMA"
              glib:nick="chakma">
        <doc xml:space="preserve"
             filename="../pango/pango-script.h"
             line="122">Chakma. Since: 1.32</doc>
      </member>
      <member name="meroitic_cursive"
              value="82"
              c:identifier="PANGO_SCRIPT_MEROITIC_CURSIVE"
              glib:nick="meroitic-cursive">
        <doc xml:space="preserve"
             filename="../pango/pango-script.h"
             line="123">Meroitic Cursive. Since: 1.32</doc>
      </member>
      <member name="meroitic_hieroglyphs"
              value="83"
              c:identifier="PANGO_SCRIPT_MEROITIC_HIEROGLYPHS"
              glib:nick="meroitic-hieroglyphs">
        <doc xml:space="preserve"
             filename="../pango/pango-script.h"
             line="124">Meroitic Hieroglyphs. Since: 1.32</doc>
      </member>
      <member name="miao"
              value="84"
              c:identifier="PANGO_SCRIPT_MIAO"
              glib:nick="miao">
        <doc xml:space="preserve"
             filename="../pango/pango-script.h"
             line="125">Miao. Since: 1.32</doc>
      </member>
      <member name="sharada"
              value="85"
              c:identifier="PANGO_SCRIPT_SHARADA"
              glib:nick="sharada">
        <doc xml:space="preserve"
             filename="../pango/pango-script.h"
             line="126">Sharada. Since: 1.32</doc>
      </member>
      <member name="sora_sompeng"
              value="86"
              c:identifier="PANGO_SCRIPT_SORA_SOMPENG"
              glib:nick="sora-sompeng">
        <doc xml:space="preserve"
             filename="../pango/pango-script.h"
             line="127">Sora Sompeng. Since: 1.32</doc>
      </member>
      <member name="takri"
              value="87"
              c:identifier="PANGO_SCRIPT_TAKRI"
              glib:nick="takri">
        <doc xml:space="preserve"
             filename="../pango/pango-script.h"
             line="128">Takri. Since: 1.32</doc>
      </member>
      <member name="bassa_vah"
              value="88"
              c:identifier="PANGO_SCRIPT_BASSA_VAH"
              glib:nick="bassa-vah">
        <doc xml:space="preserve"
             filename="../pango/pango-script.h"
             line="129">Bassa. Since: 1.40</doc>
      </member>
      <member name="caucasian_albanian"
              value="89"
              c:identifier="PANGO_SCRIPT_CAUCASIAN_ALBANIAN"
              glib:nick="caucasian-albanian">
        <doc xml:space="preserve"
             filename="../pango/pango-script.h"
             line="130">Caucasian Albanian. Since: 1.40</doc>
      </member>
      <member name="duployan"
              value="90"
              c:identifier="PANGO_SCRIPT_DUPLOYAN"
              glib:nick="duployan">
        <doc xml:space="preserve"
             filename="../pango/pango-script.h"
             line="131">Duployan. Since: 1.40</doc>
      </member>
      <member name="elbasan"
              value="91"
              c:identifier="PANGO_SCRIPT_ELBASAN"
              glib:nick="elbasan">
        <doc xml:space="preserve"
             filename="../pango/pango-script.h"
             line="132">Elbasan. Since: 1.40</doc>
      </member>
      <member name="grantha"
              value="92"
              c:identifier="PANGO_SCRIPT_GRANTHA"
              glib:nick="grantha">
        <doc xml:space="preserve"
             filename="../pango/pango-script.h"
             line="133">Grantha. Since: 1.40</doc>
      </member>
      <member name="khojki"
              value="93"
              c:identifier="PANGO_SCRIPT_KHOJKI"
              glib:nick="khojki">
        <doc xml:space="preserve"
             filename="../pango/pango-script.h"
             line="134">Kjohki. Since: 1.40</doc>
      </member>
      <member name="khudawadi"
              value="94"
              c:identifier="PANGO_SCRIPT_KHUDAWADI"
              glib:nick="khudawadi">
        <doc xml:space="preserve"
             filename="../pango/pango-script.h"
             line="135">Khudawadi, Sindhi. Since: 1.40</doc>
      </member>
      <member name="linear_a"
              value="95"
              c:identifier="PANGO_SCRIPT_LINEAR_A"
              glib:nick="linear-a">
        <doc xml:space="preserve"
             filename="../pango/pango-script.h"
             line="136">Linear A. Since: 1.40</doc>
      </member>
      <member name="mahajani"
              value="96"
              c:identifier="PANGO_SCRIPT_MAHAJANI"
              glib:nick="mahajani">
        <doc xml:space="preserve"
             filename="../pango/pango-script.h"
             line="137">Mahajani. Since: 1.40</doc>
      </member>
      <member name="manichaean"
              value="97"
              c:identifier="PANGO_SCRIPT_MANICHAEAN"
              glib:nick="manichaean">
        <doc xml:space="preserve"
             filename="../pango/pango-script.h"
             line="138">Manichaean. Since: 1.40</doc>
      </member>
      <member name="mende_kikakui"
              value="98"
              c:identifier="PANGO_SCRIPT_MENDE_KIKAKUI"
              glib:nick="mende-kikakui">
        <doc xml:space="preserve"
             filename="../pango/pango-script.h"
             line="139">Mende Kikakui. Since: 1.40</doc>
      </member>
      <member name="modi"
              value="99"
              c:identifier="PANGO_SCRIPT_MODI"
              glib:nick="modi">
        <doc xml:space="preserve"
             filename="../pango/pango-script.h"
             line="140">Modi. Since: 1.40</doc>
      </member>
      <member name="mro"
              value="100"
              c:identifier="PANGO_SCRIPT_MRO"
              glib:nick="mro">
        <doc xml:space="preserve"
             filename="../pango/pango-script.h"
             line="141">Mro. Since: 1.40</doc>
      </member>
      <member name="nabataean"
              value="101"
              c:identifier="PANGO_SCRIPT_NABATAEAN"
              glib:nick="nabataean">
        <doc xml:space="preserve"
             filename="../pango/pango-script.h"
             line="142">Nabataean. Since: 1.40</doc>
      </member>
      <member name="old_north_arabian"
              value="102"
              c:identifier="PANGO_SCRIPT_OLD_NORTH_ARABIAN"
              glib:nick="old-north-arabian">
        <doc xml:space="preserve"
             filename="../pango/pango-script.h"
             line="143">Old North Arabian. Since: 1.40</doc>
      </member>
      <member name="old_permic"
              value="103"
              c:identifier="PANGO_SCRIPT_OLD_PERMIC"
              glib:nick="old-permic">
        <doc xml:space="preserve"
             filename="../pango/pango-script.h"
             line="144">Old Permic. Since: 1.40</doc>
      </member>
      <member name="pahawh_hmong"
              value="104"
              c:identifier="PANGO_SCRIPT_PAHAWH_HMONG"
              glib:nick="pahawh-hmong">
        <doc xml:space="preserve"
             filename="../pango/pango-script.h"
             line="145">Pahawh Hmong. Since: 1.40</doc>
      </member>
      <member name="palmyrene"
              value="105"
              c:identifier="PANGO_SCRIPT_PALMYRENE"
              glib:nick="palmyrene">
        <doc xml:space="preserve"
             filename="../pango/pango-script.h"
             line="146">Palmyrene. Since: 1.40</doc>
      </member>
      <member name="pau_cin_hau"
              value="106"
              c:identifier="PANGO_SCRIPT_PAU_CIN_HAU"
              glib:nick="pau-cin-hau">
        <doc xml:space="preserve"
             filename="../pango/pango-script.h"
             line="147">Pau Cin Hau. Since: 1.40</doc>
      </member>
      <member name="psalter_pahlavi"
              value="107"
              c:identifier="PANGO_SCRIPT_PSALTER_PAHLAVI"
              glib:nick="psalter-pahlavi">
        <doc xml:space="preserve"
             filename="../pango/pango-script.h"
             line="148">Psalter Pahlavi. Since: 1.40</doc>
      </member>
      <member name="siddham"
              value="108"
              c:identifier="PANGO_SCRIPT_SIDDHAM"
              glib:nick="siddham">
        <doc xml:space="preserve"
             filename="../pango/pango-script.h"
             line="149">Siddham. Since: 1.40</doc>
      </member>
      <member name="tirhuta"
              value="109"
              c:identifier="PANGO_SCRIPT_TIRHUTA"
              glib:nick="tirhuta">
        <doc xml:space="preserve"
             filename="../pango/pango-script.h"
             line="150">Tirhuta. Since: 1.40</doc>
      </member>
      <member name="warang_citi"
              value="110"
              c:identifier="PANGO_SCRIPT_WARANG_CITI"
              glib:nick="warang-citi">
        <doc xml:space="preserve"
             filename="../pango/pango-script.h"
             line="151">Warang Citi. Since: 1.40</doc>
      </member>
      <member name="ahom"
              value="111"
              c:identifier="PANGO_SCRIPT_AHOM"
              glib:nick="ahom">
        <doc xml:space="preserve"
             filename="../pango/pango-script.h"
             line="152">Ahom. Since: 1.40</doc>
      </member>
      <member name="anatolian_hieroglyphs"
              value="112"
              c:identifier="PANGO_SCRIPT_ANATOLIAN_HIEROGLYPHS"
              glib:nick="anatolian-hieroglyphs">
        <doc xml:space="preserve"
             filename="../pango/pango-script.h"
             line="153">Anatolian Hieroglyphs. Since: 1.40</doc>
      </member>
      <member name="hatran"
              value="113"
              c:identifier="PANGO_SCRIPT_HATRAN"
              glib:nick="hatran">
        <doc xml:space="preserve"
             filename="../pango/pango-script.h"
             line="154">Hatran. Since: 1.40</doc>
      </member>
      <member name="multani"
              value="114"
              c:identifier="PANGO_SCRIPT_MULTANI"
              glib:nick="multani">
        <doc xml:space="preserve"
             filename="../pango/pango-script.h"
             line="155">Multani. Since: 1.40</doc>
      </member>
      <member name="old_hungarian"
              value="115"
              c:identifier="PANGO_SCRIPT_OLD_HUNGARIAN"
              glib:nick="old-hungarian">
        <doc xml:space="preserve"
             filename="../pango/pango-script.h"
             line="156">Old Hungarian. Since: 1.40</doc>
      </member>
      <member name="signwriting"
              value="116"
              c:identifier="PANGO_SCRIPT_SIGNWRITING"
              glib:nick="signwriting">
        <doc xml:space="preserve"
             filename="../pango/pango-script.h"
             line="157">Signwriting. Since: 1.40</doc>
      </member>
      <function name="for_unichar"
                c:identifier="pango_script_for_unichar"
                version="1.4"
                deprecated="1"
                deprecated-version="1.44.">
        <doc xml:space="preserve"
             filename="../pango/pango-script.c"
             line="72">Looks up the script for a particular character (as defined by
Unicode Standard Annex \#24). No check is made for @ch being a
valid Unicode character; if you pass in invalid character, the
result is undefined.

Note that while the return type of this function is declared
as PangoScript, as of Pango 1.18, this function simply returns
the return value of g_unichar_get_script(). Callers must be
prepared to handle unknown values.</doc>
        <doc-deprecated xml:space="preserve">Use g_unichar_get_script()</doc-deprecated>
        <source-position filename="../pango/pango-script.h" line="310"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../pango/pango-script.c"
               line="86">the #PangoScript for the character.</doc>
          <type name="Script" c:type="PangoScript"/>
        </return-value>
        <parameters>
          <parameter name="ch" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-script.c"
                 line="74">a Unicode character</doc>
            <type name="gunichar" c:type="gunichar"/>
          </parameter>
        </parameters>
      </function>
      <function name="get_sample_language"
                c:identifier="pango_script_get_sample_language"
                version="1.4">
        <doc xml:space="preserve"
             filename="../pango/pango-language.c"
             line="865">Given a script, finds a language tag that is reasonably
representative of that script. This will usually be the
most widely spoken or used language written in that script:
for instance, the sample language for %PANGO_SCRIPT_CYRILLIC
is &lt;literal&gt;ru&lt;/literal&gt; (Russian), the sample language
for %PANGO_SCRIPT_ARABIC is &lt;literal&gt;ar&lt;/literal&gt;.

For some
scripts, no sample language will be returned because there
is no language that is sufficiently representative. The best
example of this is %PANGO_SCRIPT_HAN, where various different
variants of written Chinese, Japanese, and Korean all use
significantly different sets of Han characters and forms
of shared characters. No sample language can be provided
for many historical scripts as well.

As of 1.18, this function checks the environment variables
PANGO_LANGUAGE and LANGUAGE (checked in that order) first.
If one of them is set, it is parsed as a list of language tags
separated by colons or other separators.  This function
will return the first language in the parsed list that Pango
believes may use @script for writing.  This last predicate
is tested using pango_language_includes_script().  This can
be used to control Pango's font selection for non-primary
languages.  For example, a PANGO_LANGUAGE enviroment variable
set to "en:fa" makes Pango choose fonts suitable for Persian (fa)
instead of Arabic (ar) when a segment of Arabic text is found
in an otherwise non-Arabic text.  The same trick can be used to
choose a default language for %PANGO_SCRIPT_HAN when setting
context language is not feasible.</doc>
        <source-position filename="../pango/pango-script.h" line="331"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="../pango/pango-language.c"
               line="900">a #PangoLanguage that is representative
of the script, or %NULL if no such language exists.</doc>
          <type name="Language" c:type="PangoLanguage*"/>
        </return-value>
        <parameters>
          <parameter name="script" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-language.c"
                 line="867">a #PangoScript</doc>
            <type name="Script" c:type="PangoScript"/>
          </parameter>
        </parameters>
      </function>
    </enumeration>
    <record name="ScriptIter"
            c:type="PangoScriptIter"
            glib:type-name="PangoScriptIter"
            glib:get-type="pango_script_iter_get_type"
            c:symbol-prefix="script_iter">
      <doc xml:space="preserve"
           filename="../pango/pango-script.h"
           line="29">A #PangoScriptIter is used to iterate through a string
and identify ranges in different scripts.</doc>
      <source-position filename="../pango/pango-script.h" line="35"/>
      <constructor name="new"
                   c:identifier="pango_script_iter_new"
                   version="1.4">
        <doc xml:space="preserve"
             filename="../pango/pango-script.c"
             line="128">Create a new #PangoScriptIter, used to break a string of
Unicode text into runs by Unicode script. No copy is made of
@text, so the caller needs to make sure it remains valid until
the iterator is freed with pango_script_iter_free().</doc>
        <source-position filename="../pango/pango-script.h" line="316"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../pango/pango-script.c"
               line="138">the new script iterator, initialized
 to point at the first range in the text, which should be
 freed with pango_script_iter_free(). If the string is
 empty, it will point at an empty range.</doc>
          <type name="ScriptIter" c:type="PangoScriptIter*"/>
        </return-value>
        <parameters>
          <parameter name="text" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-script.c"
                 line="130">a UTF-8 string</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="length" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-script.c"
                 line="131">length of @text, or -1 if @text is nul-terminated.</doc>
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="free" c:identifier="pango_script_iter_free" version="1.4">
        <doc xml:space="preserve"
             filename="../pango/pango-script.c"
             line="163">Frees a #PangoScriptIter created with pango_script_iter_new().</doc>
        <source-position filename="../pango/pango-script.h" line="326"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="iter" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-script.c"
                 line="165">a #PangoScriptIter</doc>
            <type name="ScriptIter" c:type="PangoScriptIter*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_range"
              c:identifier="pango_script_iter_get_range"
              version="1.4">
        <doc xml:space="preserve"
             filename="../pango/pango-script.c"
             line="178">Gets information about the range to which @iter currently points.
The range is the set of locations p where *start &lt;= p &lt; *end.
(That is, it doesn't include the character stored at *end)

Note that while the type of the @script argument is declared
as PangoScript, as of Pango 1.18, this function simply returns
GUnicodeScript values. Callers must be prepared to handle unknown
values.</doc>
        <source-position filename="../pango/pango-script.h" line="319"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="iter" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-script.c"
                 line="180">a #PangoScriptIter</doc>
            <type name="ScriptIter" c:type="PangoScriptIter*"/>
          </instance-parameter>
          <parameter name="start"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../pango/pango-script.c"
                 line="181">location to store start position of the range, or %NULL</doc>
            <type name="utf8" c:type="const char**"/>
          </parameter>
          <parameter name="end"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../pango/pango-script.c"
                 line="182">location to store end position of the range, or %NULL</doc>
            <type name="utf8" c:type="const char**"/>
          </parameter>
          <parameter name="script"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../pango/pango-script.c"
                 line="183">location to store script for range, or %NULL</doc>
            <type name="Script" c:type="PangoScript*"/>
          </parameter>
        </parameters>
      </method>
      <method name="next" c:identifier="pango_script_iter_next" version="1.4">
        <doc xml:space="preserve"
             filename="../pango/pango-script.c"
             line="301">Advances a #PangoScriptIter to the next range. If @iter
is already at the end, it is left unchanged and %FALSE
is returned.</doc>
        <source-position filename="../pango/pango-script.h" line="324"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../pango/pango-script.c"
               line="309">%TRUE if @iter was successfully advanced.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="iter" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-script.c"
                 line="303">a #PangoScriptIter</doc>
            <type name="ScriptIter" c:type="PangoScriptIter*"/>
          </instance-parameter>
        </parameters>
      </method>
    </record>
    <bitfield name="ShapeFlags"
              glib:type-name="PangoShapeFlags"
              glib:get-type="pango_shape_flags_get_type"
              c:type="PangoShapeFlags">
      <doc xml:space="preserve"
           filename="../pango/pango-glyph.h"
           line="205">Flags influencing the shaping process.
These can be passed to pango_shape_with_flags().</doc>
      <member name="none"
              value="0"
              c:identifier="PANGO_SHAPE_NONE"
              glib:nick="none">
        <doc xml:space="preserve"
             filename="../pango/pango-glyph.h"
             line="207">Default value.</doc>
      </member>
      <member name="round_positions"
              value="1"
              c:identifier="PANGO_SHAPE_ROUND_POSITIONS"
              glib:nick="round-positions">
        <doc xml:space="preserve"
             filename="../pango/pango-glyph.h"
             line="208">Round glyph positions
    and widths to whole device units. This option should
    be set if the target renderer can't do subpixel
    positioning of glyphs.</doc>
      </member>
    </bitfield>
    <bitfield name="ShowFlags"
              glib:type-name="PangoShowFlags"
              glib:get-type="pango_show_flags_get_type"
              c:type="PangoShowFlags">
      <doc xml:space="preserve"
           filename="../pango/pango-attributes.h"
           line="582">These flags affect how Pango treats characters that are normally
not visible in the output.</doc>
      <member name="none"
              value="0"
              c:identifier="PANGO_SHOW_NONE"
              glib:nick="none">
        <doc xml:space="preserve"
             filename="../pango/pango-attributes.h"
             line="584">No special treatment for invisible characters</doc>
      </member>
      <member name="spaces"
              value="1"
              c:identifier="PANGO_SHOW_SPACES"
              glib:nick="spaces">
        <doc xml:space="preserve"
             filename="../pango/pango-attributes.h"
             line="585">Render spaces, tabs and newlines visibly</doc>
      </member>
      <member name="line_breaks"
              value="2"
              c:identifier="PANGO_SHOW_LINE_BREAKS"
              glib:nick="line-breaks">
        <doc xml:space="preserve"
             filename="../pango/pango-attributes.h"
             line="586">Render line breaks visibly</doc>
      </member>
      <member name="ignorables"
              value="4"
              c:identifier="PANGO_SHOW_IGNORABLES"
              glib:nick="ignorables">
        <doc xml:space="preserve"
             filename="../pango/pango-attributes.h"
             line="587">Render default-ignorable Unicode
     characters visibly</doc>
      </member>
    </bitfield>
    <enumeration name="Stretch"
                 glib:type-name="PangoStretch"
                 glib:get-type="pango_stretch_get_type"
                 c:type="PangoStretch">
      <doc xml:space="preserve"
           filename="../pango/pango-font.h"
           line="113">An enumeration specifying the width of the font relative to other designs
within a family.</doc>
      <member name="ultra_condensed"
              value="0"
              c:identifier="PANGO_STRETCH_ULTRA_CONDENSED"
              glib:nick="ultra-condensed">
        <doc xml:space="preserve"
             filename="../pango/pango-font.h"
             line="115">ultra condensed width</doc>
      </member>
      <member name="extra_condensed"
              value="1"
              c:identifier="PANGO_STRETCH_EXTRA_CONDENSED"
              glib:nick="extra-condensed">
        <doc xml:space="preserve"
             filename="../pango/pango-font.h"
             line="116">extra condensed width</doc>
      </member>
      <member name="condensed"
              value="2"
              c:identifier="PANGO_STRETCH_CONDENSED"
              glib:nick="condensed">
        <doc xml:space="preserve"
             filename="../pango/pango-font.h"
             line="117">condensed width</doc>
      </member>
      <member name="semi_condensed"
              value="3"
              c:identifier="PANGO_STRETCH_SEMI_CONDENSED"
              glib:nick="semi-condensed">
        <doc xml:space="preserve"
             filename="../pango/pango-font.h"
             line="118">semi condensed width</doc>
      </member>
      <member name="normal"
              value="4"
              c:identifier="PANGO_STRETCH_NORMAL"
              glib:nick="normal">
        <doc xml:space="preserve"
             filename="../pango/pango-font.h"
             line="119">the normal width</doc>
      </member>
      <member name="semi_expanded"
              value="5"
              c:identifier="PANGO_STRETCH_SEMI_EXPANDED"
              glib:nick="semi-expanded">
        <doc xml:space="preserve"
             filename="../pango/pango-font.h"
             line="120">semi expanded width</doc>
      </member>
      <member name="expanded"
              value="6"
              c:identifier="PANGO_STRETCH_EXPANDED"
              glib:nick="expanded">
        <doc xml:space="preserve"
             filename="../pango/pango-font.h"
             line="121">expanded width</doc>
      </member>
      <member name="extra_expanded"
              value="7"
              c:identifier="PANGO_STRETCH_EXTRA_EXPANDED"
              glib:nick="extra-expanded">
        <doc xml:space="preserve"
             filename="../pango/pango-font.h"
             line="122">extra expanded width</doc>
      </member>
      <member name="ultra_expanded"
              value="8"
              c:identifier="PANGO_STRETCH_ULTRA_EXPANDED"
              glib:nick="ultra-expanded">
        <doc xml:space="preserve"
             filename="../pango/pango-font.h"
             line="123">ultra expanded width</doc>
      </member>
    </enumeration>
    <enumeration name="Style"
                 glib:type-name="PangoStyle"
                 glib:get-type="pango_style_get_type"
                 c:type="PangoStyle">
      <doc xml:space="preserve"
           filename="../pango/pango-font.h"
           line="53">An enumeration specifying the various slant styles possible for a font.</doc>
      <member name="normal"
              value="0"
              c:identifier="PANGO_STYLE_NORMAL"
              glib:nick="normal">
        <doc xml:space="preserve"
             filename="../pango/pango-font.h"
             line="55">the font is upright.</doc>
      </member>
      <member name="oblique"
              value="1"
              c:identifier="PANGO_STYLE_OBLIQUE"
              glib:nick="oblique">
        <doc xml:space="preserve"
             filename="../pango/pango-font.h"
             line="56">the font is slanted, but in a roman style.</doc>
      </member>
      <member name="italic"
              value="2"
              c:identifier="PANGO_STYLE_ITALIC"
              glib:nick="italic">
        <doc xml:space="preserve"
             filename="../pango/pango-font.h"
             line="57">the font is slanted in an italic style.</doc>
      </member>
    </enumeration>
    <enumeration name="TabAlign"
                 glib:type-name="PangoTabAlign"
                 glib:get-type="pango_tab_align_get_type"
                 c:type="PangoTabAlign">
      <doc xml:space="preserve"
           filename="../pango/pango-tabs.h"
           line="31">A #PangoTabAlign specifies where a tab stop appears relative to the text.</doc>
      <member name="left"
              value="0"
              c:identifier="PANGO_TAB_LEFT"
              glib:nick="left">
        <doc xml:space="preserve"
             filename="../pango/pango-tabs.h"
             line="33">the tab stop appears to the left of the text.</doc>
      </member>
    </enumeration>
    <record name="TabArray"
            c:type="PangoTabArray"
            glib:type-name="PangoTabArray"
            glib:get-type="pango_tab_array_get_type"
            c:symbol-prefix="tab_array">
      <doc xml:space="preserve"
           filename="../pango/pango-tabs.c"
           line="47">A #PangoTabArray struct contains an array
of tab stops. Each tab stop has an alignment and a position.</doc>
      <source-position filename="../pango/pango-tabs.h" line="29"/>
      <constructor name="new" c:identifier="pango_tab_array_new">
        <doc xml:space="preserve"
             filename="../pango/pango-tabs.c"
             line="72">Creates an array of @initial_size tab stops. Tab stops are specified in
pixel units if @positions_in_pixels is %TRUE, otherwise in Pango
units. All stops are initially at position 0.</doc>
        <source-position filename="../pango/pango-tabs.h" line="58"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../pango/pango-tabs.c"
               line="81">the newly allocated #PangoTabArray, which should
              be freed with pango_tab_array_free().</doc>
          <type name="TabArray" c:type="PangoTabArray*"/>
        </return-value>
        <parameters>
          <parameter name="initial_size" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-tabs.c"
                 line="74">Initial number of tab stops to allocate, can be 0</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="positions_in_pixels" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-tabs.c"
                 line="75">whether positions are in pixel units</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_with_positions"
                   c:identifier="pango_tab_array_new_with_positions"
                   introspectable="0">
        <doc xml:space="preserve"
             filename="../pango/pango-tabs.c"
             line="114">This is a convenience function that creates a #PangoTabArray
and allows you to specify the alignment and position of each
tab stop. You &lt;emphasis&gt;must&lt;/emphasis&gt; provide an alignment
and position for @size tab stops.</doc>
        <source-position filename="../pango/pango-tabs.h" line="61"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../pango/pango-tabs.c"
               line="127">the newly allocated #PangoTabArray, which should
              be freed with pango_tab_array_free().</doc>
          <type name="TabArray" c:type="PangoTabArray*"/>
        </return-value>
        <parameters>
          <parameter name="size" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-tabs.c"
                 line="116">number of tab stops in the array</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="positions_in_pixels" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-tabs.c"
                 line="117">whether positions are in pixel units</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="first_alignment" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-tabs.c"
                 line="118">alignment of first tab stop</doc>
            <type name="TabAlign" c:type="PangoTabAlign"/>
          </parameter>
          <parameter name="first_position" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-tabs.c"
                 line="119">position of first tab stop</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="..." transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-tabs.c"
                 line="120">additional alignment/position pairs</doc>
            <varargs/>
          </parameter>
        </parameters>
      </constructor>
      <method name="copy" c:identifier="pango_tab_array_copy">
        <doc xml:space="preserve"
             filename="../pango/pango-tabs.c"
             line="177">Copies a #PangoTabArray</doc>
        <source-position filename="../pango/pango-tabs.h" line="69"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../pango/pango-tabs.c"
               line="183">the newly allocated #PangoTabArray, which should
              be freed with pango_tab_array_free().</doc>
          <type name="TabArray" c:type="PangoTabArray*"/>
        </return-value>
        <parameters>
          <instance-parameter name="src" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-tabs.c"
                 line="179">#PangoTabArray to copy</doc>
            <type name="TabArray" c:type="PangoTabArray*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="free" c:identifier="pango_tab_array_free">
        <doc xml:space="preserve"
             filename="../pango/pango-tabs.c"
             line="201">Frees a tab array and associated resources.</doc>
        <source-position filename="../pango/pango-tabs.h" line="71"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="tab_array" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-tabs.c"
                 line="203">a #PangoTabArray</doc>
            <type name="TabArray" c:type="PangoTabArray*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_positions_in_pixels"
              c:identifier="pango_tab_array_get_positions_in_pixels">
        <doc xml:space="preserve"
             filename="../pango/pango-tabs.c"
             line="364">Returns %TRUE if the tab positions are in pixels, %FALSE if they are
in Pango units.</doc>
        <source-position filename="../pango/pango-tabs.h" line="93"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../pango/pango-tabs.c"
               line="371">whether positions are in pixels.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="tab_array" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-tabs.c"
                 line="366">a #PangoTabArray</doc>
            <type name="TabArray" c:type="PangoTabArray*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_size" c:identifier="pango_tab_array_get_size">
        <doc xml:space="preserve"
             filename="../pango/pango-tabs.c"
             line="218">Gets the number of tab stops in @tab_array.</doc>
        <source-position filename="../pango/pango-tabs.h" line="73"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../pango/pango-tabs.c"
               line="224">the number of tab stops in the array.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="tab_array" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-tabs.c"
                 line="220">a #PangoTabArray</doc>
            <type name="TabArray" c:type="PangoTabArray*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_tab" c:identifier="pango_tab_array_get_tab">
        <doc xml:space="preserve"
             filename="../pango/pango-tabs.c"
             line="297">Gets the alignment and position of a tab stop.</doc>
        <source-position filename="../pango/pango-tabs.h" line="83"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="tab_array" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-tabs.c"
                 line="299">a #PangoTabArray</doc>
            <type name="TabArray" c:type="PangoTabArray*"/>
          </instance-parameter>
          <parameter name="tab_index" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-tabs.c"
                 line="300">tab stop index</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="alignment"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../pango/pango-tabs.c"
                 line="301">location to store alignment, or %NULL</doc>
            <type name="TabAlign" c:type="PangoTabAlign*"/>
          </parameter>
          <parameter name="location"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../pango/pango-tabs.c"
                 line="302">location to store tab position, or %NULL</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_tabs" c:identifier="pango_tab_array_get_tabs">
        <doc xml:space="preserve"
             filename="../pango/pango-tabs.c"
             line="324">If non-%NULL, @alignments and @locations are filled with allocated
arrays of length pango_tab_array_get_size(). You must free the
returned array.</doc>
        <source-position filename="../pango/pango-tabs.h" line="88"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="tab_array" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-tabs.c"
                 line="326">a #PangoTabArray</doc>
            <type name="TabArray" c:type="PangoTabArray*"/>
          </instance-parameter>
          <parameter name="alignments"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../pango/pango-tabs.c"
                 line="327">location to store an array of tab
  stop alignments, or %NULL</doc>
            <type name="TabAlign" c:type="PangoTabAlign**"/>
          </parameter>
          <parameter name="locations"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../pango/pango-tabs.c"
                 line="329">location to store an array
  of tab positions, or %NULL</doc>
            <array zero-terminated="0" c:type="gint**">
              <type name="gint" c:type="gint*"/>
            </array>
          </parameter>
        </parameters>
      </method>
      <method name="resize" c:identifier="pango_tab_array_resize">
        <doc xml:space="preserve"
             filename="../pango/pango-tabs.c"
             line="234">Resizes a tab array. You must subsequently initialize any tabs that
were added as a result of growing the array.</doc>
        <source-position filename="../pango/pango-tabs.h" line="75"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="tab_array" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-tabs.c"
                 line="236">a #PangoTabArray</doc>
            <type name="TabArray" c:type="PangoTabArray*"/>
          </instance-parameter>
          <parameter name="new_size" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-tabs.c"
                 line="237">new size of the array</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_tab" c:identifier="pango_tab_array_set_tab">
        <doc xml:space="preserve"
             filename="../pango/pango-tabs.c"
             line="267">Sets the alignment and location of a tab stop.
@alignment must always be #PANGO_TAB_LEFT in the current
implementation.</doc>
        <source-position filename="../pango/pango-tabs.h" line="78"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="tab_array" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-tabs.c"
                 line="269">a #PangoTabArray</doc>
            <type name="TabArray" c:type="PangoTabArray*"/>
          </instance-parameter>
          <parameter name="tab_index" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-tabs.c"
                 line="270">the index of a tab stop</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="alignment" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-tabs.c"
                 line="271">tab alignment</doc>
            <type name="TabAlign" c:type="PangoTabAlign"/>
          </parameter>
          <parameter name="location" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../pango/pango-tabs.c"
                 line="272">tab location in Pango units</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
    </record>
    <function-macro name="UNAVAILABLE"
                    c:identifier="PANGO_UNAVAILABLE"
                    introspectable="0">
      <source-position filename="../pango/pango-version-macros.h" line="363"/>
      <parameters>
        <parameter name="maj">
        </parameter>
        <parameter name="min">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="UNITS_ROUND"
                    c:identifier="PANGO_UNITS_ROUND"
                    version="1.18"
                    introspectable="0">
      <doc xml:space="preserve"
           filename="../pango/pango-types.h"
           line="105">Rounds a dimension to whole device units, but does not
convert it to device units.</doc>
      <source-position filename="../pango/pango-types.h" line="115"/>
      <parameters>
        <parameter name="d">
          <doc xml:space="preserve"
               filename="../pango/pango-types.h"
               line="107">a dimension in Pango units.</doc>
        </parameter>
      </parameters>
    </function-macro>
    <constant name="UNKNOWN_GLYPH_HEIGHT"
              value="14"
              c:type="PANGO_UNKNOWN_GLYPH_HEIGHT">
      <source-position filename="../pango/pango-font.h" line="709"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="UNKNOWN_GLYPH_WIDTH"
              value="10"
              c:type="PANGO_UNKNOWN_GLYPH_WIDTH">
      <source-position filename="../pango/pango-font.h" line="708"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <enumeration name="Underline"
                 glib:type-name="PangoUnderline"
                 glib:get-type="pango_underline_get_type"
                 c:type="PangoUnderline">
      <doc xml:space="preserve"
           filename="../pango/pango-attributes.h"
           line="203">The #PangoUnderline enumeration is used to specify
whether text should be underlined, and if so, the type
of underlining.</doc>
      <member name="none"
              value="0"
              c:identifier="PANGO_UNDERLINE_NONE"
              glib:nick="none">
        <doc xml:space="preserve"
             filename="../pango/pango-attributes.h"
             line="205">no underline should be drawn</doc>
      </member>
      <member name="single"
              value="1"
              c:identifier="PANGO_UNDERLINE_SINGLE"
              glib:nick="single">
        <doc xml:space="preserve"
             filename="../pango/pango-attributes.h"
             line="206">a single underline should be drawn</doc>
      </member>
      <member name="double"
              value="2"
              c:identifier="PANGO_UNDERLINE_DOUBLE"
              glib:nick="double">
        <doc xml:space="preserve"
             filename="../pango/pango-attributes.h"
             line="207">a double underline should be drawn</doc>
      </member>
      <member name="low"
              value="3"
              c:identifier="PANGO_UNDERLINE_LOW"
              glib:nick="low">
        <doc xml:space="preserve"
             filename="../pango/pango-attributes.h"
             line="208">a single underline should be drawn at a
    position beneath the ink extents of the text being
    underlined. This should be used only for underlining
    single characters, such as for keyboard accelerators.
    %PANGO_UNDERLINE_SINGLE should be used for extended
    portions of text.</doc>
      </member>
      <member name="error"
              value="4"
              c:identifier="PANGO_UNDERLINE_ERROR"
              glib:nick="error">
        <doc xml:space="preserve"
             filename="../pango/pango-attributes.h"
             line="214">a wavy underline should be drawn below.
    This underline is typically used to indicate an error such
    as a possible mispelling; in some cases a contrasting color
    may automatically be used. This type of underlining is
    available since Pango 1.4.</doc>
      </member>
      <member name="single_line"
              value="5"
              c:identifier="PANGO_UNDERLINE_SINGLE_LINE"
              glib:nick="single-line">
        <doc xml:space="preserve"
             filename="../pango/pango-attributes.h"
             line="219">Like @PANGO_UNDERLINE_SINGLE, but
    drawn continuously across multiple runs. This type
    of underlining is available since Pango 1.46.</doc>
      </member>
      <member name="double_line"
              value="6"
              c:identifier="PANGO_UNDERLINE_DOUBLE_LINE"
              glib:nick="double-line">
        <doc xml:space="preserve"
             filename="../pango/pango-attributes.h"
             line="222">Like @PANGO_UNDERLINE_DOUBLE, but
    drawn continuously across multiple runs. This type
    of underlining is available since Pango 1.46.</doc>
      </member>
      <member name="error_line"
              value="7"
              c:identifier="PANGO_UNDERLINE_ERROR_LINE"
              glib:nick="error-line">
        <doc xml:space="preserve"
             filename="../pango/pango-attributes.h"
             line="225">Like @PANGO_UNDERLINE_ERROR, but
    drawn continuously across multiple runs. This type
    of underlining is available since Pango 1.46.</doc>
      </member>
    </enumeration>
    <function-macro name="VERSION_CHECK"
                    c:identifier="PANGO_VERSION_CHECK"
                    introspectable="0">
      <doc xml:space="preserve"
           filename="../pango/pango-utils.h"
           line="152">Checks that the version of Pango available at compile-time is not older than
the provided version number.</doc>
      <source-position filename="../pango/pango-utils.h" line="158"/>
      <parameters>
        <parameter name="major">
          <doc xml:space="preserve"
               filename="../pango/pango-utils.h"
               line="154">the major component of the version number</doc>
        </parameter>
        <parameter name="minor">
          <doc xml:space="preserve"
               filename="../pango/pango-utils.h"
               line="155">the minor component of the version number</doc>
        </parameter>
        <parameter name="micro">
          <doc xml:space="preserve"
               filename="../pango/pango-utils.h"
               line="156">the micro component of the version number</doc>
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="VERSION_ENCODE"
                    c:identifier="PANGO_VERSION_ENCODE"
                    introspectable="0">
      <doc xml:space="preserve"
           filename="../pango/pango-utils.h"
           line="105">This macro encodes the given Pango version into an integer.  The numbers
returned by %PANGO_VERSION and pango_version() are encoded using this macro.
Two encoded version numbers can be compared as integers.</doc>
      <source-position filename="../pango/pango-utils.h" line="115"/>
      <parameters>
        <parameter name="major">
          <doc xml:space="preserve"
               filename="../pango/pango-utils.h"
               line="107">the major component of the version number</doc>
        </parameter>
        <parameter name="minor">
          <doc xml:space="preserve"
               filename="../pango/pango-utils.h"
               line="108">the minor component of the version number</doc>
        </parameter>
        <parameter name="micro">
          <doc xml:space="preserve"
               filename="../pango/pango-utils.h"
               line="109">the micro component of the version number</doc>
        </parameter>
      </parameters>
    </function-macro>
    <constant name="VERSION_MIN_REQUIRED"
              value="2"
              c:type="PANGO_VERSION_MIN_REQUIRED"
              version="1.42">
      <doc xml:space="preserve"
           filename="../pango/pango-version-macros.h"
           line="291">A macro that should be defined by the user prior to including
the pango.h header.
The definition should be one of the predefined Pango version
macros: %PANGO_VERSION_1_2, %PANGO_VERSION_1_4,...

This macro defines the earliest version of Pango that the package is
required to be able to compile against.

If the compiler is configured to warn about the use of deprecated
functions, then using functions that were deprecated in version
%PANGO_VERSION_MIN_REQUIRED or earlier will cause warnings (but
using functions deprecated in later releases will not).</doc>
      <source-position filename="../pango/pango-version-macros.h" line="317"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <enumeration name="Variant"
                 glib:type-name="PangoVariant"
                 glib:get-type="pango_variant_get_type"
                 c:type="PangoVariant">
      <doc xml:space="preserve"
           filename="../pango/pango-font.h"
           line="67">An enumeration specifying capitalization variant of the font.</doc>
      <member name="normal"
              value="0"
              c:identifier="PANGO_VARIANT_NORMAL"
              glib:nick="normal">
        <doc xml:space="preserve"
             filename="../pango/pango-font.h"
             line="69">A normal font.</doc>
      </member>
      <member name="small_caps"
              value="1"
              c:identifier="PANGO_VARIANT_SMALL_CAPS"
              glib:nick="small-caps">
        <doc xml:space="preserve"
             filename="../pango/pango-font.h"
             line="70">A font with the lower case characters
replaced by smaller variants of the capital characters.</doc>
      </member>
    </enumeration>
    <enumeration name="Weight"
                 glib:type-name="PangoWeight"
                 glib:get-type="pango_weight_get_type"
                 c:type="PangoWeight">
      <doc xml:space="preserve"
           filename="../pango/pango-font.h"
           line="80">An enumeration specifying the weight (boldness) of a font. This is a numerical
value ranging from 100 to 1000, but there are some predefined values:</doc>
      <member name="thin"
              value="100"
              c:identifier="PANGO_WEIGHT_THIN"
              glib:nick="thin">
        <doc xml:space="preserve"
             filename="../pango/pango-font.h"
             line="82">the thin weight (= 100; Since: 1.24)</doc>
      </member>
      <member name="ultralight"
              value="200"
              c:identifier="PANGO_WEIGHT_ULTRALIGHT"
              glib:nick="ultralight">
        <doc xml:space="preserve"
             filename="../pango/pango-font.h"
             line="83">the ultralight weight (= 200)</doc>
      </member>
      <member name="light"
              value="300"
              c:identifier="PANGO_WEIGHT_LIGHT"
              glib:nick="light">
        <doc xml:space="preserve"
             filename="../pango/pango-font.h"
             line="84">the light weight (= 300)</doc>
      </member>
      <member name="semilight"
              value="350"
              c:identifier="PANGO_WEIGHT_SEMILIGHT"
              glib:nick="semilight">
        <doc xml:space="preserve"
             filename="../pango/pango-font.h"
             line="85">the semilight weight (= 350; Since: 1.36.7)</doc>
      </member>
      <member name="book"
              value="380"
              c:identifier="PANGO_WEIGHT_BOOK"
              glib:nick="book">
        <doc xml:space="preserve"
             filename="../pango/pango-font.h"
             line="86">the book weight (= 380; Since: 1.24)</doc>
      </member>
      <member name="normal"
              value="400"
              c:identifier="PANGO_WEIGHT_NORMAL"
              glib:nick="normal">
        <doc xml:space="preserve"
             filename="../pango/pango-font.h"
             line="87">the default weight (= 400)</doc>
      </member>
      <member name="medium"
              value="500"
              c:identifier="PANGO_WEIGHT_MEDIUM"
              glib:nick="medium">
        <doc xml:space="preserve"
             filename="../pango/pango-font.h"
             line="88">the normal weight (= 500; Since: 1.24)</doc>
      </member>
      <member name="semibold"
              value="600"
              c:identifier="PANGO_WEIGHT_SEMIBOLD"
              glib:nick="semibold">
        <doc xml:space="preserve"
             filename="../pango/pango-font.h"
             line="89">the semibold weight (= 600)</doc>
      </member>
      <member name="bold"
              value="700"
              c:identifier="PANGO_WEIGHT_BOLD"
              glib:nick="bold">
        <doc xml:space="preserve"
             filename="../pango/pango-font.h"
             line="90">the bold weight (= 700)</doc>
      </member>
      <member name="ultrabold"
              value="800"
              c:identifier="PANGO_WEIGHT_ULTRABOLD"
              glib:nick="ultrabold">
        <doc xml:space="preserve"
             filename="../pango/pango-font.h"
             line="91">the ultrabold weight (= 800)</doc>
      </member>
      <member name="heavy"
              value="900"
              c:identifier="PANGO_WEIGHT_HEAVY"
              glib:nick="heavy">
        <doc xml:space="preserve"
             filename="../pango/pango-font.h"
             line="92">the heavy weight (= 900)</doc>
      </member>
      <member name="ultraheavy"
              value="1000"
              c:identifier="PANGO_WEIGHT_ULTRAHEAVY"
              glib:nick="ultraheavy">
        <doc xml:space="preserve"
             filename="../pango/pango-font.h"
             line="93">the ultraheavy weight (= 1000; Since: 1.24)</doc>
      </member>
    </enumeration>
    <enumeration name="WrapMode"
                 glib:type-name="PangoWrapMode"
                 glib:get-type="pango_wrap_mode_get_type"
                 c:type="PangoWrapMode">
      <doc xml:space="preserve"
           filename="../pango/pango-layout.h"
           line="62">A #PangoWrapMode describes how to wrap the lines of a #PangoLayout to the desired width.</doc>
      <member name="word"
              value="0"
              c:identifier="PANGO_WRAP_WORD"
              glib:nick="word">
        <doc xml:space="preserve"
             filename="../pango/pango-layout.h"
             line="64">wrap lines at word boundaries.</doc>
      </member>
      <member name="char"
              value="1"
              c:identifier="PANGO_WRAP_CHAR"
              glib:nick="char">
        <doc xml:space="preserve"
             filename="../pango/pango-layout.h"
             line="65">wrap lines at character boundaries.</doc>
      </member>
      <member name="word_char"
              value="2"
              c:identifier="PANGO_WRAP_WORD_CHAR"
              glib:nick="word-char">
        <doc xml:space="preserve"
             filename="../pango/pango-layout.h"
             line="66">wrap lines at word boundaries, but fall back to character boundaries if there is not
enough space for a full word.</doc>
      </member>
    </enumeration>
    <function name="attr_allow_breaks_new"
              c:identifier="pango_attr_allow_breaks_new"
              version="1.44">
      <doc xml:space="preserve"
           filename="../pango/pango-attributes.c"
           line="1168">Create a new allow-breaks attribute.

If breaks are disabled, the range will be kept in a
single run, as far as possible.</doc>
      <source-position filename="../pango/pango-attributes.h" line="571"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="../pango/pango-attributes.c"
             line="1177">the newly allocated #PangoAttribute,
              which should be freed with pango_attribute_destroy()</doc>
        <type name="Attribute" c:type="PangoAttribute*"/>
      </return-value>
      <parameters>
        <parameter name="allow_breaks" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../pango/pango-attributes.c"
               line="1170">%TRUE if we line breaks are allowed</doc>
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
      </parameters>
    </function>
    <function name="attr_background_alpha_new"
              c:identifier="pango_attr_background_alpha_new"
              version="1.38">
      <doc xml:space="preserve"
           filename="../pango/pango-attributes.c"
           line="1144">Create a new background alpha attribute.</doc>
      <source-position filename="../pango/pango-attributes.h" line="569"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="../pango/pango-attributes.c"
             line="1150">the new allocated #PangoAttribute,
              which should be freed with pango_attribute_destroy().</doc>
        <type name="Attribute" c:type="PangoAttribute*"/>
      </return-value>
      <parameters>
        <parameter name="alpha" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../pango/pango-attributes.c"
               line="1146">the alpha value, between 1 and 65536</doc>
          <type name="guint16" c:type="guint16"/>
        </parameter>
      </parameters>
    </function>
    <function name="attr_background_new"
              c:identifier="pango_attr_background_new">
      <doc xml:space="preserve"
           filename="../pango/pango-attributes.c"
           line="387">Create a new background color attribute.</doc>
      <source-position filename="../pango/pango-attributes.h" line="510"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="../pango/pango-attributes.c"
             line="395">the newly allocated #PangoAttribute,
              which should be freed with pango_attribute_destroy().</doc>
        <type name="Attribute" c:type="PangoAttribute*"/>
      </return-value>
      <parameters>
        <parameter name="red" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../pango/pango-attributes.c"
               line="389">the red value (ranging from 0 to 65535)</doc>
          <type name="guint16" c:type="guint16"/>
        </parameter>
        <parameter name="green" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../pango/pango-attributes.c"
               line="390">the green value</doc>
          <type name="guint16" c:type="guint16"/>
        </parameter>
        <parameter name="blue" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../pango/pango-attributes.c"
               line="391">the blue value</doc>
          <type name="guint16" c:type="guint16"/>
        </parameter>
      </parameters>
    </function>
    <function name="attr_fallback_new"
              c:identifier="pango_attr_fallback_new"
              version="1.4">
      <doc xml:space="preserve"
           filename="../pango/pango-attributes.c"
           line="871">Create a new font fallback attribute.

If fallback is disabled, characters will only be used from the
closest matching font on the system. No fallback will be done to
other fonts on the system that might contain the characters in the
text.</doc>
      <source-position filename="../pango/pango-attributes.h" line="546"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="../pango/pango-attributes.c"
             line="883">the newly allocated #PangoAttribute,
              which should be freed with pango_attribute_destroy().</doc>
        <type name="Attribute" c:type="PangoAttribute*"/>
      </return-value>
      <parameters>
        <parameter name="enable_fallback" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../pango/pango-attributes.c"
               line="873">%TRUE if we should fall back on other fonts
                  for characters the active font is missing.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
      </parameters>
    </function>
    <function name="attr_family_new" c:identifier="pango_attr_family_new">
      <doc xml:space="preserve"
           filename="../pango/pango-attributes.c"
           line="242">Create a new font family attribute.</doc>
      <source-position filename="../pango/pango-attributes.h" line="504"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="../pango/pango-attributes.c"
             line="248">the newly allocated #PangoAttribute,
              which should be freed with pango_attribute_destroy().</doc>
        <type name="Attribute" c:type="PangoAttribute*"/>
      </return-value>
      <parameters>
        <parameter name="family" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../pango/pango-attributes.c"
               line="244">the family or comma separated list of families</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
      </parameters>
    </function>
    <function name="attr_font_desc_new"
              c:identifier="pango_attr_font_desc_new"
              moved-to="AttrFontDesc.new">
      <doc xml:space="preserve"
           filename="../pango/pango-attributes.c"
           line="692">Create a new font description attribute. This attribute
allows setting family, style, weight, variant, stretch,
and size simultaneously.</doc>
      <source-position filename="../pango/pango-attributes.h" line="526"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="../pango/pango-attributes.c"
             line="700">the newly allocated #PangoAttribute,
              which should be freed with pango_attribute_destroy().</doc>
        <type name="Attribute" c:type="PangoAttribute*"/>
      </return-value>
      <parameters>
        <parameter name="desc" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../pango/pango-attributes.c"
               line="694">the font description</doc>
          <type name="FontDescription" c:type="const PangoFontDescription*"/>
        </parameter>
      </parameters>
    </function>
    <function name="attr_font_features_new"
              c:identifier="pango_attr_font_features_new"
              moved-to="AttrFontFeatures.new"
              version="1.38">
      <doc xml:space="preserve"
           filename="../pango/pango-attributes.c"
           line="1094">Create a new font features tag attribute.</doc>
      <source-position filename="../pango/pango-attributes.h" line="565"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="../pango/pango-attributes.c"
             line="1100">the newly allocated #PangoAttribute,
              which should be freed with pango_attribute_destroy().</doc>
        <type name="Attribute" c:type="PangoAttribute*"/>
      </return-value>
      <parameters>
        <parameter name="features" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../pango/pango-attributes.c"
               line="1096">a string with OpenType font features, in CSS syntax</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="attr_foreground_alpha_new"
              c:identifier="pango_attr_foreground_alpha_new"
              version="1.38">
      <doc xml:space="preserve"
           filename="../pango/pango-attributes.c"
           line="1120">Create a new foreground alpha attribute.</doc>
      <source-position filename="../pango/pango-attributes.h" line="567"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="../pango/pango-attributes.c"
             line="1126">the new allocated #PangoAttribute,
              which should be freed with pango_attribute_destroy().</doc>
        <type name="Attribute" c:type="PangoAttribute*"/>
      </return-value>
      <parameters>
        <parameter name="alpha" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../pango/pango-attributes.c"
               line="1122">the alpha value, between 1 and 65536</doc>
          <type name="guint16" c:type="guint16"/>
        </parameter>
      </parameters>
    </function>
    <function name="attr_foreground_new"
              c:identifier="pango_attr_foreground_new">
      <doc xml:space="preserve"
           filename="../pango/pango-attributes.c"
           line="361">Create a new foreground color attribute.</doc>
      <source-position filename="../pango/pango-attributes.h" line="506"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="../pango/pango-attributes.c"
             line="369">the newly allocated #PangoAttribute,
              which should be freed with pango_attribute_destroy().</doc>
        <type name="Attribute" c:type="PangoAttribute*"/>
      </return-value>
      <parameters>
        <parameter name="red" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../pango/pango-attributes.c"
               line="363">the red value (ranging from 0 to 65535)</doc>
          <type name="guint16" c:type="guint16"/>
        </parameter>
        <parameter name="green" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../pango/pango-attributes.c"
               line="364">the green value</doc>
          <type name="guint16" c:type="guint16"/>
        </parameter>
        <parameter name="blue" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../pango/pango-attributes.c"
               line="365">the blue value</doc>
          <type name="guint16" c:type="guint16"/>
        </parameter>
      </parameters>
    </function>
    <function name="attr_gravity_hint_new"
              c:identifier="pango_attr_gravity_hint_new"
              version="1.16">
      <doc xml:space="preserve"
           filename="../pango/pango-attributes.c"
           line="1070">Create a new gravity hint attribute.</doc>
      <source-position filename="../pango/pango-attributes.h" line="563"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="../pango/pango-attributes.c"
             line="1076">the newly allocated #PangoAttribute,
              which should be freed with pango_attribute_destroy().</doc>
        <type name="Attribute" c:type="PangoAttribute*"/>
      </return-value>
      <parameters>
        <parameter name="hint" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../pango/pango-attributes.c"
               line="1072">the gravity hint value.</doc>
          <type name="GravityHint" c:type="PangoGravityHint"/>
        </parameter>
      </parameters>
    </function>
    <function name="attr_gravity_new"
              c:identifier="pango_attr_gravity_new"
              version="1.16">
      <doc xml:space="preserve"
           filename="../pango/pango-attributes.c"
           line="1044">Create a new gravity attribute.</doc>
      <source-position filename="../pango/pango-attributes.h" line="561"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="../pango/pango-attributes.c"
             line="1050">the newly allocated #PangoAttribute,
              which should be freed with pango_attribute_destroy().</doc>
        <type name="Attribute" c:type="PangoAttribute*"/>
      </return-value>
      <parameters>
        <parameter name="gravity" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../pango/pango-attributes.c"
               line="1046">the gravity value; should not be %PANGO_GRAVITY_AUTO.</doc>
          <type name="Gravity" c:type="PangoGravity"/>
        </parameter>
      </parameters>
    </function>
    <function name="attr_insert_hyphens_new"
              c:identifier="pango_attr_insert_hyphens_new"
              version="1.44">
      <doc xml:space="preserve"
           filename="../pango/pango-attributes.c"
           line="1195">Create a new insert-hyphens attribute.

Pango will insert hyphens when breaking lines in the middle
of a word. This attribute can be used to suppress the hyphen.</doc>
      <source-position filename="../pango/pango-attributes.h" line="573"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="../pango/pango-attributes.c"
             line="1204">the newly allocated #PangoAttribute,
              which should be freed with pango_attribute_destroy()</doc>
        <type name="Attribute" c:type="PangoAttribute*"/>
      </return-value>
      <parameters>
        <parameter name="insert_hyphens" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../pango/pango-attributes.c"
               line="1197">%TRUE if hyphens should be inserted</doc>
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
      </parameters>
    </function>
    <function name="attr_language_new"
              c:identifier="pango_attr_language_new"
              moved-to="AttrLanguage.new">
      <doc xml:space="preserve"
           filename="../pango/pango-attributes.c"
           line="287">Create a new language tag attribute.</doc>
      <source-position filename="../pango/pango-attributes.h" line="502"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="../pango/pango-attributes.c"
             line="293">the newly allocated #PangoAttribute,
              which should be freed with pango_attribute_destroy().</doc>
        <type name="Attribute" c:type="PangoAttribute*"/>
      </return-value>
      <parameters>
        <parameter name="language" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../pango/pango-attributes.c"
               line="289">language tag</doc>
          <type name="Language" c:type="PangoLanguage*"/>
        </parameter>
      </parameters>
    </function>
    <function name="attr_letter_spacing_new"
              c:identifier="pango_attr_letter_spacing_new"
              version="1.6">
      <doc xml:space="preserve"
           filename="../pango/pango-attributes.c"
           line="901">Create a new letter-spacing attribute.</doc>
      <source-position filename="../pango/pango-attributes.h" line="548"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="../pango/pango-attributes.c"
             line="908">the newly allocated #PangoAttribute,
              which should be freed with pango_attribute_destroy().</doc>
        <type name="Attribute" c:type="PangoAttribute*"/>
      </return-value>
      <parameters>
        <parameter name="letter_spacing" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../pango/pango-attributes.c"
               line="903">amount of extra space to add between graphemes
  of the text, in Pango units.</doc>
          <type name="gint" c:type="int"/>
        </parameter>
      </parameters>
    </function>
    <function name="attr_overline_color_new"
              c:identifier="pango_attr_overline_color_new"
              version="1.46">
      <doc xml:space="preserve"
           filename="../pango/pango-attributes.c"
           line="1271">Create a new overline color attribute. This attribute
modifies the color of overlines. If not set, overlines
will use the foreground color.</doc>
      <source-position filename="../pango/pango-attributes.h" line="578"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="../pango/pango-attributes.c"
             line="1281">the newly allocated #PangoAttribute,
              which should be freed with pango_attribute_destroy().</doc>
        <type name="Attribute" c:type="PangoAttribute*"/>
      </return-value>
      <parameters>
        <parameter name="red" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../pango/pango-attributes.c"
               line="1273">the red value (ranging from 0 to 65535)</doc>
          <type name="guint16" c:type="guint16"/>
        </parameter>
        <parameter name="green" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../pango/pango-attributes.c"
               line="1274">the green value</doc>
          <type name="guint16" c:type="guint16"/>
        </parameter>
        <parameter name="blue" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../pango/pango-attributes.c"
               line="1275">the blue value</doc>
          <type name="guint16" c:type="guint16"/>
        </parameter>
      </parameters>
    </function>
    <function name="attr_overline_new"
              c:identifier="pango_attr_overline_new"
              version="1.46">
      <doc xml:space="preserve"
           filename="../pango/pango-attributes.c"
           line="1247">Create a new overline-style attribute.</doc>
      <source-position filename="../pango/pango-attributes.h" line="576"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="../pango/pango-attributes.c"
             line="1253">the newly allocated #PangoAttribute,
              which should be freed with pango_attribute_destroy().</doc>
        <type name="Attribute" c:type="PangoAttribute*"/>
      </return-value>
      <parameters>
        <parameter name="overline" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../pango/pango-attributes.c"
               line="1249">the overline style</doc>
          <type name="Overline" c:type="PangoOverline"/>
        </parameter>
      </parameters>
    </function>
    <function name="attr_rise_new" c:identifier="pango_attr_rise_new">
      <doc xml:space="preserve"
           filename="../pango/pango-attributes.c"
           line="825">Create a new baseline displacement attribute.</doc>
      <source-position filename="../pango/pango-attributes.h" line="542"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="../pango/pango-attributes.c"
             line="832">the newly allocated #PangoAttribute,
              which should be freed with pango_attribute_destroy().</doc>
        <type name="Attribute" c:type="PangoAttribute*"/>
      </return-value>
      <parameters>
        <parameter name="rise" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../pango/pango-attributes.c"
               line="827">the amount that the text should be displaced vertically,
       in Pango units. Positive values displace the text upwards.</doc>
          <type name="gint" c:type="int"/>
        </parameter>
      </parameters>
    </function>
    <function name="attr_scale_new" c:identifier="pango_attr_scale_new">
      <doc xml:space="preserve"
           filename="../pango/pango-attributes.c"
           line="848">Create a new font size scale attribute. The base font for the
affected text will have its size multiplied by @scale_factor.</doc>
      <source-position filename="../pango/pango-attributes.h" line="544"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="../pango/pango-attributes.c"
             line="855">the newly allocated #PangoAttribute,
              which should be freed with pango_attribute_destroy().</doc>
        <type name="Attribute" c:type="PangoAttribute*"/>
      </return-value>
      <parameters>
        <parameter name="scale_factor" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../pango/pango-attributes.c"
               line="850">factor to scale the font</doc>
          <type name="gdouble" c:type="double"/>
        </parameter>
      </parameters>
    </function>
    <function name="attr_shape_new"
              c:identifier="pango_attr_shape_new"
              moved-to="AttrShape.new">
      <doc xml:space="preserve"
           filename="../pango/pango-attributes.c"
           line="1020">Create a new shape attribute. A shape is used to impose a
particular ink and logical rectangle on the result of shaping a
particular glyph. This might be used, for instance, for
embedding a picture or a widget inside a #PangoLayout.</doc>
      <source-position filename="../pango/pango-attributes.h" line="551"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="../pango/pango-attributes.c"
             line="1030">the newly allocated #PangoAttribute,
              which should be freed with pango_attribute_destroy().</doc>
        <type name="Attribute" c:type="PangoAttribute*"/>
      </return-value>
      <parameters>
        <parameter name="ink_rect" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../pango/pango-attributes.c"
               line="1022">ink rectangle to assign to each character</doc>
          <type name="Rectangle" c:type="const PangoRectangle*"/>
        </parameter>
        <parameter name="logical_rect" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../pango/pango-attributes.c"
               line="1023">logical rectangle to assign to each character</doc>
          <type name="Rectangle" c:type="const PangoRectangle*"/>
        </parameter>
      </parameters>
    </function>
    <function name="attr_shape_new_with_data"
              c:identifier="pango_attr_shape_new_with_data"
              moved-to="AttrShape.new_with_data"
              version="1.8">
      <doc xml:space="preserve"
           filename="../pango/pango-attributes.c"
           line="970">Like pango_attr_shape_new(), but a user data pointer is also
provided; this pointer can be accessed when later
rendering the glyph.</doc>
      <source-position filename="../pango/pango-attributes.h" line="554"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="../pango/pango-attributes.c"
             line="985">the newly allocated #PangoAttribute, which should be
              freed with pango_attribute_destroy().</doc>
        <type name="Attribute" c:type="PangoAttribute*"/>
      </return-value>
      <parameters>
        <parameter name="ink_rect" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../pango/pango-attributes.c"
               line="972">ink rectangle to assign to each character</doc>
          <type name="Rectangle" c:type="const PangoRectangle*"/>
        </parameter>
        <parameter name="logical_rect" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../pango/pango-attributes.c"
               line="973">logical rectangle to assign to each character</doc>
          <type name="Rectangle" c:type="const PangoRectangle*"/>
        </parameter>
        <parameter name="data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="../pango/pango-attributes.c"
               line="974">user data pointer</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
        <parameter name="copy_func"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   scope="notified"
                   destroy="4">
          <doc xml:space="preserve"
               filename="../pango/pango-attributes.c"
               line="975">function to copy @data when the
               attribute is copied. If %NULL, @data is simply
               copied as a pointer.</doc>
          <type name="AttrDataCopyFunc" c:type="PangoAttrDataCopyFunc"/>
        </parameter>
        <parameter name="destroy_func"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   scope="async">
          <doc xml:space="preserve"
               filename="../pango/pango-attributes.c"
               line="978">function to free @data when the
               attribute is freed, or %NULL</doc>
          <type name="GLib.DestroyNotify" c:type="GDestroyNotify"/>
        </parameter>
      </parameters>
    </function>
    <function name="attr_show_new"
              c:identifier="pango_attr_show_new"
              version="1.44">
      <doc xml:space="preserve"
           filename="../pango/pango-attributes.c"
           line="1222">Create a new attribute that influences how invisible
characters are rendered.</doc>
      <source-position filename="../pango/pango-attributes.h" line="601"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="../pango/pango-attributes.c"
             line="1229">the newly allocated #PangoAttribute,
              which should be freed with pango_attribute_destroy().</doc>
        <type name="Attribute" c:type="PangoAttribute*"/>
      </return-value>
      <parameters>
        <parameter name="flags" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../pango/pango-attributes.c"
               line="1224">#PangoShowFlags to apply</doc>
          <type name="ShowFlags" c:type="PangoShowFlags"/>
        </parameter>
      </parameters>
    </function>
    <function name="attr_size_new"
              c:identifier="pango_attr_size_new"
              moved-to="AttrSize.new">
      <doc xml:space="preserve"
           filename="../pango/pango-attributes.c"
           line="543">Create a new font-size attribute in fractional points.</doc>
      <source-position filename="../pango/pango-attributes.h" line="514"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="../pango/pango-attributes.c"
             line="549">the newly allocated #PangoAttribute,
              which should be freed with pango_attribute_destroy().</doc>
        <type name="Attribute" c:type="PangoAttribute*"/>
      </return-value>
      <parameters>
        <parameter name="size" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../pango/pango-attributes.c"
               line="545">the font size, in %PANGO_SCALEths of a point.</doc>
          <type name="gint" c:type="int"/>
        </parameter>
      </parameters>
    </function>
    <function name="attr_size_new_absolute"
              c:identifier="pango_attr_size_new_absolute"
              moved-to="AttrSize.new_absolute"
              version="1.8">
      <doc xml:space="preserve"
           filename="../pango/pango-attributes.c"
           line="558">Create a new font-size attribute in device units.</doc>
      <source-position filename="../pango/pango-attributes.h" line="516"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="../pango/pango-attributes.c"
             line="564">the newly allocated #PangoAttribute, which should be
              freed with pango_attribute_destroy().</doc>
        <type name="Attribute" c:type="PangoAttribute*"/>
      </return-value>
      <parameters>
        <parameter name="size" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../pango/pango-attributes.c"
               line="560">the font size, in %PANGO_SCALEths of a device unit.</doc>
          <type name="gint" c:type="int"/>
        </parameter>
      </parameters>
    </function>
    <function name="attr_stretch_new" c:identifier="pango_attr_stretch_new">
      <doc xml:space="preserve"
           filename="../pango/pango-attributes.c"
           line="641">Create a new font stretch attribute</doc>
      <source-position filename="../pango/pango-attributes.h" line="524"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="../pango/pango-attributes.c"
             line="647">the newly allocated #PangoAttribute,
              which should be freed with pango_attribute_destroy().</doc>
        <type name="Attribute" c:type="PangoAttribute*"/>
      </return-value>
      <parameters>
        <parameter name="stretch" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../pango/pango-attributes.c"
               line="643">the stretch</doc>
          <type name="Stretch" c:type="PangoStretch"/>
        </parameter>
      </parameters>
    </function>
    <function name="attr_strikethrough_color_new"
              c:identifier="pango_attr_strikethrough_color_new"
              version="1.8">
      <doc xml:space="preserve"
           filename="../pango/pango-attributes.c"
           line="795">Create a new strikethrough color attribute. This attribute
modifies the color of strikethrough lines. If not set, strikethrough
lines will use the foreground color.</doc>
      <source-position filename="../pango/pango-attributes.h" line="537"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="../pango/pango-attributes.c"
             line="805">the newly allocated #PangoAttribute,
              which should be freed with pango_attribute_destroy().</doc>
        <type name="Attribute" c:type="PangoAttribute*"/>
      </return-value>
      <parameters>
        <parameter name="red" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../pango/pango-attributes.c"
               line="797">the red value (ranging from 0 to 65535)</doc>
          <type name="guint16" c:type="guint16"/>
        </parameter>
        <parameter name="green" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../pango/pango-attributes.c"
               line="798">the green value</doc>
          <type name="guint16" c:type="guint16"/>
        </parameter>
        <parameter name="blue" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../pango/pango-attributes.c"
               line="799">the blue value</doc>
          <type name="guint16" c:type="guint16"/>
        </parameter>
      </parameters>
    </function>
    <function name="attr_strikethrough_new"
              c:identifier="pango_attr_strikethrough_new">
      <doc xml:space="preserve"
           filename="../pango/pango-attributes.c"
           line="773">Create a new strike-through attribute.</doc>
      <source-position filename="../pango/pango-attributes.h" line="535"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="../pango/pango-attributes.c"
             line="779">the newly allocated #PangoAttribute,
              which should be freed with pango_attribute_destroy().</doc>
        <type name="Attribute" c:type="PangoAttribute*"/>
      </return-value>
      <parameters>
        <parameter name="strikethrough" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../pango/pango-attributes.c"
               line="775">%TRUE if the text should be struck-through.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
      </parameters>
    </function>
    <function name="attr_style_new" c:identifier="pango_attr_style_new">
      <doc xml:space="preserve"
           filename="../pango/pango-attributes.c"
           line="575">Create a new font slant style attribute.</doc>
      <source-position filename="../pango/pango-attributes.h" line="518"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="../pango/pango-attributes.c"
             line="581">the newly allocated #PangoAttribute,
              which should be freed with pango_attribute_destroy().</doc>
        <type name="Attribute" c:type="PangoAttribute*"/>
      </return-value>
      <parameters>
        <parameter name="style" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../pango/pango-attributes.c"
               line="577">the slant style</doc>
          <type name="Style" c:type="PangoStyle"/>
        </parameter>
      </parameters>
    </function>
    <function name="attr_type_get_name"
              c:identifier="pango_attr_type_get_name"
              moved-to="AttrType.get_name"
              version="1.22">
      <doc xml:space="preserve"
           filename="../pango/pango-attributes.c"
           line="89">Fetches the attribute type name passed in when registering the type using
pango_attr_type_register().

The returned value is an interned string (see g_intern_string() for what
that means) that should not be modified or freed.</doc>
      <source-position filename="../pango/pango-attributes.h" line="488"/>
      <return-value transfer-ownership="none" nullable="1">
        <doc xml:space="preserve"
             filename="../pango/pango-attributes.c"
             line="99">the type ID name (which may be %NULL), or
%NULL if @type is a built-in Pango attribute type or invalid.</doc>
        <type name="utf8" c:type="const char*"/>
      </return-value>
      <parameters>
        <parameter name="type" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../pango/pango-attributes.c"
               line="91">an attribute type ID to fetch the name for</doc>
          <type name="AttrType" c:type="PangoAttrType"/>
        </parameter>
      </parameters>
    </function>
    <function name="attr_type_register"
              c:identifier="pango_attr_type_register"
              moved-to="AttrType.register">
      <doc xml:space="preserve"
           filename="../pango/pango-attributes.c"
           line="57">Allocate a new attribute type ID.  The attribute type name can be accessed
later by using pango_attr_type_get_name().</doc>
      <source-position filename="../pango/pango-attributes.h" line="486"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../pango/pango-attributes.c"
             line="64">the new type ID.</doc>
        <type name="AttrType" c:type="PangoAttrType"/>
      </return-value>
      <parameters>
        <parameter name="name" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../pango/pango-attributes.c"
               line="59">an identifier for the type</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="attr_underline_color_new"
              c:identifier="pango_attr_underline_color_new"
              version="1.8">
      <doc xml:space="preserve"
           filename="../pango/pango-attributes.c"
           line="743">Create a new underline color attribute. This attribute
modifies the color of underlines. If not set, underlines
will use the foreground color.</doc>
      <source-position filename="../pango/pango-attributes.h" line="531"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="../pango/pango-attributes.c"
             line="753">the newly allocated #PangoAttribute,
              which should be freed with pango_attribute_destroy().</doc>
        <type name="Attribute" c:type="PangoAttribute*"/>
      </return-value>
      <parameters>
        <parameter name="red" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../pango/pango-attributes.c"
               line="745">the red value (ranging from 0 to 65535)</doc>
          <type name="guint16" c:type="guint16"/>
        </parameter>
        <parameter name="green" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../pango/pango-attributes.c"
               line="746">the green value</doc>
          <type name="guint16" c:type="guint16"/>
        </parameter>
        <parameter name="blue" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../pango/pango-attributes.c"
               line="747">the blue value</doc>
          <type name="guint16" c:type="guint16"/>
        </parameter>
      </parameters>
    </function>
    <function name="attr_underline_new"
              c:identifier="pango_attr_underline_new">
      <doc xml:space="preserve"
           filename="../pango/pango-attributes.c"
           line="721">Create a new underline-style attribute.</doc>
      <source-position filename="../pango/pango-attributes.h" line="529"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="../pango/pango-attributes.c"
             line="727">the newly allocated #PangoAttribute,
              which should be freed with pango_attribute_destroy().</doc>
        <type name="Attribute" c:type="PangoAttribute*"/>
      </return-value>
      <parameters>
        <parameter name="underline" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../pango/pango-attributes.c"
               line="723">the underline style.</doc>
          <type name="Underline" c:type="PangoUnderline"/>
        </parameter>
      </parameters>
    </function>
    <function name="attr_variant_new" c:identifier="pango_attr_variant_new">
      <doc xml:space="preserve"
           filename="../pango/pango-attributes.c"
           line="619">Create a new font variant attribute (normal or small caps)</doc>
      <source-position filename="../pango/pango-attributes.h" line="522"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="../pango/pango-attributes.c"
             line="625">the newly allocated #PangoAttribute,
              which should be freed with pango_attribute_destroy().</doc>
        <type name="Attribute" c:type="PangoAttribute*"/>
      </return-value>
      <parameters>
        <parameter name="variant" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../pango/pango-attributes.c"
               line="621">the variant</doc>
          <type name="Variant" c:type="PangoVariant"/>
        </parameter>
      </parameters>
    </function>
    <function name="attr_weight_new" c:identifier="pango_attr_weight_new">
      <doc xml:space="preserve"
           filename="../pango/pango-attributes.c"
           line="597">Create a new font weight attribute.</doc>
      <source-position filename="../pango/pango-attributes.h" line="520"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="../pango/pango-attributes.c"
             line="603">the newly allocated #PangoAttribute,
              which should be freed with pango_attribute_destroy().</doc>
        <type name="Attribute" c:type="PangoAttribute*"/>
      </return-value>
      <parameters>
        <parameter name="weight" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../pango/pango-attributes.c"
               line="599">the weight</doc>
          <type name="Weight" c:type="PangoWeight"/>
        </parameter>
      </parameters>
    </function>
    <docsection name="bidi">
      <doc xml:space="preserve"
           filename="../pango/pango-bidi-type.c"
           line="22">Pango supports bidirectional text (like Arabic and Hebrew) automatically.
Some applications however, need some help to correctly handle bidirectional text.

The #PangoDirection type can be used with pango_context_set_base_dir() to
instruct Pango about direction of text, though in most cases Pango detects
that correctly and automatically.  The rest of the facilities in this section
are used internally by Pango already, and are provided to help applications
that need more direct control over bidirectional setting of text.</doc>
    </docsection>
    <function name="bidi_type_for_unichar"
              c:identifier="pango_bidi_type_for_unichar"
              moved-to="BidiType.for_unichar"
              version="1.22">
      <doc xml:space="preserve"
           filename="../pango/pango-bidi-type.c"
           line="55">Determines the normative bidirectional character type of a
character, as specified in the Unicode Character Database.

A simplified version of this function is available as
pango_unichar_direction().</doc>
      <source-position filename="../pango/pango-bidi-type.h" line="90"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../pango/pango-bidi-type.c"
             line="65">the bidirectional character type, as used in the
Unicode bidirectional algorithm.</doc>
        <type name="BidiType" c:type="PangoBidiType"/>
      </return-value>
      <parameters>
        <parameter name="ch" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../pango/pango-bidi-type.c"
               line="57">a Unicode character</doc>
          <type name="gunichar" c:type="gunichar"/>
        </parameter>
      </parameters>
    </function>
    <function name="break"
              c:identifier="pango_break"
              deprecated="1"
              deprecated-version="1.44">
      <doc xml:space="preserve"
           filename="../pango/break.c"
           line="1606">Determines possible line, word, and character breaks
for a string of Unicode text with a single analysis.
For most purposes you may want to use pango_get_log_attrs().</doc>
      <doc-deprecated xml:space="preserve">Use pango_default_break() and pango_tailor_break()</doc-deprecated>
      <source-position filename="../pango/pango-break.h" line="104"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="text" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../pango/break.c"
               line="1608">the text to process. Must be valid UTF-8</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="length" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../pango/break.c"
               line="1609">length of @text in bytes (may be -1 if @text is nul-terminated)</doc>
          <type name="gint" c:type="int"/>
        </parameter>
        <parameter name="analysis" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../pango/break.c"
               line="1610">#PangoAnalysis structure from pango_itemize()</doc>
          <type name="Analysis" c:type="PangoAnalysis*"/>
        </parameter>
        <parameter name="attrs" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../pango/break.c"
               line="1611">an array to store character
            information in</doc>
          <array length="4" zero-terminated="0" c:type="PangoLogAttr*">
            <type name="LogAttr" c:type="PangoLogAttr"/>
          </array>
        </parameter>
        <parameter name="attrs_len" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../pango/break.c"
               line="1613">size of the array passed as @attrs</doc>
          <type name="gint" c:type="int"/>
        </parameter>
      </parameters>
    </function>
    <docsection name="context">
      <doc xml:space="preserve"
           filename="../pango/pango-context.c"
           line="47">The #PangoContext structure stores global information
influencing Pango's operation, such as the fontmap used
to look up fonts, and default values such as the default
language, default gravity, or default font.</doc>
    </docsection>
    <docsection name="coverage-maps">
      <doc xml:space="preserve"
           filename="../pango/pango-coverage.c"
           line="22">It is often necessary in Pango to determine if a particular font can
represent a particular character, and also how well it can represent
that character. The #PangoCoverage is a data structure that is used
to represent that information.</doc>
    </docsection>
    <function name="default_break" c:identifier="pango_default_break">
      <doc xml:space="preserve"
           filename="../pango/break.c"
           line="142">This is the default break algorithm. It applies Unicode
rules without language-specific tailoring, therefore
the @analyis argument is unused and can be %NULL.

See pango_tailor_break() for language-specific breaks.</doc>
      <source-position filename="../pango/pango-break.h" line="130"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="text" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../pango/break.c"
               line="144">text to break. Must be valid UTF-8</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="length" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../pango/break.c"
               line="145">length of text in bytes (may be -1 if @text is nul-terminated)</doc>
          <type name="gint" c:type="int"/>
        </parameter>
        <parameter name="analysis"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="../pango/break.c"
               line="146">a #PangoAnalysis for the @text</doc>
          <type name="Analysis" c:type="PangoAnalysis*"/>
        </parameter>
        <parameter name="attrs" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../pango/break.c"
               line="147">logical attributes to fill in</doc>
          <type name="LogAttr" c:type="PangoLogAttr*"/>
        </parameter>
        <parameter name="attrs_len" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../pango/break.c"
               line="148">size of the array passed as @attrs</doc>
          <type name="gint" c:type="int"/>
        </parameter>
      </parameters>
    </function>
    <docsection name="engines">
      <doc xml:space="preserve"
           filename="../pango/pango-engine.c"
           line="22">Pango used to have a module architecture in which the language-specific
and render-system-specific components are provided by loadable
modules.

This is no longer the case, and all the APIs related
to modules and engines should not be used anymore.</doc>
    </docsection>
    <function name="extents_to_pixels"
              c:identifier="pango_extents_to_pixels"
              version="1.16">
      <doc xml:space="preserve"
           filename="../pango/pango-utils.c"
           line="1027">Converts extents from Pango units to device units, dividing by the
%PANGO_SCALE factor and performing rounding.

The @inclusive rectangle is converted by flooring the x/y coordinates and extending
width/height, such that the final rectangle completely includes the original
rectangle.

The @nearest rectangle is converted by rounding the coordinates
of the rectangle to the nearest device unit (pixel).

The rule to which argument to use is: if you want the resulting device-space
rectangle to completely contain the original rectangle, pass it in as @inclusive.
If you want two touching-but-not-overlapping rectangles stay
touching-but-not-overlapping after rounding to device units, pass them in
as @nearest.</doc>
      <source-position filename="../pango/pango-types.h" line="192"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="inclusive"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="../pango/pango-utils.c"
               line="1029">rectangle to round to pixels inclusively, or %NULL.</doc>
          <type name="Rectangle" c:type="PangoRectangle*"/>
        </parameter>
        <parameter name="nearest"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="../pango/pango-utils.c"
               line="1030">rectangle to round to nearest pixels, or %NULL.</doc>
          <type name="Rectangle" c:type="PangoRectangle*"/>
        </parameter>
      </parameters>
    </function>
    <function name="find_base_dir"
              c:identifier="pango_find_base_dir"
              version="1.4">
      <doc xml:space="preserve"
           filename="../pango/pango-utils.c"
           line="862">Searches a string the first character that has a strong
direction, according to the Unicode bidirectional algorithm.</doc>
      <source-position filename="../pango/pango-bidi-type.h" line="95"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../pango/pango-utils.c"
             line="870">The direction corresponding to the first strong character.
If no such character is found, then %PANGO_DIRECTION_NEUTRAL is returned.</doc>
        <type name="Direction" c:type="PangoDirection"/>
      </return-value>
      <parameters>
        <parameter name="text" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../pango/pango-utils.c"
               line="864">the text to process. Must be valid UTF-8</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="length" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../pango/pango-utils.c"
               line="865">length of @text in bytes (may be -1 if @text is nul-terminated)</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
      </parameters>
    </function>
    <function name="find_map"
              c:identifier="pango_find_map"
              introspectable="0"
              deprecated="1"
              deprecated-version="1.38">
      <doc xml:space="preserve"
           filename="../pango/modules.c"
           line="39">Do not use.  Does not do anything.</doc>
      <source-position filename="../pango/pango-modules.h" line="59"/>
      <return-value transfer-ownership="none" nullable="1">
        <doc xml:space="preserve"
             filename="../pango/modules.c"
             line="47">%NULL.</doc>
        <type name="Map" c:type="PangoMap*"/>
      </return-value>
      <parameters>
        <parameter name="language" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../pango/modules.c"
               line="41">the language tag for which to find the map</doc>
          <type name="Language" c:type="PangoLanguage*"/>
        </parameter>
        <parameter name="engine_type_id" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../pango/modules.c"
               line="42">the engine type for the map to find</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
        <parameter name="render_type_id" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../pango/modules.c"
               line="43">the render type for the map to find</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
      </parameters>
    </function>
    <function name="find_paragraph_boundary"
              c:identifier="pango_find_paragraph_boundary">
      <doc xml:space="preserve"
           filename="../pango/break.c"
           line="1635">Locates a paragraph boundary in @text. A boundary is caused by
delimiter characters, such as a newline, carriage return, carriage
return-newline pair, or Unicode paragraph separator character.  The
index of the run of delimiters is returned in
@paragraph_delimiter_index. The index of the start of the paragraph
(index after all delimiters) is stored in @next_paragraph_start.

If no delimiters are found, both @paragraph_delimiter_index and
@next_paragraph_start are filled with the length of @text (an index one
off the end).</doc>
      <source-position filename="../pango/pango-break.h" line="111"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="text" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../pango/break.c"
               line="1637">UTF-8 text</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="length" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../pango/break.c"
               line="1638">length of @text in bytes, or -1 if nul-terminated</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="paragraph_delimiter_index"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../pango/break.c"
               line="1639">return location for index of
  delimiter</doc>
          <type name="gint" c:type="gint*"/>
        </parameter>
        <parameter name="next_paragraph_start"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../pango/break.c"
               line="1641">return location for start of next
  paragraph</doc>
          <type name="gint" c:type="gint*"/>
        </parameter>
      </parameters>
    </function>
    <function name="font_description_from_string"
              c:identifier="pango_font_description_from_string"
              moved-to="FontDescription.from_string">
      <doc xml:space="preserve"
           filename="../pango/fonts.c"
           line="1215">Creates a new font description from a string representation in the
form

"\[FAMILY-LIST] \[STYLE-OPTIONS] \[SIZE] \[VARIATIONS]",

where FAMILY-LIST is a comma-separated list of families optionally
terminated by a comma, STYLE_OPTIONS is a whitespace-separated list
of words where each word describes one of style, variant, weight,
stretch, or gravity, and SIZE is a decimal number (size in points)
or optionally followed by the unit modifier "px" for absolute size.
VARIATIONS is a comma-separated list of font variation
specifications of the form "\@axis=value" (the = sign is optional).

The following words are understood as styles:
"Normal", "Roman", "Oblique", "Italic".

The following words are understood as variants:
"Small-Caps".

The following words are understood as weights:
"Thin", "Ultra-Light", "Extra-Light", "Light", "Semi-Light",
"Demi-Light", "Book", "Regular", "Medium", "Semi-Bold", "Demi-Bold",
"Bold", "Ultra-Bold", "Extra-Bold", "Heavy", "Black", "Ultra-Black",
"Extra-Black".

The following words are understood as stretch values:
"Ultra-Condensed", "Extra-Condensed", "Condensed", "Semi-Condensed",
"Semi-Expanded", "Expanded", "Extra-Expanded", "Ultra-Expanded".

The following words are understood as gravity values:
"Not-Rotated", "South", "Upside-Down", "North", "Rotated-Left",
"East", "Rotated-Right", "West".

Any one of the options may be absent. If FAMILY-LIST is absent, then
the family_name field of the resulting font description will be
initialized to %NULL. If STYLE-OPTIONS is missing, then all style
options will be set to the default values. If SIZE is missing, the
size in the resulting font description will be set to 0.

A typical example:

"Cantarell Italic Light 15 \@wght=200"</doc>
      <source-position filename="../pango/pango-font.h" line="313"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="../pango/fonts.c"
             line="1262">a new #PangoFontDescription.</doc>
        <type name="FontDescription" c:type="PangoFontDescription*"/>
      </return-value>
      <parameters>
        <parameter name="str" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../pango/fonts.c"
               line="1217">string representation of a font description.</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
      </parameters>
    </function>
    <docsection name="fonts">
      <doc xml:space="preserve"
           filename="../pango/fonts.c"
           line="22">Pango supports a flexible architecture where a
particular rendering architecture can supply an
implementation of fonts. The #PangoFont structure
represents an abstract rendering-system-independent font.
Pango provides routines to list available fonts, and
to load a font matching a given description.</doc>
    </docsection>
    <function name="get_log_attrs" c:identifier="pango_get_log_attrs">
      <doc xml:space="preserve"
           filename="../pango/break.c"
           line="1802">Computes a #PangoLogAttr for each character in @text. The @log_attrs
array must have one #PangoLogAttr for each position in @text; if
@text contains N characters, it has N+1 positions, including the
last position at the end of the text. @text should be an entire
paragraph; logical attributes can't be computed without context
(for example you need to see spaces on either side of a word to know
the word is a word).</doc>
      <source-position filename="../pango/pango-break.h" line="117"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="text" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../pango/break.c"
               line="1804">text to process. Must be valid UTF-8</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
        <parameter name="length" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../pango/break.c"
               line="1805">length in bytes of @text</doc>
          <type name="gint" c:type="int"/>
        </parameter>
        <parameter name="level" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../pango/break.c"
               line="1806">embedding level, or -1 if unknown</doc>
          <type name="gint" c:type="int"/>
        </parameter>
        <parameter name="language" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../pango/break.c"
               line="1807">language tag</doc>
          <type name="Language" c:type="PangoLanguage*"/>
        </parameter>
        <parameter name="log_attrs" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../pango/break.c"
               line="1808">array with one #PangoLogAttr
  per character in @text, plus one extra, to be filled in</doc>
          <array length="5" zero-terminated="0" c:type="PangoLogAttr*">
            <type name="LogAttr" c:type="PangoLogAttr"/>
          </array>
        </parameter>
        <parameter name="attrs_len" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../pango/break.c"
               line="1810">length of @log_attrs array</doc>
          <type name="gint" c:type="int"/>
        </parameter>
      </parameters>
    </function>
    <function name="get_mirror_char" c:identifier="pango_get_mirror_char">
      <doc xml:space="preserve"
           filename="../pango/pango-bidi-type.c"
           line="314">If @ch has the Unicode mirrored property and there is another Unicode
character that typically has a glyph that is the mirror image of @ch's
glyph, puts that character in the address pointed to by @mirrored_ch.

Use g_unichar_get_mirror_char() instead; the docs for that function
provide full details.</doc>
      <source-position filename="../pango/pango-bidi-type.h" line="99"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../pango/pango-bidi-type.c"
             line="326">%TRUE if @ch has a mirrored character and @mirrored_ch is
filled in, %FALSE otherwise</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="ch" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../pango/pango-bidi-type.c"
               line="316">a Unicode character</doc>
          <type name="gunichar" c:type="gunichar"/>
        </parameter>
        <parameter name="mirrored_ch" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../pango/pango-bidi-type.c"
               line="317">location to store the mirrored character</doc>
          <type name="gunichar" c:type="gunichar*"/>
        </parameter>
      </parameters>
    </function>
    <docsection name="glyphs">
      <doc xml:space="preserve"
           filename="../pango/shape.c"
           line="22">pango_shape() produces a string of glyphs which
can be measured or drawn to the screen. The following
structures are used to store information about
glyphs.</doc>
    </docsection>
    <function name="gravity_get_for_matrix"
              c:identifier="pango_gravity_get_for_matrix"
              moved-to="Gravity.get_for_matrix"
              version="1.16">
      <doc xml:space="preserve"
           filename="../pango/pango-gravity.c"
           line="121">Finds the gravity that best matches the rotation component
in a #PangoMatrix.</doc>
      <source-position filename="../pango/pango-gravity.h" line="117"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../pango/pango-gravity.c"
             line="128">the gravity of @matrix, which will never be
%PANGO_GRAVITY_AUTO, or %PANGO_GRAVITY_SOUTH if @matrix is %NULL</doc>
        <type name="Gravity" c:type="PangoGravity"/>
      </return-value>
      <parameters>
        <parameter name="matrix"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="../pango/pango-gravity.c"
               line="123">a #PangoMatrix</doc>
          <type name="Matrix" c:type="const PangoMatrix*"/>
        </parameter>
      </parameters>
    </function>
    <function name="gravity_get_for_script"
              c:identifier="pango_gravity_get_for_script"
              moved-to="Gravity.get_for_script"
              version="1.16">
      <doc xml:space="preserve"
           filename="../pango/pango-gravity.c"
           line="292">Based on the script, base gravity, and hint, returns actual gravity
to use in laying out a single #PangoItem.

If @base_gravity is %PANGO_GRAVITY_AUTO, it is first replaced with the
preferred gravity of @script.  To get the preferred gravity of a script,
pass %PANGO_GRAVITY_AUTO and %PANGO_GRAVITY_HINT_STRONG in.</doc>
      <source-position filename="../pango/pango-gravity.h" line="119"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../pango/pango-gravity.c"
             line="305">resolved gravity suitable to use for a run of text
with @script.</doc>
        <type name="Gravity" c:type="PangoGravity"/>
      </return-value>
      <parameters>
        <parameter name="script" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../pango/pango-gravity.c"
               line="294">#PangoScript to query</doc>
          <type name="Script" c:type="PangoScript"/>
        </parameter>
        <parameter name="base_gravity" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../pango/pango-gravity.c"
               line="295">base gravity of the paragraph</doc>
          <type name="Gravity" c:type="PangoGravity"/>
        </parameter>
        <parameter name="hint" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../pango/pango-gravity.c"
               line="296">orientation hint</doc>
          <type name="GravityHint" c:type="PangoGravityHint"/>
        </parameter>
      </parameters>
    </function>
    <function name="gravity_get_for_script_and_width"
              c:identifier="pango_gravity_get_for_script_and_width"
              moved-to="Gravity.get_for_script_and_width"
              version="1.26">
      <doc xml:space="preserve"
           filename="../pango/pango-gravity.c"
           line="324">Based on the script, East Asian width, base gravity, and hint,
returns actual gravity to use in laying out a single character
or #PangoItem.

This function is similar to pango_gravity_get_for_script() except
that this function makes a distinction between narrow/half-width and
wide/full-width characters also.  Wide/full-width characters always
stand &lt;emphasis&gt;upright&lt;/emphasis&gt;, that is, they always take the base gravity,
whereas narrow/full-width characters are always rotated in vertical
context.

If @base_gravity is %PANGO_GRAVITY_AUTO, it is first replaced with the
preferred gravity of @script.</doc>
      <source-position filename="../pango/pango-gravity.h" line="123"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../pango/pango-gravity.c"
             line="345">resolved gravity suitable to use for a run of text
with @script and @wide.</doc>
        <type name="Gravity" c:type="PangoGravity"/>
      </return-value>
      <parameters>
        <parameter name="script" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../pango/pango-gravity.c"
               line="326">#PangoScript to query</doc>
          <type name="Script" c:type="PangoScript"/>
        </parameter>
        <parameter name="wide" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../pango/pango-gravity.c"
               line="327">%TRUE for wide characters as returned by g_unichar_iswide()</doc>
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
        <parameter name="base_gravity" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../pango/pango-gravity.c"
               line="328">base gravity of the paragraph</doc>
          <type name="Gravity" c:type="PangoGravity"/>
        </parameter>
        <parameter name="hint" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../pango/pango-gravity.c"
               line="329">orientation hint</doc>
          <type name="GravityHint" c:type="PangoGravityHint"/>
        </parameter>
      </parameters>
    </function>
    <function name="gravity_to_rotation"
              c:identifier="pango_gravity_to_rotation"
              moved-to="Gravity.to_rotation"
              version="1.16">
      <doc xml:space="preserve"
           filename="../pango/pango-gravity.c"
           line="86">Converts a #PangoGravity value to its natural rotation in radians.
@gravity should not be %PANGO_GRAVITY_AUTO.

Note that pango_matrix_rotate() takes angle in degrees, not radians.
So, to call pango_matrix_rotate() with the output of this function
you should multiply it by (180. / G_PI).</doc>
      <source-position filename="../pango/pango-gravity.h" line="115"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../pango/pango-gravity.c"
             line="97">the rotation value corresponding to @gravity.</doc>
        <type name="gdouble" c:type="double"/>
      </return-value>
      <parameters>
        <parameter name="gravity" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../pango/pango-gravity.c"
               line="88">gravity to query</doc>
          <type name="Gravity" c:type="PangoGravity"/>
        </parameter>
      </parameters>
    </function>
    <function name="is_zero_width"
              c:identifier="pango_is_zero_width"
              version="1.10">
      <doc xml:space="preserve"
           filename="../pango/pango-utils.c"
           line="902">Checks @ch to see if it is a character that should not be
normally rendered on the screen.  This includes all Unicode characters
with "ZERO WIDTH" in their name, as well as &lt;firstterm&gt;bidi&lt;/firstterm&gt; formatting characters, and
a few other ones.  This is totally different from g_unichar_iszerowidth()
and is at best misnamed.</doc>
      <source-position filename="../pango/pango-utils.h" line="100"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../pango/pango-utils.c"
             line="912">%TRUE if @ch is a zero-width character, %FALSE otherwise</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="ch" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../pango/pango-utils.c"
               line="904">a Unicode character</doc>
          <type name="gunichar" c:type="gunichar"/>
        </parameter>
      </parameters>
    </function>
    <function name="itemize" c:identifier="pango_itemize">
      <doc xml:space="preserve"
           filename="../pango/pango-context.c"
           line="1614">Breaks a piece of text into segments with consistent
directional level and shaping engine. Each byte of @text will
be contained in exactly one of the items in the returned list;
the generated list of items will be in logical order (the start
offsets of the items are ascending).

@cached_iter should be an iterator over @attrs currently positioned at a
range before or containing @start_index; @cached_iter will be advanced to
the range covering the position just after @start_index + @length.
(i.e. if itemizing in a loop, just keep passing in the same @cached_iter).</doc>
      <source-position filename="../pango/pango-context.h" line="128"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="../pango/pango-context.c"
             line="1637">a #GList of #PangoItem
              structures. The items should be freed using pango_item_free()
              probably in combination with g_list_foreach(), and the list itself
              using g_list_free().</doc>
        <type name="GLib.List" c:type="GList*">
          <type name="Item"/>
        </type>
      </return-value>
      <parameters>
        <parameter name="context" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../pango/pango-context.c"
               line="1616">a structure holding information that affects
	       the itemization process.</doc>
          <type name="Context" c:type="PangoContext*"/>
        </parameter>
        <parameter name="text" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../pango/pango-context.c"
               line="1618">the text to itemize. Must be valid UTF-8</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
        <parameter name="start_index" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../pango/pango-context.c"
               line="1619">first byte in @text to process</doc>
          <type name="gint" c:type="int"/>
        </parameter>
        <parameter name="length" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../pango/pango-context.c"
               line="1620">the number of bytes (not characters) to process
            after @start_index.
            This must be &gt;= 0.</doc>
          <type name="gint" c:type="int"/>
        </parameter>
        <parameter name="attrs" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../pango/pango-context.c"
               line="1623">the set of attributes that apply to @text.</doc>
          <type name="AttrList" c:type="PangoAttrList*"/>
        </parameter>
        <parameter name="cached_iter"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="../pango/pango-context.c"
               line="1624">Cached attribute iterator, or %NULL</doc>
          <type name="AttrIterator" c:type="PangoAttrIterator*"/>
        </parameter>
      </parameters>
    </function>
    <function name="itemize_with_base_dir"
              c:identifier="pango_itemize_with_base_dir"
              version="1.4">
      <doc xml:space="preserve"
           filename="../pango/pango-context.c"
           line="1536">Like pango_itemize(), but the base direction to use when
computing bidirectional levels (see pango_context_set_base_dir ()),
is specified explicitly rather than gotten from the #PangoContext.</doc>
      <source-position filename="../pango/pango-context.h" line="135"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="../pango/pango-context.c"
             line="1552">a #GList of
              #PangoItem structures.  The items should be freed using
              pango_item_free() probably in combination with
              g_list_foreach(), and the list itself using g_list_free().</doc>
        <type name="GLib.List" c:type="GList*">
          <type name="Item"/>
        </type>
      </return-value>
      <parameters>
        <parameter name="context" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../pango/pango-context.c"
               line="1538">a structure holding information that affects
            the itemization process.</doc>
          <type name="Context" c:type="PangoContext*"/>
        </parameter>
        <parameter name="base_dir" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../pango/pango-context.c"
               line="1540">base direction to use for bidirectional processing</doc>
          <type name="Direction" c:type="PangoDirection"/>
        </parameter>
        <parameter name="text" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../pango/pango-context.c"
               line="1541">the text to itemize.</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
        <parameter name="start_index" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../pango/pango-context.c"
               line="1542">first byte in @text to process</doc>
          <type name="gint" c:type="int"/>
        </parameter>
        <parameter name="length" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../pango/pango-context.c"
               line="1543">the number of bytes (not characters) to process
            after @start_index. This must be &gt;= 0.</doc>
          <type name="gint" c:type="int"/>
        </parameter>
        <parameter name="attrs" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../pango/pango-context.c"
               line="1545">the set of attributes that apply to @text.</doc>
          <type name="AttrList" c:type="PangoAttrList*"/>
        </parameter>
        <parameter name="cached_iter"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="../pango/pango-context.c"
               line="1546">Cached attribute iterator, or %NULL</doc>
          <type name="AttrIterator" c:type="PangoAttrIterator*"/>
        </parameter>
      </parameters>
    </function>
    <function name="language_from_string"
              c:identifier="pango_language_from_string"
              moved-to="Language.from_string">
      <doc xml:space="preserve"
           filename="../pango/pango-language.c"
           line="307">Take a RFC-3066 format language tag as a string and convert it to a
#PangoLanguage pointer that can be efficiently copied (copy the
pointer) and compared with other language tags (compare the
pointer.)

This function first canonicalizes the string by converting it to
lowercase, mapping '_' to '-', and stripping all characters other
than letters and '-'.

Use pango_language_get_default() if you want to get the #PangoLanguage for
the current locale of the process.</doc>
      <source-position filename="../pango/pango-language.h" line="44"/>
      <return-value transfer-ownership="none" nullable="1">
        <doc xml:space="preserve"
             filename="../pango/pango-language.c"
             line="323">an opaque pointer to a
              #PangoLanguage structure, or %NULL if @language was
              %NULL.  The returned pointer will be valid forever
              after, and should not be freed.</doc>
        <type name="Language" c:type="PangoLanguage*"/>
      </return-value>
      <parameters>
        <parameter name="language"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="../pango/pango-language.c"
               line="309">a string representing a language tag, or %NULL</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
      </parameters>
    </function>
    <function name="language_get_default"
              c:identifier="pango_language_get_default"
              moved-to="Language.get_default"
              version="1.16">
      <doc xml:space="preserve"
           filename="../pango/pango-language.c"
           line="252">Returns the #PangoLanguage for the current locale of the process.
Note that this can change over the life of an application.

On Unix systems, this is the return value is derived from
&lt;literal&gt;setlocale(LC_CTYPE, NULL)&lt;/literal&gt;, and the user can
affect this through the environment variables LC_ALL, LC_CTYPE or
LANG (checked in that order). The locale string typically is in
the form lang_COUNTRY, where lang is an ISO-639 language code, and
COUNTRY is an ISO-3166 country code. For instance, sv_FI for
Swedish as written in Finland or pt_BR for Portuguese as written in
Brazil.

On Windows, the C library does not use any such environment
variables, and setting them won't affect the behavior of functions
like ctime(). The user sets the locale through the Regional Options
in the Control Panel. The C library (in the setlocale() function)
does not use country and language codes, but country and language
names spelled out in English.
However, this function does check the above environment
variables, and does return a Unix-style locale string based on
either said environment variables or the thread's current locale.

Your application should call &lt;literal&gt;setlocale(LC_ALL, "");&lt;/literal&gt;
for the user settings to take effect.  Gtk+ does this in its initialization
functions automatically (by calling gtk_set_locale()).
See &lt;literal&gt;man setlocale&lt;/literal&gt; for more details.</doc>
      <source-position filename="../pango/pango-language.h" line="54"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../pango/pango-language.c"
             line="282">the default language as a
              #PangoLanguage, must not be freed.</doc>
        <type name="Language" c:type="PangoLanguage*"/>
      </return-value>
    </function>
    <function name="language_get_preferred"
              c:identifier="pango_language_get_preferred"
              moved-to="Language.get_preferred"
              version="1.48">
      <doc xml:space="preserve"
           filename="../pango/pango-language.c"
           line="838">Returns the list of languages that the user prefers, as specified
by the PANGO_LANGUAGE or LANGUAGE environment variables, in order
of preference. Note that this list does not necessarily include
the language returned by pango_language_get_default().

When choosing language-specific resources, such as the sample
text returned by pango_language_get_sample_string(), you should
first try the default language, followed by the languages returned
by this function.</doc>
      <source-position filename="../pango/pango-language.h" line="57"/>
      <return-value transfer-ownership="none" nullable="1">
        <doc xml:space="preserve"
             filename="../pango/pango-language.c"
             line="851">a %NULL-terminated array of
   PangoLanguage*</doc>
        <type name="Language" c:type="PangoLanguage**"/>
      </return-value>
    </function>
    <docsection name="layout">
      <doc xml:space="preserve"
           filename="../pango/pango-layout.c"
           line="22">While complete access to the layout capabilities of Pango is provided
using the detailed interfaces for itemization and shaping, using
that functionality directly involves writing a fairly large amount
of code. The objects and functions in this section provide a
high-level driver for formatting entire paragraphs of text
at once. This includes paragraph-level functionality such as
line-breaking, justification, alignment and ellipsization.</doc>
    </docsection>
    <function name="log2vis_get_embedding_levels"
              c:identifier="pango_log2vis_get_embedding_levels"
              version="1.4">
      <doc xml:space="preserve"
           filename="../pango/pango-bidi-type.c"
           line="110">This will return the bidirectional embedding levels of the input paragraph
as defined by the Unicode Bidirectional Algorithm available at:

  http://www.unicode.org/reports/tr9/

If the input base direction is a weak direction, the direction of the
characters in the text will determine the final resolved direction.</doc>
      <source-position filename="../pango/pango-utils.h" line="92"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../pango/pango-bidi-type.c"
             line="125">a newly allocated array of embedding levels, one item per
              character (not byte), that should be freed using g_free.</doc>
        <type name="guint8" c:type="guint8*"/>
      </return-value>
      <parameters>
        <parameter name="text" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../pango/pango-bidi-type.c"
               line="112">the text to itemize.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="length" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../pango/pango-bidi-type.c"
               line="113">the number of bytes (not characters) to process, or -1
            if @text is nul-terminated and the length should be calculated.</doc>
          <type name="gint" c:type="int"/>
        </parameter>
        <parameter name="pbase_dir" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../pango/pango-bidi-type.c"
               line="115">input base direction, and output resolved direction.</doc>
          <type name="Direction" c:type="PangoDirection*"/>
        </parameter>
      </parameters>
    </function>
    <docsection name="main">
      <doc xml:space="preserve"
           filename="../pango/pango-context.c"
           line="22">The Pango rendering pipeline takes a string of
Unicode characters and converts it into glyphs.
The functions described in this section accomplish
various steps of this process.

![](pipeline.png)</doc>
    </docsection>
    <docsection name="markup">
      <doc xml:space="preserve"
           filename="../pango/pango-markup.c"
           line="33">Frequently, you want to display some text to the user with attributes
applied to part of the text (for example, you might want bold or
italicized words). With the base Pango interfaces, you could create a
#PangoAttrList and apply it to the text; the problem is that you'd
need to apply attributes to some numeric range of characters, for
example "characters 12-17." This is broken from an internationalization
standpoint; once the text is translated, the word you wanted to
italicize could be in a different position.

The solution is to include the text attributes in the string to be
translated. Pango provides this feature with a small markup language.
You can parse a marked-up string into the string text plus a
#PangoAttrList using either of pango_parse_markup() or
pango_markup_parser_new().

A simple example of a marked-up string might be:
|[
&lt;span foreground="blue" size="x-large"&gt;Blue text&lt;/span&gt; is &lt;i&gt;cool&lt;/i&gt;!
]|

Pango uses #GMarkup to parse this language, which means that XML
features such as numeric character entities such as `&amp;#169;` for
© can be used too.

The root tag of a marked-up document is `&lt;markup&gt;`, but
pango_parse_markup() allows you to omit this tag, so you will most
likely never need to use it. The most general markup tag is `&lt;span&gt;`,
then there are some convenience tags.

## Span attributes

`&lt;span&gt;` has the following attributes:

* `font_desc`:
  A font description string, such as "Sans Italic 12".
  See pango_font_description_from_string() for a description of the
  format of the string representation . Note that any other span
  attributes will override this description. So if you have "Sans Italic"
  and also a `style="normal"` attribute, you will get Sans normal,
  not italic.

* `font_family`:
  A font family name

* `font_size`, `size`:
  Font size in 1024ths of a point, or one of the absolute
  sizes `xx-small`, `x-small`, `small`, `medium`, `large`,
  `x-large`, `xx-large`, or one of the relative sizes `smaller`
  or `larger`. If you want to specify a absolute size, it's usually
  easier to take advantage of the ability to specify a partial
  font description using `font`; you can use `font='12.5'`
  rather than `size='12800'`.

* `font_style`:
  One of `normal`, `oblique`, `italic`

* `font_weight`:
  One of `ultralight`, `light`, `normal`, `bold`,
  `ultrabold`, `heavy`, or a numeric weight

* `font_variant`:
  One of `normal` or `smallcaps`

* `font_stretch`, `stretch`:
  One of `ultracondensed`, `extracondensed`, `condensed`,
  `semicondensed`, `normal`, `semiexpanded`, `expanded`,
  `extraexpanded`, `ultraexpanded`

* `font_features`:
  A comma-separated list of OpenType font feature
  settings, in the same syntax as accepted by CSS. E.g:
  `font_features='dlig=1, -kern, afrc on'`

* `foreground`, `fgcolor`:
  An RGB color specification such as `#00FF00` or a color
  name such as `red`. Since 1.38, an RGBA color specification such
  as `#00FF007F` will be interpreted as specifying both a foreground
  color and foreground alpha.

* `background`, `bgcolor`:
  An RGB color specification such as `#00FF00` or a color
  name such as `red`.
  Since 1.38, an RGBA color specification such as `#00FF007F` will
  be interpreted as specifying both a background color and
  background alpha.

* `alpha`, `fgalpha`:
  An alpha value for the foreground color, either a plain
  integer between 1 and 65536 or a percentage value like `50%`.

* `background_alpha`, `bgalpha`:
  An alpha value for the background color, either a plain
  integer between 1 and 65536 or a percentage value like `50%`.

* `underline`:
  One of `none`, `single`, `double`, `low`, `error`,
  `single-line`, `double-line` or `error-line`.

* `underline_color`:
  The color of underlines; an RGB color
  specification such as `#00FF00` or a color name such as `red`

* `overline`:
  One of `none` or `single`

* `overline_color`:
  The color of overlines; an RGB color
  specification such as `#00FF00` or a color name such as `red`

* `rise`:
  Vertical displacement, in Pango units. Can be negative for
  subscript, positive for superscript.

* `strikethrough`
  `true` or `false` whether to strike through the text

* `strikethrough_color`:
  The color of strikethrough lines; an RGB
  color specification such as `#00FF00` or a color name such as `red`

* `fallback`:
  `true` or `false` whether to enable fallback. If
  disabled, then characters will only be used from the closest
  matching font on the system. No fallback will be done to other
  fonts on the system that might contain the characters in the text.
  Fallback is enabled by default. Most applications should not
  disable fallback.

* `allow_breaks`:
  `true` or `false` whether to allow line breaks or not. If
  not allowed, the range will be kept in a single run as far
  as possible. Breaks are allowed by default.

* `insert_hyphens`:`
  `true` or `false` whether to insert hyphens when breaking
  lines in the middle of a word. Hyphens are inserted by default.

* `show`:
  A value determining how invisible characters are treated.
  Possible values are `spaces`, `line-breaks`, `ignorables`
  or combinations, such as `spaces|line-breaks`.

* `lang`:
  A language code, indicating the text language

* `letter_spacing`:
  Inter-letter spacing in 1024ths of a point.

* `gravity`:
  One of `south`, `east`, `north`, `west`, `auto`.

* `gravity_hint`:
  One of `natural`, `strong`, `line`.

## Convenience tags

The following convenience tags are provided:

* `&lt;b&gt;`:
  Bold

* `&lt;big&gt;`:
  Makes font relatively larger, equivalent to `&lt;span size="larger"&gt;`

* `&lt;i&gt;`:
  Italic

* `&lt;s&gt;`:
  Strikethrough

* `&lt;sub&gt;`:
  Subscript

* `&lt;sup&gt;`:
  Superscript

* `&lt;small&gt;`:
  Makes font relatively smaller, equivalent to `&lt;span size="smaller"&gt;`

* `&lt;tt&gt;`:
  Monospace

* `&lt;u&gt;`:
  Underline</doc>
    </docsection>
    <function name="markup_parser_finish"
              c:identifier="pango_markup_parser_finish"
              version="1.31.0"
              throws="1">
      <doc xml:space="preserve"
           filename="../pango/pango-markup.c"
           line="924">After feeding a pango markup parser some data with g_markup_parse_context_parse(),
use this function to get the list of pango attributes and text out of the
markup. This function will not free @context, use g_markup_parse_context_free()
to do so.</doc>
      <source-position filename="../pango/pango-attributes.h" line="685"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../pango/pango-markup.c"
             line="937">%FALSE if @error is set, otherwise %TRUE</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="context" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../pango/pango-markup.c"
               line="926">A valid parse context that was returned from pango_markup_parser_new()</doc>
          <type name="GLib.MarkupParseContext" c:type="GMarkupParseContext*"/>
        </parameter>
        <parameter name="attr_list"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full"
                   optional="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="../pango/pango-markup.c"
               line="927">address of return location for a #PangoAttrList, or %NULL</doc>
          <type name="AttrList" c:type="PangoAttrList**"/>
        </parameter>
        <parameter name="text"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full"
                   optional="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="../pango/pango-markup.c"
               line="928">address of return location for text with tags stripped, or %NULL</doc>
          <type name="utf8" c:type="char**"/>
        </parameter>
        <parameter name="accel_char"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full"
                   optional="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="../pango/pango-markup.c"
               line="929">address of return location for accelerator char, or %NULL</doc>
          <type name="gunichar" c:type="gunichar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="markup_parser_new"
              c:identifier="pango_markup_parser_new"
              version="1.31.0">
      <doc xml:space="preserve"
           filename="../pango/pango-markup.c"
           line="881">Parses marked-up text (see
&lt;link linkend="PangoMarkupFormat"&gt;markup format&lt;/link&gt;) to create
a plain-text string and an attribute list.

If @accel_marker is nonzero, the given character will mark the
character following it as an accelerator. For example, @accel_marker
might be an ampersand or underscore. All characters marked
as an accelerator will receive a %PANGO_UNDERLINE_LOW attribute,
and the first character so marked will be returned in @accel_char,
when calling finish(). Two @accel_marker characters following each
other produce a single literal @accel_marker character.

To feed markup to the parser, use g_markup_parse_context_parse()
on the returned #GMarkupParseContext. When done with feeding markup
to the parser, use pango_markup_parser_finish() to get the data out
of it, and then use g_markup_parse_context_free() to free it.

This function is designed for applications that read pango markup
from streams. To simply parse a string containing pango markup,
the simpler pango_parse_markup() API is recommended instead.</doc>
      <source-position filename="../pango/pango-attributes.h" line="683"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../pango/pango-markup.c"
             line="906">a #GMarkupParseContext that should be
destroyed with g_markup_parse_context_free().</doc>
        <type name="GLib.MarkupParseContext" c:type="GMarkupParseContext*"/>
      </return-value>
      <parameters>
        <parameter name="accel_marker" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../pango/pango-markup.c"
               line="883">character that precedes an accelerator, or 0 for none</doc>
          <type name="gunichar" c:type="gunichar"/>
        </parameter>
      </parameters>
    </function>
    <function name="module_register"
              c:identifier="pango_module_register"
              introspectable="0"
              deprecated="1"
              deprecated-version="1.38">
      <doc xml:space="preserve"
           filename="../pango/modules.c"
           line="103">Do not use.  Does not do anything.</doc>
      <source-position filename="../pango/pango-modules.h" line="71"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="module" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../pango/modules.c"
               line="105">a #PangoIncludedModule</doc>
          <type name="IncludedModule" c:type="PangoIncludedModule*"/>
        </parameter>
      </parameters>
    </function>
    <docsection name="modules">
      <doc xml:space="preserve"
           filename="../pango/modules.c"
           line="22">Functions and macros in this section were used to support
loading dynamic modules that add engines to Pango at run time.

That is no longer the case, and these APIs should not be
used anymore.</doc>
    </docsection>
    <docsection name="pango-engine-lang">
      <doc xml:space="preserve"
           filename="../pango/pango-engine.c"
           line="36">The &lt;firstterm&gt;language engines&lt;/firstterm&gt; are rendering-system independent
engines that determine line, word, and character breaks for character strings.
These engines are used in pango_break().</doc>
    </docsection>
    <docsection name="pango-engine-shape">
      <doc xml:space="preserve"
           filename="../pango/pango-engine.c"
           line="48">The &lt;firstterm&gt;shape engines&lt;/firstterm&gt; are rendering-system dependent
engines that convert character strings into glyph strings.
These engines are used in pango_shape().</doc>
    </docsection>
    <docsection name="pango-version">
      <doc xml:space="preserve"
           filename="../pango/pango-utils.c"
           line="22">The capital-letter macros defined here can be used to check the version of Pango
at compile-time, and to &lt;firstterm&gt;encode&lt;/firstterm&gt; Pango versions into integers.

The functions can be used to check the version of the linked Pango library at run-time.</doc>
    </docsection>
    <function name="parse_enum"
              c:identifier="pango_parse_enum"
              version="1.16"
              deprecated="1"
              deprecated-version="1.38">
      <doc xml:space="preserve"
           filename="../pango/pango-utils.c"
           line="687">Parses an enum type and stores the result in @value.

If @str does not match the nick name of any of the possible values for the
enum and is not an integer, %FALSE is returned, a warning is issued
if @warn is %TRUE, and a
string representing the list of possible values is stored in
@possible_values.  The list is slash-separated, eg.
"none/start/middle/end".  If failed and @possible_values is not %NULL,
returned string should be freed using g_free().</doc>
      <source-position filename="../pango/pango-utils.h" line="52"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../pango/pango-utils.c"
             line="705">%TRUE if @str was successfully parsed.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="type" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../pango/pango-utils.c"
               line="689">enum type to parse, eg. %PANGO_TYPE_ELLIPSIZE_MODE.</doc>
          <type name="GType" c:type="GType"/>
        </parameter>
        <parameter name="str"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="../pango/pango-utils.c"
               line="690">string to parse.  May be %NULL.</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
        <parameter name="value"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full"
                   optional="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="../pango/pango-utils.c"
               line="691">integer to store the result in, or %NULL.</doc>
          <type name="gint" c:type="int*"/>
        </parameter>
        <parameter name="warn" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../pango/pango-utils.c"
               line="692">if %TRUE, issue a g_warning() on bad input.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
        <parameter name="possible_values"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full"
                   optional="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="../pango/pango-utils.c"
               line="693">place to store list of possible values on failure, or %NULL.</doc>
          <type name="utf8" c:type="char**"/>
        </parameter>
      </parameters>
    </function>
    <function name="parse_markup" c:identifier="pango_parse_markup" throws="1">
      <doc xml:space="preserve"
           filename="../pango/pango-markup.c"
           line="801">Parses marked-up text (see
&lt;link linkend="PangoMarkupFormat"&gt;markup format&lt;/link&gt;) to create
a plain-text string and an attribute list.

If @accel_marker is nonzero, the given character will mark the
character following it as an accelerator. For example, @accel_marker
might be an ampersand or underscore. All characters marked
as an accelerator will receive a %PANGO_UNDERLINE_LOW attribute,
and the first character so marked will be returned in @accel_char.
Two @accel_marker characters following each other produce a single
literal @accel_marker character.

To parse a stream of pango markup incrementally, use pango_markup_parser_new().

If any error happens, none of the output arguments are touched except
for @error.</doc>
      <source-position filename="../pango/pango-attributes.h" line="674"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../pango/pango-markup.c"
             line="828">%FALSE if @error is set, otherwise %TRUE</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="markup_text" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../pango/pango-markup.c"
               line="803">markup to parse (see &lt;link linkend="PangoMarkupFormat"&gt;markup format&lt;/link&gt;)</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
        <parameter name="length" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../pango/pango-markup.c"
               line="804">length of @markup_text, or -1 if nul-terminated</doc>
          <type name="gint" c:type="int"/>
        </parameter>
        <parameter name="accel_marker" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../pango/pango-markup.c"
               line="805">character that precedes an accelerator, or 0 for none</doc>
          <type name="gunichar" c:type="gunichar"/>
        </parameter>
        <parameter name="attr_list"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full"
                   optional="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="../pango/pango-markup.c"
               line="806">address of return location for a #PangoAttrList, or %NULL</doc>
          <type name="AttrList" c:type="PangoAttrList**"/>
        </parameter>
        <parameter name="text"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full"
                   optional="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="../pango/pango-markup.c"
               line="807">address of return location for text with tags stripped, or %NULL</doc>
          <type name="utf8" c:type="char**"/>
        </parameter>
        <parameter name="accel_char"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full"
                   optional="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="../pango/pango-markup.c"
               line="808">address of return location for accelerator char, or %NULL</doc>
          <type name="gunichar" c:type="gunichar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="parse_stretch" c:identifier="pango_parse_stretch">
      <doc xml:space="preserve"
           filename="../pango/fonts.c"
           line="1622">Parses a font stretch. The allowed values are
"ultra_condensed", "extra_condensed", "condensed",
"semi_condensed", "normal", "semi_expanded", "expanded",
"extra_expanded" and "ultra_expanded". Case variations are
ignored and the '_' characters may be omitted.</doc>
      <source-position filename="../pango/pango-utils.h" line="78"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../pango/fonts.c"
             line="1635">%TRUE if @str was successfully parsed.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="str" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../pango/fonts.c"
               line="1624">a string to parse.</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
        <parameter name="stretch"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../pango/fonts.c"
               line="1625">a #PangoStretch to store the
  result in.</doc>
          <type name="Stretch" c:type="PangoStretch*"/>
        </parameter>
        <parameter name="warn" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../pango/fonts.c"
               line="1627">if %TRUE, issue a g_warning() on bad input.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
      </parameters>
    </function>
    <function name="parse_style" c:identifier="pango_parse_style">
      <doc xml:space="preserve"
           filename="../pango/fonts.c"
           line="1559">Parses a font style. The allowed values are "normal",
"italic" and "oblique", case variations being
ignored.</doc>
      <source-position filename="../pango/pango-utils.h" line="66"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../pango/fonts.c"
             line="1570">%TRUE if @str was successfully parsed.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="str" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../pango/fonts.c"
               line="1561">a string to parse.</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
        <parameter name="style"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../pango/fonts.c"
               line="1562">a #PangoStyle to store the result
  in.</doc>
          <type name="Style" c:type="PangoStyle*"/>
        </parameter>
        <parameter name="warn" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../pango/fonts.c"
               line="1564">if %TRUE, issue a g_warning() on bad input.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
      </parameters>
    </function>
    <function name="parse_variant" c:identifier="pango_parse_variant">
      <doc xml:space="preserve"
           filename="../pango/fonts.c"
           line="1580">Parses a font variant. The allowed values are "normal"
and "smallcaps" or "small_caps", case variations being
ignored.</doc>
      <source-position filename="../pango/pango-utils.h" line="70"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../pango/fonts.c"
             line="1591">%TRUE if @str was successfully parsed.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="str" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../pango/fonts.c"
               line="1582">a string to parse.</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
        <parameter name="variant"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../pango/fonts.c"
               line="1583">a #PangoVariant to store the
  result in.</doc>
          <type name="Variant" c:type="PangoVariant*"/>
        </parameter>
        <parameter name="warn" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../pango/fonts.c"
               line="1585">if %TRUE, issue a g_warning() on bad input.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
      </parameters>
    </function>
    <function name="parse_weight" c:identifier="pango_parse_weight">
      <doc xml:space="preserve"
           filename="../pango/fonts.c"
           line="1601">Parses a font weight. The allowed values are "heavy",
"ultrabold", "bold", "normal", "light", "ultraleight"
and integers. Case variations are ignored.</doc>
      <source-position filename="../pango/pango-utils.h" line="74"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../pango/fonts.c"
             line="1612">%TRUE if @str was successfully parsed.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="str" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../pango/fonts.c"
               line="1603">a string to parse.</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
        <parameter name="weight"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../pango/fonts.c"
               line="1604">a #PangoWeight to store the result
  in.</doc>
          <type name="Weight" c:type="PangoWeight*"/>
        </parameter>
        <parameter name="warn" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../pango/fonts.c"
               line="1606">if %TRUE, issue a g_warning() on bad input.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
      </parameters>
    </function>
    <function name="quantize_line_geometry"
              c:identifier="pango_quantize_line_geometry"
              version="1.12">
      <doc xml:space="preserve"
           filename="../pango/pango-utils.c"
           line="955">Quantizes the thickness and position of a line, typically an
underline or strikethrough, to whole device pixels, that is integer
multiples of %PANGO_SCALE. The purpose of this function is to avoid
such lines looking blurry.

Care is taken to make sure @thickness is at least one pixel when this
function returns, but returned @position may become zero as a result
of rounding.</doc>
      <source-position filename="../pango/pango-utils.h" line="86"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="thickness"
                   direction="inout"
                   caller-allocates="0"
                   transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../pango/pango-utils.c"
               line="957">pointer to the thickness of a line, in Pango units</doc>
          <type name="gint" c:type="int*"/>
        </parameter>
        <parameter name="position"
                   direction="inout"
                   caller-allocates="0"
                   transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../pango/pango-utils.c"
               line="958">corresponding position</doc>
          <type name="gint" c:type="int*"/>
        </parameter>
      </parameters>
    </function>
    <function name="read_line"
              c:identifier="pango_read_line"
              deprecated="1"
              deprecated-version="1.38">
      <doc xml:space="preserve"
           filename="../pango/pango-utils.c"
           line="256">Reads an entire line from a file into a buffer. Lines may
be delimited with '\n', '\r', '\n\r', or '\r\n'. The delimiter
is not written into the buffer. Text after a '#' character is treated as
a comment and skipped. '\' can be used to escape a # character.
'\' proceeding a line delimiter combines adjacent lines. A '\' proceeding
any other character is ignored and written into the output buffer
unmodified.</doc>
      <source-position filename="../pango/pango-utils.h" line="37"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../pango/pango-utils.c"
             line="269">0 if the stream was already at an %EOF character, otherwise
              the number of lines read (this is useful for maintaining
              a line number counter which doesn't combine lines with '\')</doc>
        <type name="gint" c:type="gint"/>
      </return-value>
      <parameters>
        <parameter name="stream"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="../pango/pango-utils.c"
               line="258">a stdio stream</doc>
          <type name="gpointer" c:type="FILE*"/>
        </parameter>
        <parameter name="str" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../pango/pango-utils.c"
               line="259">#GString buffer into which to write the result</doc>
          <type name="GLib.String" c:type="GString*"/>
        </parameter>
      </parameters>
    </function>
    <function name="reorder_items" c:identifier="pango_reorder_items">
      <doc xml:space="preserve"
           filename="../pango/reorder-items.c"
           line="32">From a list of items in logical order and the associated
directional levels, produce a list in visual order.
The original list is unmodified.</doc>
      <source-position filename="../pango/pango-glyph.h" line="231"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="../pango/reorder-items.c"
             line="40">a #GList
         of #PangoItem structures in visual order.

(Please open a bug if you use this function.
 It is not a particularly convenient interface, and the code
 is duplicated elsewhere in Pango for that reason.)</doc>
        <type name="GLib.List" c:type="GList*">
          <type name="Item"/>
        </type>
      </return-value>
      <parameters>
        <parameter name="logical_items" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../pango/reorder-items.c"
               line="34">a #GList of #PangoItem in logical order.</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="Item"/>
          </type>
        </parameter>
      </parameters>
    </function>
    <function name="scan_int"
              c:identifier="pango_scan_int"
              deprecated="1"
              deprecated-version="1.38">
      <doc xml:space="preserve"
           filename="../pango/pango-utils.c"
           line="528">Scans an integer.
Leading white space is skipped.</doc>
      <source-position filename="../pango/pango-utils.h" line="48"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../pango/pango-utils.c"
             line="536">%FALSE if a parse error occurred.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="pos"
                   direction="inout"
                   caller-allocates="0"
                   transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../pango/pango-utils.c"
               line="530">in/out string position</doc>
          <type name="utf8" c:type="const char**"/>
        </parameter>
        <parameter name="out"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../pango/pango-utils.c"
               line="531">an int into which to write the result</doc>
          <type name="gint" c:type="int*"/>
        </parameter>
      </parameters>
    </function>
    <function name="scan_string"
              c:identifier="pango_scan_string"
              deprecated="1"
              deprecated-version="1.38">
      <doc xml:space="preserve"
           filename="../pango/pango-utils.c"
           line="436">Scans a string into a #GString buffer. The string may either
be a sequence of non-white-space characters, or a quoted
string with '"'. Instead a quoted string, '\"' represents
a literal quote. Leading white space outside of quotes is skipped.</doc>
      <source-position filename="../pango/pango-utils.h" line="45"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../pango/pango-utils.c"
             line="446">%FALSE if a parse error occurred.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="pos"
                   direction="inout"
                   caller-allocates="0"
                   transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../pango/pango-utils.c"
               line="438">in/out string position</doc>
          <type name="utf8" c:type="const char**"/>
        </parameter>
        <parameter name="out" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../pango/pango-utils.c"
               line="439">a #GString into which to write the result</doc>
          <type name="GLib.String" c:type="GString*"/>
        </parameter>
      </parameters>
    </function>
    <function name="scan_word"
              c:identifier="pango_scan_word"
              deprecated="1"
              deprecated-version="1.38">
      <doc xml:space="preserve"
           filename="../pango/pango-utils.c"
           line="392">Scans a word into a #GString buffer. A word consists
of [A-Za-z_] followed by zero or more [A-Za-z_0-9]
Leading white space is skipped.</doc>
      <source-position filename="../pango/pango-utils.h" line="42"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../pango/pango-utils.c"
             line="401">%FALSE if a parse error occurred.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="pos"
                   direction="inout"
                   caller-allocates="0"
                   transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../pango/pango-utils.c"
               line="394">in/out string position</doc>
          <type name="utf8" c:type="const char**"/>
        </parameter>
        <parameter name="out" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../pango/pango-utils.c"
               line="395">a #GString into which to write the result</doc>
          <type name="GLib.String" c:type="GString*"/>
        </parameter>
      </parameters>
    </function>
    <function name="script_for_unichar"
              c:identifier="pango_script_for_unichar"
              moved-to="Script.for_unichar"
              version="1.4"
              deprecated="1"
              deprecated-version="1.44.">
      <doc xml:space="preserve"
           filename="../pango/pango-script.c"
           line="72">Looks up the script for a particular character (as defined by
Unicode Standard Annex \#24). No check is made for @ch being a
valid Unicode character; if you pass in invalid character, the
result is undefined.

Note that while the return type of this function is declared
as PangoScript, as of Pango 1.18, this function simply returns
the return value of g_unichar_get_script(). Callers must be
prepared to handle unknown values.</doc>
      <doc-deprecated xml:space="preserve">Use g_unichar_get_script()</doc-deprecated>
      <source-position filename="../pango/pango-script.h" line="310"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../pango/pango-script.c"
             line="86">the #PangoScript for the character.</doc>
        <type name="Script" c:type="PangoScript"/>
      </return-value>
      <parameters>
        <parameter name="ch" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../pango/pango-script.c"
               line="74">a Unicode character</doc>
          <type name="gunichar" c:type="gunichar"/>
        </parameter>
      </parameters>
    </function>
    <function name="script_get_sample_language"
              c:identifier="pango_script_get_sample_language"
              moved-to="Script.get_sample_language"
              version="1.4">
      <doc xml:space="preserve"
           filename="../pango/pango-language.c"
           line="865">Given a script, finds a language tag that is reasonably
representative of that script. This will usually be the
most widely spoken or used language written in that script:
for instance, the sample language for %PANGO_SCRIPT_CYRILLIC
is &lt;literal&gt;ru&lt;/literal&gt; (Russian), the sample language
for %PANGO_SCRIPT_ARABIC is &lt;literal&gt;ar&lt;/literal&gt;.

For some
scripts, no sample language will be returned because there
is no language that is sufficiently representative. The best
example of this is %PANGO_SCRIPT_HAN, where various different
variants of written Chinese, Japanese, and Korean all use
significantly different sets of Han characters and forms
of shared characters. No sample language can be provided
for many historical scripts as well.

As of 1.18, this function checks the environment variables
PANGO_LANGUAGE and LANGUAGE (checked in that order) first.
If one of them is set, it is parsed as a list of language tags
separated by colons or other separators.  This function
will return the first language in the parsed list that Pango
believes may use @script for writing.  This last predicate
is tested using pango_language_includes_script().  This can
be used to control Pango's font selection for non-primary
languages.  For example, a PANGO_LANGUAGE enviroment variable
set to "en:fa" makes Pango choose fonts suitable for Persian (fa)
instead of Arabic (ar) when a segment of Arabic text is found
in an otherwise non-Arabic text.  The same trick can be used to
choose a default language for %PANGO_SCRIPT_HAN when setting
context language is not feasible.</doc>
      <source-position filename="../pango/pango-script.h" line="331"/>
      <return-value transfer-ownership="full" nullable="1">
        <doc xml:space="preserve"
             filename="../pango/pango-language.c"
             line="900">a #PangoLanguage that is representative
of the script, or %NULL if no such language exists.</doc>
        <type name="Language" c:type="PangoLanguage*"/>
      </return-value>
      <parameters>
        <parameter name="script" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../pango/pango-language.c"
               line="867">a #PangoScript</doc>
          <type name="Script" c:type="PangoScript"/>
        </parameter>
      </parameters>
    </function>
    <docsection name="scripts">
      <doc xml:space="preserve"
           filename="../pango/pango-script.c"
           line="56">The functions in this section are used to identify the writing
system, or &lt;firstterm&gt;script&lt;/firstterm&gt; of individual characters
and of ranges within a larger text string.</doc>
    </docsection>
    <function name="shape" c:identifier="pango_shape">
      <doc xml:space="preserve"
           filename="../pango/shape.c"
           line="41">Given a segment of text and the corresponding #PangoAnalysis structure
returned from pango_itemize(), convert the characters into glyphs. You
may also pass in only a substring of the item from pango_itemize().

It is recommended that you use pango_shape_full() instead, since
that API allows for shaping interaction happening across text item
boundaries.

Note that the extra attributes in the @analyis that is returned from
pango_itemize() have indices that are relative to the entire paragraph,
so you need to subtract the item offset from their indices before
calling pango_shape().</doc>
      <source-position filename="../pango/pango-glyph.h" line="192"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="text" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../pango/shape.c"
               line="43">the text to process</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
        <parameter name="length" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../pango/shape.c"
               line="44">the length (in bytes) of @text</doc>
          <type name="gint" c:type="int"/>
        </parameter>
        <parameter name="analysis" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../pango/shape.c"
               line="45">#PangoAnalysis structure from pango_itemize()</doc>
          <type name="Analysis" c:type="const PangoAnalysis*"/>
        </parameter>
        <parameter name="glyphs" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../pango/shape.c"
               line="46">glyph string in which to store results</doc>
          <type name="GlyphString" c:type="PangoGlyphString*"/>
        </parameter>
      </parameters>
    </function>
    <function name="shape_full" c:identifier="pango_shape_full" version="1.32">
      <doc xml:space="preserve"
           filename="../pango/shape.c"
           line="70">Given a segment of text and the corresponding
#PangoAnalysis structure returned from pango_itemize(),
convert the characters into glyphs. You may also pass
in only a substring of the item from pango_itemize().

This is similar to pango_shape(), except it also can optionally take
the full paragraph text as input, which will then be used to perform
certain cross-item shaping interactions.  If you have access to the broader
text of which @item_text is part of, provide the broader text as
@paragraph_text.  If @paragraph_text is %NULL, item text is used instead.

Note that the extra attributes in the @analyis that is returned from
pango_itemize() have indices that are relative to the entire paragraph,
so you do not pass the full paragraph text as @paragraph_text, you need
to subtract the item offset from their indices before calling pango_shape_full().</doc>
      <source-position filename="../pango/pango-glyph.h" line="198"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="item_text" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../pango/shape.c"
               line="72">valid UTF-8 text to shape.</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
        <parameter name="item_length" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../pango/shape.c"
               line="73">the length (in bytes) of @item_text. -1 means nul-terminated text.</doc>
          <type name="gint" c:type="int"/>
        </parameter>
        <parameter name="paragraph_text"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="../pango/shape.c"
               line="74">text of the paragraph (see details).  May be %NULL.</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
        <parameter name="paragraph_length" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../pango/shape.c"
               line="75">the length (in bytes) of @paragraph_text. -1 means nul-terminated text.</doc>
          <type name="gint" c:type="int"/>
        </parameter>
        <parameter name="analysis" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../pango/shape.c"
               line="76">#PangoAnalysis structure from pango_itemize().</doc>
          <type name="Analysis" c:type="const PangoAnalysis*"/>
        </parameter>
        <parameter name="glyphs" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../pango/shape.c"
               line="77">glyph string in which to store results.</doc>
          <type name="GlyphString" c:type="PangoGlyphString*"/>
        </parameter>
      </parameters>
    </function>
    <function name="shape_with_flags"
              c:identifier="pango_shape_with_flags"
              version="1.44">
      <doc xml:space="preserve"
           filename="../pango/shape.c"
           line="161">Given a segment of text and the corresponding
#PangoAnalysis structure returned from pango_itemize(),
convert the characters into glyphs. You may also pass
in only a substring of the item from pango_itemize().

This is similar to pango_shape_full(), except it also takes
flags that can influence the shaping process.

Note that the extra attributes in the @analyis that is returned from
pango_itemize() have indices that are relative to the entire paragraph,
so you do not pass the full paragraph text as @paragraph_text, you need
to subtract the item offset from their indices before calling
pango_shape_with_flags().</doc>
      <source-position filename="../pango/pango-glyph.h" line="222"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="item_text" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../pango/shape.c"
               line="163">valid UTF-8 text to shape</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
        <parameter name="item_length" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../pango/shape.c"
               line="164">the length (in bytes) of @item_text.
    -1 means nul-terminated text.</doc>
          <type name="gint" c:type="int"/>
        </parameter>
        <parameter name="paragraph_text"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="../pango/shape.c"
               line="166">text of the paragraph (see details).
    May be %NULL.</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
        <parameter name="paragraph_length" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../pango/shape.c"
               line="168">the length (in bytes) of @paragraph_text.
    -1 means nul-terminated text.</doc>
          <type name="gint" c:type="int"/>
        </parameter>
        <parameter name="analysis" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../pango/shape.c"
               line="170">#PangoAnalysis structure from pango_itemize()</doc>
          <type name="Analysis" c:type="const PangoAnalysis*"/>
        </parameter>
        <parameter name="glyphs" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../pango/shape.c"
               line="171">glyph string in which to store results</doc>
          <type name="GlyphString" c:type="PangoGlyphString*"/>
        </parameter>
        <parameter name="flags" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../pango/shape.c"
               line="172">flags influencing the shaping process</doc>
          <type name="ShapeFlags" c:type="PangoShapeFlags"/>
        </parameter>
      </parameters>
    </function>
    <function name="skip_space"
              c:identifier="pango_skip_space"
              deprecated="1"
              deprecated-version="1.38">
      <doc xml:space="preserve"
           filename="../pango/pango-utils.c"
           line="368">Skips 0 or more characters of white space.</doc>
      <source-position filename="../pango/pango-utils.h" line="40"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../pango/pango-utils.c"
             line="374">%FALSE if skipping the white space leaves
the position at a '\0' character.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="pos"
                   direction="inout"
                   caller-allocates="0"
                   transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../pango/pango-utils.c"
               line="370">in/out string position</doc>
          <type name="utf8" c:type="const char**"/>
        </parameter>
      </parameters>
    </function>
    <function name="split_file_list"
              c:identifier="pango_split_file_list"
              deprecated="1"
              deprecated-version="1.38">
      <doc xml:space="preserve"
           filename="../pango/pango-utils.c"
           line="190">Splits a %G_SEARCHPATH_SEPARATOR-separated list of files, stripping
white space and substituting ~/ with $HOME/.</doc>
      <source-position filename="../pango/pango-utils.h" line="32"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="../pango/pango-utils.c"
             line="197">a list of
strings to be freed with g_strfreev()</doc>
        <array c:type="char**">
          <type name="utf8"/>
        </array>
      </return-value>
      <parameters>
        <parameter name="str" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../pango/pango-utils.c"
               line="192">a %G_SEARCHPATH_SEPARATOR separated list of filenames</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
      </parameters>
    </function>
    <docsection name="tab-stops">
      <doc xml:space="preserve"
           filename="../pango/pango-tabs.c"
           line="22">Functions in this section are used to deal with #PangoTabArray objects
that can be used to set tab stop positions in a #PangoLayout.</doc>
    </docsection>
    <function name="tailor_break"
              c:identifier="pango_tailor_break"
              version="1.44">
      <doc xml:space="preserve"
           filename="../pango/break.c"
           line="1735">Apply language-specific tailoring to the breaks in
@log_attrs, which are assumed to have been produced
by pango_default_break().

If @offset is not -1, it is used to apply attributes
from @analysis that are relevant to line breaking.</doc>
      <source-position filename="../pango/pango-break.h" line="137"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="text" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../pango/break.c"
               line="1737">text to process. Must be valid UTF-8</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
        <parameter name="length" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../pango/break.c"
               line="1738">length in bytes of @text</doc>
          <type name="gint" c:type="int"/>
        </parameter>
        <parameter name="analysis" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../pango/break.c"
               line="1739">#PangoAnalysis structure from pango_itemize() for @text</doc>
          <type name="Analysis" c:type="PangoAnalysis*"/>
        </parameter>
        <parameter name="offset" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../pango/break.c"
               line="1740">Byte offset of @text from the beginning of the
    paragraph, or -1 to ignore attributes from @analysis</doc>
          <type name="gint" c:type="int"/>
        </parameter>
        <parameter name="log_attrs" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../pango/break.c"
               line="1742">array with one #PangoLogAttr
  per character in @text, plus one extra, to be filled in</doc>
          <array length="5" zero-terminated="0" c:type="PangoLogAttr*">
            <type name="LogAttr" c:type="PangoLogAttr"/>
          </array>
        </parameter>
        <parameter name="log_attrs_len" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../pango/break.c"
               line="1744">length of @log_attrs array</doc>
          <type name="gint" c:type="int"/>
        </parameter>
      </parameters>
    </function>
    <docsection name="text-attributes">
      <doc xml:space="preserve"
           filename="../pango/pango-attributes.c"
           line="22">Attributed text is used in a number of places in Pango. It
is used as the input to the itemization process and also when
creating a #PangoLayout. The data types and functions in
this section are used to represent and manipulate sets
of attributes applied to a portion of text.</doc>
    </docsection>
    <function name="trim_string"
              c:identifier="pango_trim_string"
              deprecated="1"
              deprecated-version="1.38">
      <doc xml:space="preserve"
           filename="../pango/pango-utils.c"
           line="157">Trims leading and trailing whitespace from a string.</doc>
      <source-position filename="../pango/pango-utils.h" line="35"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="../pango/pango-utils.c"
             line="163">A newly-allocated string that must be freed with g_free()</doc>
        <type name="utf8" c:type="char*"/>
      </return-value>
      <parameters>
        <parameter name="str" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../pango/pango-utils.c"
               line="159">a string</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
      </parameters>
    </function>
    <function name="unichar_direction" c:identifier="pango_unichar_direction">
      <doc xml:space="preserve"
           filename="../pango/pango-bidi-type.c"
           line="281">Determines the inherent direction of a character; either
%PANGO_DIRECTION_LTR, %PANGO_DIRECTION_RTL, or
%PANGO_DIRECTION_NEUTRAL.

This function is useful to categorize characters into left-to-right
letters, right-to-left letters, and everything else.  If full
Unicode bidirectional type of a character is needed,
pango_bidi_type_for_unichar() can be used instead.</doc>
      <source-position filename="../pango/pango-bidi-type.h" line="93"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../pango/pango-bidi-type.c"
             line="294">the direction of the character.</doc>
        <type name="Direction" c:type="PangoDirection"/>
      </return-value>
      <parameters>
        <parameter name="ch" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../pango/pango-bidi-type.c"
               line="283">a Unicode character</doc>
          <type name="gunichar" c:type="gunichar"/>
        </parameter>
      </parameters>
    </function>
    <function name="units_from_double"
              c:identifier="pango_units_from_double"
              version="1.16">
      <doc xml:space="preserve"
           filename="../pango/pango-utils.c"
           line="993">Converts a floating-point number to Pango units: multiplies
it by %PANGO_SCALE and rounds to nearest integer.</doc>
      <source-position filename="../pango/pango-types.h" line="120"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../pango/pango-utils.c"
             line="1000">the value in Pango units.</doc>
        <type name="gint" c:type="int"/>
      </return-value>
      <parameters>
        <parameter name="d" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../pango/pango-utils.c"
               line="995">double floating-point value</doc>
          <type name="gdouble" c:type="double"/>
        </parameter>
      </parameters>
    </function>
    <function name="units_to_double"
              c:identifier="pango_units_to_double"
              version="1.16">
      <doc xml:space="preserve"
           filename="../pango/pango-utils.c"
           line="1010">Converts a number in Pango units to floating-point: divides
it by %PANGO_SCALE.</doc>
      <source-position filename="../pango/pango-types.h" line="122"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../pango/pango-utils.c"
             line="1017">the double value.</doc>
        <type name="gdouble" c:type="double"/>
      </return-value>
      <parameters>
        <parameter name="i" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../pango/pango-utils.c"
               line="1012">value in Pango units</doc>
          <type name="gint" c:type="int"/>
        </parameter>
      </parameters>
    </function>
    <docsection name="utils">
      <doc xml:space="preserve"
           filename="../pango/pango-utils.c"
           line="32">The functions and utilities in this section are mostly used from Pango
backends and modules, but may be useful for other purposes too.</doc>
    </docsection>
    <function name="version" c:identifier="pango_version" version="1.16">
      <doc xml:space="preserve"
           filename="../pango/pango-utils.c"
           line="70">This is similar to the macro %PANGO_VERSION except that
it returns the encoded version of Pango available at run-time,
as opposed to the version available at compile-time.

A version number can be encoded into an integer using
PANGO_VERSION_ENCODE().</doc>
      <source-position filename="../pango/pango-utils.h" line="167"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../pango/pango-utils.c"
             line="80">The encoded version of Pango library
  available at run time.</doc>
        <type name="gint" c:type="int"/>
      </return-value>
    </function>
    <function name="version_check"
              c:identifier="pango_version_check"
              version="1.16">
      <doc xml:space="preserve"
           filename="../pango/pango-utils.c"
           line="111">Checks that the Pango library in use is compatible with the
given version. Generally you would pass in the constants
%PANGO_VERSION_MAJOR, %PANGO_VERSION_MINOR, %PANGO_VERSION_MICRO
as the three arguments to this function; that produces
a check that the library in use at run-time is compatible with
the version of Pango the application or module was compiled against.

Compatibility is defined by two things: first the version
of the running library is newer than the version
@required_major.required_minor.@required_micro. Second
the running library must be binary compatible with the
version @required_major.required_minor.@required_micro
(same major version.)

For compile-time version checking use PANGO_VERSION_CHECK().</doc>
      <source-position filename="../pango/pango-utils.h" line="175"/>
      <return-value transfer-ownership="none" nullable="1">
        <doc xml:space="preserve"
             filename="../pango/pango-utils.c"
             line="133">%NULL if the Pango library is compatible
  with the given version, or a string describing the version
  mismatch.  The returned string is owned by Pango and should not
  be modified or freed.</doc>
        <type name="utf8" c:type="const char*"/>
      </return-value>
      <parameters>
        <parameter name="required_major" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../pango/pango-utils.c"
               line="113">the required major version.</doc>
          <type name="gint" c:type="int"/>
        </parameter>
        <parameter name="required_minor" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../pango/pango-utils.c"
               line="114">the required minor version.</doc>
          <type name="gint" c:type="int"/>
        </parameter>
        <parameter name="required_micro" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../pango/pango-utils.c"
               line="115">the required major version.</doc>
          <type name="gint" c:type="int"/>
        </parameter>
      </parameters>
    </function>
    <function name="version_string"
              c:identifier="pango_version_string"
              version="1.16">
      <doc xml:space="preserve"
           filename="../pango/pango-utils.c"
           line="91">This is similar to the macro %PANGO_VERSION_STRING except that
it returns the version of Pango available at run-time, as opposed to
the version available at compile-time.</doc>
      <source-position filename="../pango/pango-utils.h" line="171"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../pango/pango-utils.c"
             line="98">A string containing the version of Pango library
  available at run time.
  The returned string is owned by Pango and should not be modified
  or freed.</doc>
        <type name="utf8" c:type="const char*"/>
      </return-value>
    </function>
    <docsection name="vertical">
      <doc xml:space="preserve"
           filename="../pango/pango-gravity.c"
           line="22">Since 1.16, Pango is able to correctly lay vertical text out.  In fact, it can
set layouts of mixed vertical and non-vertical text.  This section describes
the types used for setting vertical text parameters.

The way this is implemented is through the concept of
&lt;firstterm&gt;gravity&lt;/firstterm&gt;.  Gravity of normal Latin text is south.  A
gravity value of east means that glyphs will be rotated ninety degrees
counterclockwise.  So, to render vertical text one needs to set the gravity
and rotate the layout using the matrix machinery already in place.  This has
the huge advantage that most algorithms working on a #PangoLayout do not need
any change as the assumption that lines run in the X direction and stack in
the Y direction holds even for vertical text layouts.

Applications should only need to set base gravity on #PangoContext in use, and
let Pango decide the gravity assigned to each run of text.  This automatically
handles text with mixed scripts.  A very common use is to set the context base
gravity to auto using pango_context_set_base_gravity()
and rotate the layout normally.  Pango will make sure that
Asian languages take the right form, while other scripts are rotated normally.

The correct way to set gravity on a layout is to set it on the context
associated with it using pango_context_set_base_gravity().  The context
of a layout can be accessed using pango_layout_get_context().  The currently
set base gravity of the context can be accessed using
pango_context_get_base_gravity() and the &lt;firstterm&gt;resolved&lt;/firstterm&gt;
gravity of it using pango_context_get_gravity().  The resolved gravity is
the same as the base gravity for the most part, except that if the base
gravity is set to %PANGO_GRAVITY_AUTO, the resolved gravity will depend
on the current matrix set on context, and is derived using
pango_gravity_get_for_matrix().

The next thing an application may want to set on the context is the
&lt;firstterm&gt;gravity hint&lt;/firstterm&gt;.  A #PangoGravityHint instructs how
different scripts should react to the set base gravity.

Font descriptions have a gravity property too, that can be set using
pango_font_description_set_gravity() and accessed using
pango_font_description_get_gravity().  However, those are rarely useful
from application code and are mainly used by #PangoLayout internally.

Last but not least, one can create #PangoAttribute&lt;!----&gt;s for gravity
and gravity hint using pango_attr_gravity_new() and
pango_attr_gravity_hint_new().</doc>
    </docsection>
  </namespace>
</repository>
