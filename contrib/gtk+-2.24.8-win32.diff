2012-02-13	Nicolas Setton  <setton@adacore.com>

	* gdk/win32/gdkwindow-win32.c: This makes menus, popups and tooltips
	show above the windows task bar.
        For L213-019.

	Backport of <http://git.gnome.org/browse/gtk+/commit/?id=62b505174f16743833467290f49c1ae09c25448e>

	Gtk3: not needed, aleady there.

2012-01-12	Arnaud Charlet  <charlet@adacore.com>

	* modules/engines/ms-windows/msw_style.c (draw_themed_tab_button): Fix
	memory leak.
	For L109-030

	Gtk3: not needed, drawing engine completely rewritten in gtk3.

2012-01-06	Nicolas Setton	<setton@adacore.com>

	* gtkimcontextsimple.c (gtk_im_context_simple_filter_keypress): Do not
	discard key events with state CTRL + ALT, as some keyboards do use this
	key combination for legitimate character input.
	* gdkevents-win32.c(build_key_event_state): Detect CTRL + ALT as an
	equivalent group to ALT_GR.
	For K517-001.

	Gtk3: needed, ported.

2011-11-30	Arnaud Charlet  <charlet@adacore.com>

	* gdk/win32/gdkpixmap-win32.c (_gdk_pixmap_new): Add fallback code
	for 15/16bits depth display.
	For KB10-052. Backport of Gtk+ trunk, see
	https://bugzilla.gnome.org/show_bug.cgi?id=665013

	Gtk3: already in.

2011-07-26	Nicolas Setton  <setton@adacore.com>

	* gtk/gtkimcontextsimple.c (check_win32_special_cases): Fix handling
	of special cases for dead acute and dead diaeresis under Win32. For
	these characters followed by a space, emit an apostrophe and double
	quotes respectively.
	Submitted at https://bugzilla.gnome.org/show_bug.cgi?id=655357

	Gtk3: needed, ported.

2011-07-22	Arnaud Charlet  <charlet@adacore.com>

	* gdk/win32/gdkdisplay-win32.c (inner_clipboard_window_procedure): Fix
	build with --disable-debug

	Gtk3: not needed, --disable-debug works.

2011-04-10      Arnaud Charlet  <charlet@adacore.com>

	* modules/engines/ms-windows/msw_style.c (draw_tab_button): Always use
	custom code to draw tab.
	Submitted at https://bugzilla.gnome.org/show_bug.cgi?id=647461

	Gtk3: not needed, drawing engine completely rewritten in gtk3.

2010-02-01      Arnaud Charlet  <charlet@adacore.com>

	* gdk/win32/gdkdrawable-win32.c	(draw_segments): Ignore LineTo
	errors.

	Gtk3: not needed, gdkdrawable has been removed altogether.

2009-07-20	Arnaud Charlet	<charlet@adacore.com>

	* configure: Work around ^M handling on cygwin with igncr

	Gtk3: not needed, build works fine.

2006-06-05	Arnaud Charlet	<charlet@adacore.com>

	* gdk/win32/gdkgc-win32.c (_gdk_win32_gdkregion_to_hrgn): Disable
	harmless warning which is occurring often with Gtk+ >= 2.8.18

	Gtk3: not needed, gdkgc has been removed altogether.

2002-11-25	Arnaud Charlet	<charlet@adacore.com>

	* gdk/Makefile.in: Remove gdk-win32res.o dependency,
	since we do not want to use the default Gtk+ icon.

	Gtk3: not needed for now, icon not a problem in Gtk3.

--- gdk/Makefile.in.orig	2010-09-23 16:27:22.000000000 +0200
+++ gdk/Makefile.in	2010-10-08 11:06:41.724000000 +0200
@@ -664,8 +664,8 @@ libgdk_quartz_2_0_la_LIBADD = quartz/lib
 libgdk_quartz_2_0_la_LDFLAGS = $(LDADD)
 libgdk_win32_2_0_la_SOURCES = $(common_sources) gdkkeynames.c
 libgdk_win32_2_0_la_LIBADD = win32/libgdk-win32.la $(GDK_DEP_LIBS)
-libgdk_win32_2_0_la_DEPENDENCIES = win32/libgdk-win32.la win32/rc/gdk-win32-res.o gdk.def
-libgdk_win32_2_0_la_LDFLAGS = -Wl,win32/rc/gdk-win32-res.o -export-symbols $(srcdir)/gdk.def $(LDADD)
+libgdk_win32_2_0_la_DEPENDENCIES = win32/libgdk-win32.la gdk.def
+libgdk_win32_2_0_la_LDFLAGS = -export-symbols $(srcdir)/gdk.def $(LDADD)
 @HAVE_INTROSPECTION_TRUE@introspection_files = $(filter-out \
 @HAVE_INTROSPECTION_TRUE@	gdkkeysyms-compat.h, \
 @HAVE_INTROSPECTION_TRUE@	$(gdk_public_h_sources)) \
--- gdk/win32/gdkgc-win32.c.orig
+++ gdk/win32/gdkgc-win32.c	2006-06-05 14:56:59.515625000 +0200
@@ -1160,8 +1160,7 @@ _gdk_win32_gdkregion_to_hrgn (GdkRegion 
       if (rect->bottom > rgndata->rdh.rcBound.bottom)
 	rgndata->rdh.rcBound.bottom = rect->bottom;
     }
-  if ((hrgn = ExtCreateRegion (NULL, nbytes, rgndata)) == NULL)
-    WIN32_API_FAILED ("ExtCreateRegion");
+  hrgn = ExtCreateRegion (NULL, nbytes, rgndata);
 
   g_free (rgndata);
 
--- configure.old	2009-02-23 15:54:03.650263500 +0100
+++ configure	2009-02-23 15:54:54.711263500 +0100
@@ -36969,6 +36971,7 @@ if test "$ac_cs_awk_cr" = "a${ac_cr}b"; 
 else
   ac_cs_awk_cr=$ac_cr
 fi
+ac_cs_awk_cr=$ac_cr
 
 echo 'BEGIN {' >"$tmp/subs1.awk" &&
 _ACEOF
--- gdk/win32/gdkdrawable-win32.c.old	2010-01-31 18:48:07.679800000 +0100
+++ gdk/win32/gdkdrawable-win32.c	2010-01-31 18:48:32.429800000 +0100
@@ -1246,7 +1246,7 @@ draw_segments (GdkGCWin32 *gcwin32,
 
 	  GDK_NOTE (DRAW, g_print (" +%d+%d..+%d+%d", x1, y1, x2, y2));
 	  GDI_CALL (MoveToEx, (hdc, x1, y1, NULL)) &&
-	    GDI_CALL (LineTo, (hdc, x2, y2));
+	    LineTo (hdc, x2, y2);
 	}
 
       GDK_NOTE (DRAW, g_print ("\n"));
--- modules/engines/ms-windows/msw_style.c.old
+++ modules/engines/ms-windows/msw_style.c
@@ -2590,7 +2590,9 @@ draw_tab_button (GtkStyle *style,
 		 const gchar *detail,
 		 gint x, gint y, gint width, gint height, gint gap_side)
 {
+#if 0
   if (gap_side == GTK_POS_TOP || gap_side == GTK_POS_BOTTOM)
+#endif
     {
       /* experimental tab-drawing code from mozilla */
       RECT rect;
--- gdk/win32/gdkdisplay-win32.c.old	2011-07-22 12:06:42.618000000 +0200
+++ gdk/win32/gdkdisplay-win32.c	2011-07-22 12:07:29.311000000 +0200
@@ -386,7 +386,7 @@ inner_clipboard_window_procedure (HWND  
         if (_gdk_debug_flags & GDK_DEBUG_DND)
           {
             while ((nFormat = EnumClipboardFormats (nFormat)) != 0)
-              g_print ("%s ", _gdk_win32_cf_to_string (nFormat));
+              GDK_NOTE (DND, g_print ("%s ", _gdk_win32_cf_to_string (nFormat)));
           }
 
         GDK_NOTE (DND, g_print (" \n"));
--- gtk/gtkimcontextsimple.c.original	2011-07-26 15:59:06.000000000 +0200
+++ gtk/gtkimcontextsimple.c	2011-07-26 16:00:44.000000000 +0200
@@ -302,9 +302,9 @@ check_win32_special_cases (GtkIMContextS
       switch (context_simple->compose_buffer[0])
 	{
 	case GDK_dead_acute:
-	  value = 0x00B4; break;
+	  value = 0x0027; break;
 	case GDK_dead_diaeresis:
-	  value = 0x00A8; break;
+	  value = 0x0022; break;
 	}
       if (value > 0)
 	{
--- gdk/win32/gdkpixmap-win32.c.old	2011-11-10 18:38:03.000000000 +0100
+++ gdk/win32/gdkpixmap-win32.c	2012-01-12 12:53:16.705000000 +0100
@@ -138,7 +138,6 @@ _gdk_pixmap_new (GdkDrawable *drawable,
 		gint         depth)
 {
   HDC hdc;
-  HPALETTE holdpal = NULL;
   HBITMAP hbitmap;
   GdkPixmap *pixmap;
   GdkDrawableImplWin32 *drawable_impl;
@@ -147,6 +146,7 @@ _gdk_pixmap_new (GdkDrawable *drawable,
   gint window_depth;
   cairo_surface_t *dib_surface, *image_surface;
   cairo_format_t format;
+  guchar *bits;
 
   g_return_val_if_fail (drawable == NULL || GDK_IS_DRAWABLE (drawable), NULL);
   g_return_val_if_fail ((drawable != NULL) || (depth != -1), NULL);
@@ -175,6 +175,11 @@ _gdk_pixmap_new (GdkDrawable *drawable,
       format = CAIRO_FORMAT_A8;
       break;
 
+    case 15:
+    case 16:
+      format = CAIRO_FORMAT_RGB16_565;
+      break;
+
     case 24:
     case 32:
       format = CAIRO_FORMAT_RGB24;
@@ -203,16 +208,93 @@ _gdk_pixmap_new (GdkDrawable *drawable,
         gdk_drawable_set_colormap (pixmap, cmap);
     }
 
-  dib_surface = cairo_win32_surface_create_with_dib (format, width, height);
-  if (dib_surface == NULL)
+  if (depth != 15 && depth != 16)
     {
-      g_object_unref ((GObject *) pixmap);
-      return NULL;
+      dib_surface = cairo_win32_surface_create_with_dib (format, width, height);
+      if (dib_surface == NULL)
+	{
+	  g_object_unref ((GObject *) pixmap);
+	  return NULL;
+	}
+
+      /* We need to have cairo create the dibsection for us, because
+	 creating a cairo surface from a hdc only works for rgb24 format */
+      hdc = cairo_win32_surface_get_dc (dib_surface);
+
+      /* Get the bitmap from the cairo hdc */
+      hbitmap = GetCurrentObject (hdc, OBJ_BITMAP);
+
+      image_surface = cairo_win32_surface_get_image (dib_surface);
+      bits = cairo_image_surface_get_data (image_surface);
     }
+  else
+    {
+      /* 16 bpp not supported by win32 cairo surface */
+      struct {
+	BITMAPINFOHEADER bmiHeader;
+	union {
+	  WORD bmiIndices[256];
+	  DWORD bmiMasks[3];
+	  RGBQUAD bmiColors[256];
+	} u;
+      } bmi;
+      UINT iUsage;
+      HWND hwnd;
+      GdkVisual *visual;
+
+      if (GDK_IS_WINDOW (drawable))
+	hwnd = GDK_WINDOW_HWND (drawable);
+      else
+	hwnd = GetDesktopWindow ();
+      if ((hdc = GetDC (hwnd)) == NULL)
+	{
+	  WIN32_GDI_FAILED ("GetDC");
+	  g_object_unref ((GObject *) pixmap);
+	  return NULL;
+	}
+
+      bmi.bmiHeader.biSize = sizeof (BITMAPINFOHEADER);
+      bmi.bmiHeader.biWidth = width;
+      bmi.bmiHeader.biHeight = -height;
+      bmi.bmiHeader.biPlanes = 1;
+      bmi.bmiHeader.biBitCount = 16;
+      bmi.bmiHeader.biCompression = BI_BITFIELDS;
+      bmi.bmiHeader.biSizeImage = 0;
+      bmi.bmiHeader.biXPelsPerMeter =
+      bmi.bmiHeader.biYPelsPerMeter = 0;
+      bmi.bmiHeader.biClrUsed = 0;
+      bmi.bmiHeader.biClrImportant = 0;
+
+      iUsage = DIB_RGB_COLORS;
+      visual = gdk_visual_get_system ();
+      bmi.u.bmiMasks[0] = visual->red_mask;
+      bmi.u.bmiMasks[1] = visual->green_mask;
+      bmi.u.bmiMasks[2] = visual->blue_mask;
+
+      hbitmap = CreateDIBSection (hdc, (BITMAPINFO *) &bmi,
+				  iUsage, (PVOID *) &bits, NULL, 0);
+      GDI_CALL (ReleaseDC, (hwnd, hdc));
+      if (hbitmap == NULL)
+	{
+	  WIN32_GDI_FAILED ("CreateDIBSection");
+	  g_object_unref ((GObject *) pixmap);
+	  return NULL;
+	}
+
+      dib_surface = cairo_image_surface_create_for_data (bits,
+							 format, width, height,
+							 (width * 2 + 3) & ~3);
+
+      hdc = CreateCompatibleDC (NULL);
+      if (!hdc)
+	{
+	  WIN32_GDI_FAILED ("CreateCompatibleDC");
+	  g_object_unref ((GObject *) pixmap);
+	  return NULL;
+	}
 
-  /* We need to have cairo create the dibsection for us, because
-     creating a cairo surface from a hdc only works for rgb24 format */
-  hdc = cairo_win32_surface_get_dc (dib_surface);
+      SelectObject (hdc, hbitmap);
+    }
 
   /* We need to use the same hdc, because only one hdc
      can render to the same bitmap */
@@ -222,12 +304,8 @@ _gdk_pixmap_new (GdkDrawable *drawable,
   /* No need to create a new surface when needed, as we have one already */
   drawable_impl->cairo_surface = dib_surface;
 
-  /* Get the bitmap from the cairo hdc */
-  hbitmap = GetCurrentObject (hdc, OBJ_BITMAP);
   drawable_impl->handle = hbitmap;
-
-  image_surface = cairo_win32_surface_get_image (dib_surface);
-  pixmap_impl->bits = cairo_image_surface_get_data (image_surface);
+  pixmap_impl->bits = bits;
 
   gdk_win32_handle_table_insert (&GDK_PIXMAP_HBITMAP (pixmap), pixmap);
 
--- gtk/gtkimcontextsimple.c.orig	2012-02-07 11:41:01.000000000 +0100
+++ gtk/gtkimcontextsimple.c	2012-02-07 11:43:28.000000000 +0100
@@ -877,7 +877,11 @@ gtk_im_context_simple_filter_keypress (G
 	    event->keyval == GDK_ISO_Enter ||
 	    event->keyval == GDK_KP_Enter)))
 	{
-	  return FALSE;
+	  if ((event->state & GDK_MOD1_MASK) &&
+	      (event->state & GDK_CONTROL_MASK))
+	    return no_sequence_matches (context_simple, n_compose, event);
+	  else
+	    return FALSE;
 	}
     }
   
*** gdk/win32/gdkevents-win32.c.orig	2012-01-06 16:46:38.000000000 +0100
--- gdk/win32/gdkevents-win32.c	2012-01-06 16:47:13.000000000 +0100
***************
*** 671,676 ****
--- 671,679 ----
  	event->key.state |= GDK_CONTROL_MASK;
        if (key_state[VK_MENU] & 0x80)
  	event->key.state |= GDK_MOD1_MASK;
+ 
+       if ((key_state[VK_CONTROL] & 0x80) && (key_state[VK_MENU] & 0x80))
+         event->key.group = 1;
      }
  }
  
--- modules/engines/ms-windows/msw_style.c.old	2012-01-12 16:36:02.085000000 +0100
+++ modules/engines/ms-windows/msw_style.c	2012-01-12 16:36:03.161000000 +0100
@@ -2631,6 +2631,7 @@ draw_themed_tab_button (GtkStyle *style,
   gdk_cairo_set_source_pixmap (cr, pixmap, 0, 0);
   cairo_paint (cr);
   cairo_destroy (cr);
+  g_object_unref (pixmap);
 
   return TRUE;
 }
--- gdk/win32/gdkwindow-win32.c.orig	2012-02-13 19:46:48.000000000 +0100
+++ gdk/win32/gdkwindow-win32.c	2012-02-13 19:47:42.000000000 +0100
@@ -655,7 +655,7 @@ _gdk_window_impl_new (GdkWindow     *win
       /* A temp window is not necessarily a top level window */
       dwStyle = (_gdk_root == real_parent ? WS_POPUP : WS_CHILDWINDOW);
       dwStyle |= WS_CLIPCHILDREN | WS_CLIPSIBLINGS;
-      dwExStyle |= WS_EX_TOOLWINDOW;
+      dwExStyle |= WS_EX_TOOLWINDOW | WS_EX_TOPMOST;
       offset_x = _gdk_offset_x;
       offset_y = _gdk_offset_y;
       break;
@@ -1266,10 +1266,11 @@ show_window_internal (GdkWindow *window,
     }
 
   /* Sync STATE_ABOVE to TOPMOST */
-  if (((private->state & GDK_WINDOW_STATE_ABOVE) &&
+  if (GDK_WINDOW_TYPE (window) != GDK_WINDOW_TEMP &&
+      (((private->state & GDK_WINDOW_STATE_ABOVE) &&
        !(exstyle & WS_EX_TOPMOST)) ||
       (!(private->state & GDK_WINDOW_STATE_ABOVE) &&
-       (exstyle & WS_EX_TOPMOST)))
+       (exstyle & WS_EX_TOPMOST))))
     {
       API_CALL (SetWindowPos, (GDK_WINDOW_HWND (window),
 			       (private->state & GDK_WINDOW_STATE_ABOVE)?HWND_TOPMOST:HWND_NOTOPMOST,
@@ -3137,9 +3138,10 @@ update_style_bits (GdkWindow *window)
   new_style = old_style;
   new_exstyle = old_exstyle;
 
-  if (private->window_type == GDK_WINDOW_TEMP ||
-      impl->type_hint == GDK_WINDOW_TYPE_HINT_UTILITY)
-    new_exstyle |= WS_EX_TOOLWINDOW;
+  if (private->window_type == GDK_WINDOW_TEMP)
+    new_exstyle |= WS_EX_TOOLWINDOW | WS_EX_TOPMOST;
+  else if (impl->type_hint == GDK_WINDOW_TYPE_HINT_UTILITY)
+    new_exstyle |= WS_EX_TOOLWINDOW ;
   else
     new_exstyle &= ~WS_EX_TOOLWINDOW;
 
