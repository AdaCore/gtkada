2009-07-21  Arnaud Charlet  <charlet@adacore.com>

	* pango/pango-utils.c: Backport changes from 2.24.4 to address glib
	warning on API change.

2009-07-20  Arnaud Charlet  <charlet@adacore.com>

	* configure: Work around ^M handling on cygwin with igncr

2005-06-17  Arnaud Charlet  <charlet@adacore.com>

	* pango/pangowin32-fontmap.c: integrate patch from
	http://bugzilla.gnome.org/show_bug.cgi?id=110521
	Fix E607-006

--- pango/pangowin32-fontmap.c.orig	2008-02-25 08:11:40.000000000 +0100
+++ pango/pangowin32-fontmap.c	2008-04-17 18:28:43.250000000 +0200
@@ -183,7 +183,21 @@ pango_win32_inner_enum_proc (LOGFONTW   
    * Asian fonts with @ prepended to their name, ignore them.
    */
   if (lfp->lfFaceName[0] != '@')
-    pango_win32_insert_font (win32fontmap, lfp, FALSE);
+    {
+      /* Bold and italic variants can always (?) be simulated,
+       * so insert them.
+       */
+      lfp->lfItalic = 0;
+      lfp->lfWeight = FW_NORMAL;
+      pango_win32_insert_font (win32fontmap, lfp, FALSE); /* normal */
+      lfp->lfItalic = 1;
+      pango_win32_insert_font (win32fontmap, lfp, FALSE); /* italic */
+      lfp->lfItalic = 0;
+      lfp->lfWeight = FW_BOLD;
+      pango_win32_insert_font (win32fontmap, lfp, FALSE); /* bold */
+      lfp->lfItalic = 1;
+      pango_win32_insert_font (win32fontmap, lfp, FALSE); /* bold+italic */
+    }
 
   return 1;
 }
--- configure.old	2009-07-20 18:26:58.578000000 +0200
+++ configure	2009-07-20 18:27:11.026000000 +0200
@@ -23213,6 +23213,7 @@ if test "$ac_cs_awk_cr" = "a${ac_cr}b"; 
 else
   ac_cs_awk_cr=$ac_cr
 fi
+ac_cs_awk_cr=$ac_cr
 
 echo 'BEGIN {' >"$tmp/subs1.awk" &&
 _ACEOF
--- pango/pango-utils.c	2008-05-23 19:41:31.000000000 +0200
+++ pango/pango-utils.c	2009-02-07 00:49:34.000000000 +0100
@@ -427,7 +425,7 @@ pango_scan_string (const char **pos, GSt
   while (g_ascii_isspace (*p))
     p++;
 
-  if (!*p)
+  if (G_UNLIKELY (!*p))
     return FALSE;
   else if (*p == '"')
     {
@@ -659,18 +657,34 @@ pango_config_key_get (const char *key)
 
 #ifdef G_OS_WIN32
 
-/* DllMain function needed to tuck away the DLL name */
+/* DllMain function needed to tuck away the DLL handle */
+
+static HMODULE pango_dll;
+
+BOOL WINAPI
+DllMain (HINSTANCE hinstDLL,
+	 DWORD     fdwReason,
+	 LPVOID    lpvReserved)
+{
+  switch (fdwReason)
+    {
+    case DLL_PROCESS_ATTACH:
+      pango_dll = (HMODULE) hinstDLL;
+      break;
+    }
+
+  return TRUE;
+}
 
-G_WIN32_DLLMAIN_FOR_DLL_NAME(static, dll_name)
 #endif
 
 /**
  * pango_get_sysconf_subdirectory:
  *
  * On Unix, returns the name of the "pango" subdirectory of SYSCONFDIR
- * (which is set at compile time). On Win32, returns a subdirectory of
- * the Pango installation directory (which is deduced at run time from
- * the DLL's location, or stored in the Registry).
+ * (which is set at compile time). On Windows, returns the etc\pango
+ * subdirectory of the Pango installation directory (which is deduced
+ * at run time from the DLL's location).
  *
  * Return value: the Pango sysconf directory. The returned string should
  * not be freed.
@@ -682,9 +696,11 @@ pango_get_sysconf_subdirectory (void)
   static gchar *result = NULL;
 
   if (result == NULL)
-    result = g_win32_get_package_installation_subdirectory
-      (PACKAGE " " VERSION, dll_name, "etc\\pango");
-
+    {
+      gchar *root = g_win32_get_package_installation_directory_of_module (pango_dll);
+      result = g_build_filename (root, "etc\\pango", NULL);
+      g_free (root);
+    }
   return result;
 #else
   return SYSCONFDIR "/pango";
@@ -695,10 +711,9 @@ pango_get_sysconf_subdirectory (void)
  * pango_get_lib_subdirectory:
  *
  * On Unix, returns the name of the "pango" subdirectory of LIBDIR
- * (which is set at compile time). On Win32, returns the Pango
- * installation directory (which is deduced at run time from the DLL's
- * location, or stored in the Registry). The returned string should
- * not be freed.
+ * (which is set at compile time). On Windows, returns the lib\pango
+ * subdirectory of the Pango installation directory (which is deduced
+ * at run time from the DLL's location).
  *
  * Return value: the Pango lib directory. The returned string should
  * not be freed.
@@ -710,9 +725,17 @@ pango_get_lib_subdirectory (void)
   static gchar *result = NULL;
 
   if (result == NULL)
-    result = g_win32_get_package_installation_subdirectory
-      (PACKAGE " " VERSION, dll_name, "lib\\pango");
-
+    {
+      gchar *root = g_win32_get_package_installation_directory_of_module (pango_dll);
+      /* If we are running against an uninstalled copy of the Pango DLL,
+       * use the compile-time installation prefix.
+       */
+      if (g_str_has_suffix (root, "\\.libs"))
+	result = g_strdup (LIBDIR "/pango");
+      else
+	result = g_build_filename (root, "lib\\pango", NULL);
+      g_free (root);
+    }
   return result;
 #else
   return LIBDIR "/pango";
@@ -720,6 +743,25 @@ pango_get_lib_subdirectory (void)
 }
 
 
+static gboolean
+parse_int (const char *word,
+	   int        *out)
+{
+  char *end;
+  long val = strtol (word, &end, 10);
+  int i = val;
+
+  if (end != word && *end == '\0' && val >= 0 && val == i)
+    {
+      if (out)
+        *out = i;
+
+      return TRUE;
+    }
+
+  return FALSE;
+}
+
 /**
  * pango_parse_enum:
  * @type: enum type to parse, eg. %PANGO_TYPE_ELLIPSIZE_MODE.
@@ -728,10 +770,11 @@ pango_get_lib_subdirectory (void)
  * @warn: if %TRUE, issue a g_warning() on bad input.
  * @possible_values: place to store list of possible values on failure, or %NULL.
  *
- * Parses an enum type and stored the result in @value.
+ * Parses an enum type and stores the result in @value.
  *
  * If @str does not match the nick name of any of the possible values for the
- * enum, %FALSE is returned, a warning is issued if @warn is %TRUE, and a
+ * enum and is not an integer, %FALSE is returned, a warning is issued
+ * if @warn is %TRUE, and a
  * string representing the list of possible values is stored in
  * @possible_values.  The list is slash-separated, eg.
  * "none/start/middle/end".  If failed and @possible_values is not %NULL,
@@ -762,10 +805,10 @@ pango_parse_enum (GType       type,
       if (G_LIKELY (value))
 	*value = v->value;
     }
-  else
+  else if (!parse_int (str, value))
     {
       ret = FALSE;
-      if (warn || possible_values)
+      if (G_LIKELY (warn || possible_values))
 	{
 	  int i;
 	  GString *s = g_string_new (NULL);
@@ -1716,7 +1347,7 @@ pango_extents_to_pixels (PangoRectangle 
 void
 _pango_shape_shape (const char       *text,
 		    gint              n_chars,
-		    PangoRectangle   *shape_ink,
+		    PangoRectangle   *shape_ink G_GNUC_UNUSED,
 		    PangoRectangle   *shape_logical,
 		    PangoGlyphString *glyphs)
 {
