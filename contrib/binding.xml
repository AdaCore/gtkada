<?xml version="1.0"?>

<!--  This file overrides parts of the .gir files. -->

<GIR>
   <!-- ###################################################
        Gtk.Button
        ###################################################-->
   <package id="Gtk.Button">
      <doc screenshot="gtk-button"
           group="Buttons and Toggles"
           testgtk="create_buttons.adb">
This package implements a general button widget. This button can
be clicked on by the user to start any action.
This button does not have multiple states, it can just be temporarily
pressed while the mouse is on it, but does not keep its pressed state.

The gtk+ sources provide the following drawing that explains the role of
the various spacings that can be set for a button:
      </doc>

      <method id="gtk_button_new" binding="false"/>

      <method id="gtk_button_new_with_label" ada="Gtk_New">
         <parameter name="label" default='""'/>
      </method>

   </package>

   <!-- ###################################################
        Gtk.Frame
        ###################################################-->
   <package id="Gtk.Frame">
      <doc screenshot="gtk-frame" testgtk="create_frame.adb"
           group="Ornaments">
A Gtk_Frame is a simple border than can be added to any widget or
group of widget to enhance its visual aspect.
Optionally, a frame can have a title.

This is a very convenient widget to visually group related widgets (like
groups of buttons for instance), possibly with a title to explain the
purpose of this group.

A Gtk_Frame has only one child, so you have to put a container like for
instance a Gtk_Box inside if you want the frame to surround multiple
widgets.
      </doc>

      <method id="gtk_frame_new">
         <parameter name="label" default='""'/>
      </method>
   </package>

   <!-- ################################################
        Gtk.Label
        ################################################-->

   <package id="Gtk.Label">
      <doc screenshot="gtk-label" testgtk="create_label.adb"
           group="Display widgets">
A Gtk_Label is a light widget associated with some text you want
to display on the screen. You can change the text dynamically if
needed.

The text can be on multiple lines if you separate each line with
the ASCII.LF character. However, this is not the recommended way
to display long texts (see the Gtk_Text widget instead).

== Mnemonics ==

Labels may contain mnemonics. Mnemonics are underlined characters in the
label, used for keyboard navigation. Mnemonics are created by providing
string with an underscore before the mnemonic character, such as "_File",
to the functions gtk_new_with_mnemonic or set_text_with_mnemonic().

Mnemonics automatically activate any activatable widget the label is
inside, such as a Gtk_Button; if the label is not inside the mnemonic's
target widget, you have to tell the label about the target using
set_mnemonic_widget(). For instance:
    declare
       Button : Gtk_Button;
       Label  : Gtk_Label;
    begin
       Gtk_New (Button);
       Gtk_New_With_Mnemonic (Label, "_File");
       Add (Button, Label);
    end;
However, there exists a convenience function in Gtk.Button to create such
a button already.

== Markup ==

To make it easy to format text in a label (changing colors, fonts, etc.),
label text can be provided in a simple markup format. Here's how to create
a label with a small font:
     Gtk_New (Label, "&lt;small&gt;hello&lt;/small&gt;");

The markup must be valid, and &lt;&gt;&amp; characters must be escaped with
&amp;lt; &amp;gt; and &amp;amp;

Markup strings are just a convenient way to set the Pango_Attr_List on
label; Set_Attributes() may be a simpler way to set attributes in some
cases. Be careful though; Pango_Attr_List tends to cause
internationalization problems, unless you're applying attributes to the
entire string (i.e. unless you set the range of each attribute to [0,
G_MAXINT)). The reason is that specifying the start_index and end_index for
a Pango_Attribute requires knowledge of the exact string being displayed,
so translations will cause problems.

== Selectable labels ==

Labels can be made selectable with Set_Selectable. Selectable
labels allow the user to copy the label contents to the clipboard. Only
should be made selectable.
      </doc>

      <method id="gtk_label_new">
         <parameter name="str" default='""'/>
      </method>
      <method id="gtk_label_select_region">
         <parameter name="start_offset" default="-1"/>
         <parameter name="end_offset" default="-1"/>
      </method>
      <method id="gtk_label_get_selection_bounds"
         return_as_param="Has_Selection"/>
   </package>

   <!-- ################################################
        Gtk.Box, Gtk.Vbox, Gtk.Hbox
        ################################################-->
   <package id="Gtk.Box">
      <doc screenshot="gtk-box" testgtk="create_box.adb"
           group="Layout containers">
A box is a container that can have multiple children, organized either
horizontally or vertically. Two subtypes are provided, Gtk_Hbox and
Gtk_Vbox, to conform to the C API. In Ada, you do not need to
distinguish between the two, but note that the Gtk_Box type is conceptually
an abstract type: there is no way to create a "Gtk_Box", only ways to
create either an horizontal box, or a vertical box.

Children can be added to one of two positions in the box, either at the
beginning (ie left or top) or at the end (ie right or bottom). Each of
these positions can contain multiple widgets.

Every time a child is added to the start, it is placed to the right
(resp. the bottom) of the previous widget added to the start.

Every time a child is added to the end, it is placed to the left (resp.
the top) of the previous widget added to the end.

There are a number of parameters to specify the behavior of the box when
it is resized, and how the children should be reorganized and/or resized.

See the testgtk example in the GtkAda distribution to see concrete examples
on how all the parameters for the boxes work.
      </doc>
      <method id="gtk_box_pack_start">
         <parameter name="expand" default="True"/>
         <parameter name="fill" default="True"/>
         <parameter name="padding" default="0"/>
      </method>
      <method id="gtk_box_pack_end">
         <parameter name="expand" default="True"/>
         <parameter name="fill" default="True"/>
         <parameter name="padding" default="0"/>
      </method>
   </package>

   <package id="Gtk.Vbox" into="Gtk.Box">
      <type name="Gtk_Vbox" subtype="true"/>
      <method id="gtk_vbox_new" ada="Gtk_New_Vbox">
         <parameter name="homogeneous" default="False"/>
         <parameter name="spacing" default="0"/>
      </method>
      <method id="gtk_vbox_get_type" ada="Get_Vbox_Type" />
   </package>

   <package id="Gtk.Hbox" into="Gtk.Box">
      <type name="Gtk_Hbox" subtype="true"/>
      <method id="gtk_hbox_new" ada="Gtk_New_Hbox" >
         <parameter name="homogeneous" default="False"/>
         <parameter name="spacing" default="0"/>
      </method>
      <method id="gtk_hbox_get_type" ada="Get_Hbox_Type" />
   </package>

</GIR>
