SHELL=/bin/sh

.SUFFIXES:
.PHONY: clean-generic mostlyclean-generic \
	clean distclean mostlyclean maintainer-clean \
	install src tests

testgtk_dir = testgtk
doc_dir     = docs
example_dir = examples
projects_dir = projects
xml_dir      = xml
PYTHON       = python
CP           = cp -p -f
MKDIR        = mkdir -p
CHMOD        = chmod
INSTALL      = @INSTALL@
INSTALL_PROGRAM = @INSTALL_PROGRAM@

ifeq (${OS}, Windows_NT)
LN_S         = ${CP}
EXEEXT       = .ext
else
LN_S         = ln -s
EXEEXT       =
endif

TARGET=@TARGET@
ifeq ($(TARGET),)
GPRBUILD=gprbuild
else
GPRBUILD=gprbuild --target=${TARGET}
endif

# Number of parallel compilation
PROCESSORS   = 0

GPRBUILD_FULL = ${GPRBUILD} -j${PROCESSORS} -m -p

GETTEXT_INTL=@GETTEXT_INTL@
HAVE_GETTEXT=@HAVE_GETTEXT@
HAVE_OPENGL=@HAVE_OPENGL@
BUILD_SHARED=@BUILD_SHARED@
BUILD_STATIC=@BUILD_STATIC@
TARNAME=@PACKAGE_TARNAME@
VERSION=@PACKAGE_VERSION@
DESTDIR=
prefix=@prefix@
exec_prefix=@exec_prefix@
includedir=${DESTDIR}@includedir@
libdir=${DESTDIR}@libdir@
bindir=${DESTDIR}@bindir@
datadir=${DESTDIR}@datadir@
exampledir=${DESTDIR}${prefix}/share/examples/gtkada/testgtk
gpsdir=${DESTDIR}${prefix}/share/gps/plug-ins/

all:

install: install_dirs

ifeq (${BUILD_STATIC}, yes)
all: static
install: install/static
endif

ifeq (${BUILD_SHARED},yes)
all: relocatable
install: install/relocatable
endif

all: tools tests
static: build_library_type/static
relocatable: build_library_type/relocatable

tools:
	@echo "====== Building tools ====="
	${GPRBUILD_FULL} -XLIBRARY_TYPE=static -Psrc/tools/tools.gpr

build_library_type/%:  src/gtkada-intl.adb
	@echo "====== Building $(@F) libraries ====="
	${GPRBUILD_FULL} -XLIBRARY_TYPE=$(@F) -Psrc/gtkada_src.gpr
ifeq (${HAVE_OPENGL}, True)
	${GPRBUILD_FULL} -XLIBRARY_TYPE=$(@F) -Psrc/opengl/opengl.gpr
endif

src/gtkada-intl.adb: src/gtkada-intl.gpb Makefile
	gnatprep -DGETTEXT_INTL=$(GETTEXT_INTL) -DHAVE_GETTEXT=$(HAVE_GETTEXT) src/gtkada-intl.gpb $@

testgtk/opengl/view_gl.adb: testgtk/opengl/view_gl.gpb Makefile
	gnatprep -r -c -DHAVE_GL=${HAVE_OPENGL} -DWIN32=False testgtk/opengl/view_gl.gpb $@

tests: testgtk/opengl/view_gl.adb static
	@echo "====== Building tests ====="
	${GPRBUILD_FULL} -XLIBRARY_TYPE=static -Ptestgtk/testgtk.gpr

SRCDIRS=src/ src/generated/

install/static/%: force
	@${MKDIR} ${libdir}/${TARNAME}/static/
	${CP} src/lib/$(@F)/static/* ${libdir}/${TARNAME}/static/
	${CHMOD} ugo-w ${libdir}/${TARNAME}/static/*.ali

install/relocatable/%: force
	@${MKDIR} ${libdir}/${TARNAME}/relocatable/
	${CP} src/lib/${@F}/relocatable/* ${libdir}/${TARNAME}/relocatable
	${CHMOD} ugo-w ${libdir}/${TARNAME}/relocatable/*.ali
	cd ${libdir}; ${RM} lib$(@F)@SO_EXT@ lib$(@F)@SO_EXT@.${basename ${VERSION}} lib$(@F)@SO_EXT@.${VERSION}
ifneq (${OS},Windows_NT)
	${RM} ${libdir}/${TARNAME}/relocatable/lib$(@F)@SO_EXT@
	${RM} ${libdir}/${TARNAME}/relocatable/lib$(@F)@SO_EXT@.${basename ${VERSION}}
	cd ${libdir}/${TARNAME}/relocatable; ${LN_S} lib$(@F)@SO_EXT@.${VERSION} lib$(@F)@SO_EXT@
	cd ${libdir}/${TARNAME}/relocatable; ${LN_S} lib$(@F)@SO_EXT@.${VERSION} lib$(@F)@SO_EXT@.${basename ${VERSION}}
	cd ${libdir}; ${LN_S} ${TARNAME}/relocatable/lib$(@F)@SO_EXT@.${VERSION} lib$(@F)@SO_EXT@.${basename ${VERSION}}
	cd ${libdir}; ${LN_S} ${TARNAME}/relocatable/lib$(@F)@SO_EXT@.${VERSION} lib$(@F)@SO_EXT@.${VERSION}
else
	${CP} ${libdir}/${TARNAME}/relocatable/lib$(@F)@SO_EXT@ ${bindir}/
endif

ifeq (${HAVE_OPENGL},True)
install/static: install/static/gtkada_gl
install/relocatable: install/relocatable/gtkada_gl
endif

install/static: install/static/gtkada
install/relocatable: install/relocatable/gtkada

install_dirs:
	${MKDIR} ${includedir}/${TARNAME}
	${MKDIR} ${DESTDIR}${prefix}/lib/gnat/${TARNAME}
	${MKDIR} ${bindir}
	${MKDIR} ${gpsdir}
	${MKDIR} ${exampledir}

install:
	@${CP} ${wildcard ${addsuffix *.ad[bs], ${SRCDIRS}}} ${includedir}/${TARNAME}
	@cd ${includedir}/${TARNAME}; ls ${notdir ${wildcard ${addsuffix *.ad[bs], ${SRCDIRS}}}} > ${DESTDIR}${prefix}/lib/gnat/${TARNAME}/gtkada.lgpr

ifeq (${HAVE_OPENGL},True)
	@${CP} ${wildcard ${addsuffix *.ad[bs], src/opengl/}} ${includedir}/${TARNAME}
	@cd ${includedir}/${TARNAME}; ls ${notdir ${wildcard ${addsuffix *.ad[bs], src/opengl/}}} > ${DESTDIR}${prefix}/lib/gnat/${TARNAME}/gtkada_gl.lgpr
endif

	@# install executables
	${INSTALL_PROGRAM} src/tools/gtkada-config ${bindir}
	${INSTALL_PROGRAM} src/obj/tools/gtkada-dialog${EXEEXT} ${bindir}

	@# install testgtk
	-${INSTALL_PROGRAM} testgtk/testgtk${EXEEXT} ${exampledir}
	${CP} testgtk/*.ad? testgtk/*.xpm testgtk/*.png testgtk/*.gif testgtk/*.lwo testgtk/*.xml testgtk/*.css ${exampledir}

	$(MAKE) -C $(projects_dir) install
	$(MAKE) -C $(doc_dir) install

	@# install GPS support
	${CP} xml/gtkada.xml ${gpsdir}

	@echo '------------------------------------------------------------------'
	@echo '--  GtkAda has now been installed.                              --'
	@echo '--  To be able to use the library, you may need to update your  --'
	@echo '--  LD_LIBRARY_PATH or to run ldconfig. You may also need to    --'
	@echo '--  update your PATH to include gtkada-config in it.            --'
	@echo '------------------------------------------------------------------'

.PHONY: docs
docs:
	$(MAKE) -C docs

# Generate the binding automatically, through a python script
generate: force
	${RM} src/generated/*.ad?
	${PYTHON} contrib/binding.py \
	   --gir-file=contrib/GLib-2.0.gir \
	   --gir-file=contrib/GObject-2.0.gir \
		--gir-file=contrib/Gtk-3.0.gir \
		--gir-file=contrib/Gdk-3.0.gir \
		--gir-file=contrib/Pango-1.0.gir \
		--gir-file=contrib/Gio-2.0.gir \
		--xml-file=contrib/binding.xml \
		--ada-output=src/generated/tmp.ada \
		--c-output=src/misc_generated.c
	cd src/generated; gnatchop -gnat05 -q -w tmp.ada

clean-generic:
	-${RM} core
	-${RM} .\#*

mostlyclean-generic: clean-generic
	-${RM} Makefile
	-${RM} testgtk/Makefile

clean/%: force
	-gprclean -r -q -XLIBRARY_TYPE=$(@F) -Psrc/tools/tools.gpr
	-gprclean -r -q -XLIBRARY_TYPE=$(@F) -Psrc/opengl/opengl.gpr
	-gprclean -r -q -XLIBRARY_TYPE=$(@F) -Ptestgtk/testgtk.gpr

clean: clean-generic clean/static clean/relocatable

distclean: mostlyclean-generic
	-${RM} config.cache config.log config.status
	-$(MAKE) -C $(doc_dir) distclean
	-$(MAKE) -C $(projects_dir) distclean
	-$(MAKE) -C po distclean

mostlyclean: mostlyclean-generic

maintainer-clean: mostlyclean-generic
	-${RM} config.cache config.log config.status
	-${RM} configure

force:
