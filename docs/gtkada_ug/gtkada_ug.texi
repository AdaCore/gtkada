\input texinfo   @c -*-texinfo-*-
@c %**start of header
@setfilename gtkada.info
@settitle GtkAda User's Guide
@syncodeindex fn cp

@titlepage

@title GtkAda User's Guide
@subtitle Version 1.2.0
@subtitle Document revision level $Revision$
@subtitle Date: $Date$
@author E. Briot, J. Brobecker, A. Charlet, P. Durif

@page
@vskip 0pt plus 1filll

@copyright{} Copyright 1998-1999, Emmanuel Briot, Joel Brobecker, Arnaud Charlet

This document may be copied, in whole or in part, in any form or by any
means, as is or with alterations, provided that (1) alterations are clearly
marked as alterations and (2) this copyright notice is included
unmodified in any copy.

@end titlepage

@ifinfo
@node Top, Introduction, (dir), (dir)
@top GtkAda User's Guide

GtkAda User's Guide

GtkAda, the Ada 95 Gtk+ binding

Version 1.2.0

Date: $Date$

@copyright{} Copyright 1998-1999, Emmanuel Briot, Joel Brobecker, Arnaud Charlet

This document may be copied, in whole or in part, in any form or by any
means, as is or with alterations, provided that (1) alterations are clearly
marked as alterations and (2) this copyright notice is included
unmodified in any copy.

@menu
* Introduction::
* Getting started with GtkAda::
* Contents::
* Hierarchical composition of a window::
* Signal handling::
* Start an application with GtkAda::
* Draw in a widget::
* Resource files::
* General GTK documentation::
* Description of the GDK hierarchy::
* Description of the Glib hierarchy::
* Creating and Binding new widgets::
* Threads::
* How to report bugs::
* New tagged type scheme::
* Using tagged types to extend Gtk widgets::
* Support for Glade the Gtk GUI builder::
* A complete example::

 --- The Detailed Node Listing ---

Getting started with GtkAda

* How to build and install GtkAda::
* How to compile an application with GtkAda::
* Architecture::
* Widgets Hierarchy::

General GTK documentation

* Package Gtk.Main - high level routines::
* Package Gtk.Signal - connecting callbacks::
* Package Gtk.Tooltips::
* Package Gtk.Adjustment::
* Package Gtk.Widget::
* Package Gtk.Label::
* Package Gtk.Scrollbar::
* Package Gtk.Drawing_Area::
* Package Gtk.Editable::
* Package Gtk.Text::
* Package Gtk.Container::
* Package Gtk.Table::
* Package Gtk.Scrolled_Window::
* Package Gtk.Notebook::
* Package Gtk.Box::
* Package Gtk.Button::
* Package Gtk.Toggle_Button::
* Package Gtk.Check_Button::
* Package Gtk.Bin::
* Package Gtk.Event_Box::
* Package Gtk.Window::
* Package Gtk.File_Selection::
* Package Gtk.Enums::
* Package Gdk.Color::
* Package Gdk.Point::
* Package Gdk.Window::
* Package Gdk.Drawable::
* Package Gdk.GC::
* Package Gdk.Font::

@end menu
@end ifinfo

@node Introduction
@chapter Introduction
@noindent
The home page for GtkAda is

     @cite{http://ada.eu.org/gtkada/}

The home page for gtk is

     @cite{http://www.gtk.org}

This home page will always contain the latest news for this binding.

This is GtkAda version 1.2.0. This package is an Ada95 binding for
the Gimp Toolkit, which means this is a set of packages to allow you
to easily create some graphical interfaces under X11, using Ada95 as a
programming language.
 
This is the first stable version of this binding. From now on, major
version numbers will follow Gtk+ (e.g 1.2, 1.3), meaning that stable
versions of GtkAda will have major number 1.2 and development versions
will have number 1.3.
 
Every widget from gtk 1.2 has been implemented, and the test
program found in the gtk release has been reimplemented in Ada (have a
look at the @code{testgtk/} directory).
   
These functions were tested on the following systems:
@itemize @bullet
@item Linux version 2.0.35
@item SunOS 5.5.1
@item Dec Unix 4.0b
@end itemize
using the following compilers:
@itemize @bullet
@item Gnat 3.11p
@item Gnat 3.11b2
@end itemize

and the following versions of gtk:
@itemize @bullet
@item Gtk 1.1.16
@item Gtk 1.2.0
@end itemize

Although versions up to 0.2.1 were compatible with Gtk-1.0, this one is
Gtk-1.2 specific. If you are looking for a binding to
Gtk-1.0, please consider downloading GtkAda 0.2.1.

If you manage to use it on other systems (which should probably be
straightforward - just recompile GtkAda), please let us know so that
we can add to the above list.

This documentation is largely inspired from the Gtk+ documentation written
by Ian Main and Tony Gale.

GtkAda uses extensively the object oriented programming capabilities,
access to subprograms, exceptions and genericity (in particular to define
and handle callbacks) provided by Ada 95.
As a result, this library provides a secure, easy to use and extensible
toolset.

A complete example of the use of GtkAda is provided at the end of this document.

@node Getting started with GtkAda
@chapter Getting started with GtkAda

@menu
* A complete example::
* How to build and install GtkAda::
* How to compile an application with GtkAda::
* Architecture::
* Widgets Hierarchy::
@end menu

@node How to build and install GtkAda
@section How to build and install GtkAda

To build and install GtkAda, simply do the following steps:
@itemize @bullet
@item ./configure
@item make
@item make install
@end itemize

You then have to make sure that the dynamic library @code{libgtkada}
is known by your system, by typically running @code{ldconfig},
editing @code{/etc/ld.conf} or add the path that contains libgtkada
(by default @code{/usr/local/lib}, or @code{$prefix/lib} if you specified
the @code{--prefix} option during the configure step) to your 
@code{LD_LIBRARY_PATH}

@node How to compile an application with GtkAda
@section How to compile an application with GtkAda

A script, @code{gtkada-config}, is provided to simplify the build of an
application:
@example
gnatmake <main-file> `gtkada-config`
@end example

@node Architecture
@section Architecture
There are three major libraries: GTK, GDK and GLIB.
GTK is based on GDK and GLIB, GDK is based on GLIB and the underlying
windowing library (X-Window or Win32).

@example
+---------------------------------------------+
|             Your Application                |
|               +-----------------------------+
|               |            GTK              |
|       +-------+-----------------------------+
|       |           GDK                       |
+-------+--------------+--+-------------------+
|          GLIB        |  | X-Window / Win32  |
+----------------------+  +-------------------+
@end example

GTK is the most used interface but it is sometimes needed to use directly
GDK and GLIB.

The Gtk components (rep. Gdk and Glib) are available in packages whose
name start with @code{Gtk_} (resp. @code{Gdk_} and @code{Glib}).

GtkAda uses an object oriented approach of the components (called
@samp{widget}), whose hierarchy is given in the following section.

@node Widgets Hierarchy
@section Widgets Hierarchy

The simple rule followed by GtkAda to implement each widget is the following:
Given a widget @code{Gtk_Xxx}, its definition can be found in the package
@code{Gtk.Xxx} in the file @code{gtk-xxx.ads}.

For example, the @code{Gtk_Text} type is defined in package
@code{Gtk.Text} located in the file @code{gtk-text.ads}.

Here is the complete hierarchy of Gtk widgets:

@example
1    Gtk_Data
2       Gtk_Tooltips
2       Gtk_Adjustment

1    Gtk_Widget
2       Gtk_Separator
2       Gtk_Ruler
2       Gtk_Preview
2       Gtk_Preview_Info
2       Gtk_Progress_Bar
2       Gtk_Misc
3          Gtk_Arrow
3          Gtk_Image
3          Gtk_Label
4             Gtk_Tips_Query
3          Gtk_Pixmap

2       Gtk_Range
3          Gtk_Scale
3          Gtk_Scrollbar

2       Gtk_Drawing_Area
3          Gtk_Curve

2       Gtk_Editable
3          Gtk_Entry
4             Gtk_Spin_Button
3          Gtk_Text

2       Gtk_Container
3          Gtk_Box
4             Gtk_Button_Box
5                Gtk_VButton_Box
5                Gtk_HButton_Box
4             Gtk_Gamma_Curve
4             Gtk_Color_Selection
4             Gtk_Combo
4             Gtk_Status_Bar
3          Gtk_Button
4             Gtk_Option_Menu
4             Gtk_Toggle_Button
5                Gtk_Check_Button
6                   Gtk_Radio_Button
3          Gtk_Toolbar
3          Gtk_Table
3          Gtk_Scrolled_Window
3          Gtk_Paned
3          Gtk_Tree
3          Gtk_Menu_Shell
4             Gtk_Menu
4             Gtk_Menu_Bar
3          Gtk_List
3          Gtk_Fixed
3          Gtk_Notebook
3          Gtk_CList
3          Gtk_Bin
4             Gtk_Alignment
4             Gtk_Event_Box
4             Gtk_Frame
5                Gtk_Aspect_Frame
4             Gtk_Handle_Box
4             Gtk_Item
5                Gtk_Tree_Item
5                Gtk_List_Item
5                Gtk_Menu_Item
6                   Gtk_Check_Menu_Item
7                      Gtk_Radio_Menu_Item
4             Gtk_Viewport
4             Gtk_Window
5                Gtk_Color_Selection_Dialog
5                Gtk_File_Selection
5                Gtk_Dialog
6                   Gtk_Input_Dialog
@end example

The number represents the type's depth in the hierarchy.

@node Contents
@chapter Contents

The almost full set of widget that comes with Gtk 1.2 have been bound,
and you should be able to use all of them from your Ada program.

Although it is not quite complete yet, the Gdk binding (the low level
layer) will probably not evolve soon, unless some people (why not
you?) send us patches, or at least ask for specific functions.

It is important to know that only a subset of the gdk binding has
actually been tested, and therefore errors are still likely to appear.

The specs have been evolving a lot since version 0.5, but things
should really stabilize now. We hope that the changes in the next
versions will not break your code, but we certainly can not guaranty
anything.

We have tried to adopt a consistent naming scheme for Ada identifiers:
@itemize @bullet
@item The widget names are the same as in C, excepted that an underscore
sign (_) is used to separate words, e.g

@example
Gtk_Button   Gtk_Color_Selection_Dialog
@end example

@item The function names are the  same as in  C, ignoring the leading
@code{gtk_} and the widget name, e.g

@example
gtk_misc_set_padding        ->  Set_Padding
gtk_toggle_button_set_state ->  Set_State
@end example

@item All the enum types have been grouped in the gtk-enums.ads file

@item The only tricky part is for the callbacks, the timeout functions,
the idle functions, and the data that can be attached to every
Object. In these cases, we have used generic package to provide type
safety. Please have a look at the files in testgtk to see how these
functions are implemented.
@end itemize

@var{WARNING:} all the generic functions allocate some memory for
internal structures. This  memory is freed  by gtk itself,  by calling
some Ada functions. Therefore the generic packages  have to be instanciated
at library level, not  inside a subprogram,  so that the functions are
still defined when gtk needs to free the memory.

@node Hierarchical composition of a window
@chapter Hierarchical composition of a window

Typically, a window is created in which one can insert a box containing
either:
@itemize @bullet
@item Atomic components such as Button, Text, Label, @dots{}
@item Other boxes recursively.
@end itemize

Each component is a widget (Window Gadget), even the windows.

@node Signal handling
@chapter Signal handling

A signal is @samp{generated} by a widget when an action is performed by the
user on this widget. If the widget has one or more procedures associated
to this signal, they are then executed.
Such procedure will be called @code{callback} in the following.

To associate a callback to a widget, you have to connect this callback to
the specific widget specifying which signal will be handled. This is
done with the @code{Connect} function.

Depending on their type, the widgets can emit zero (e.g @code{Gtk_Label}),
one or several different signals.

A signal is identified by a string, e.g
@itemize @bullet
@item clicked
@item destroy
@item delete_event
@item configure_event
@item expose_event
@end itemize

For a specific widget, you can connect several callbacks on the same signal.
They will be executed in the order in which they have been connected.

One single callback can be connected several times on the same widget and even
on different widgets.

The choice made by GtkAda to use generics may look complicated but is
actually simple to use and more important, ensures type checking.

For example, you can connect on a @code{Gtk_Button} an action to
execute each time the button is clicked (signal @code{"clicked"}).
Here is how to do it:
@example
   Button : Gtk.Button.Gtk_Button;
   Cb_Id  : Glib.Guint;

begin
   Gtk.Button.Gtk_New (Widget => Button, Label => "Load");
   Cb_Id := Callbacks.Button_Callback.Connect (
      Obj  => Button,                     --  the emitting widget
      Name => "clicked",                  --  the generated signal
      Func => Callbacks.Load'Access);     --  the signal handler
@end example

The package @code{Button_Callback} is an instanciation of the
package @code{Gtk.Signal.Void_Callback}
with the type @code{Gtk.Button.Gtk_Button}.

This package defines an access type to a procedure
@code{Button_Callback.Callback} and the corresponding connect function
@code{Button_Callback.Connect}.

The callbacks provided to this function have to respect the
@code{Button_Callback.Callback} type. Below is an example of how to declare
this package.

@example
with Gtk.Signal;
with Gtk.Button;

package Callbacks is
   --  Define callbacks that apply on the widget that detected the
   --  corresponding signal.
   --  These callbacks have only one parameter: the widget itself

   package Button_Callback is new Gtk.Signal.Void_Callback
     (Widget_Type => Gtk.Button.Gtk_Button_Record);

   --  Which is equivalent to:
   --     package Button_Callback is
   --
   --        type Callback is access procedure
   --           (Widget : access Gtk.Button.Gtk_Button_Record);
   --        --  Definition of the Callback type
   --
   --        function Connect
   --          (Obj    : access Gtk.Button.Gtk_Button_Record'Class;
   --           Name   : in String;
   --           Func   : in Callback;
   --           After  : in Boolean := False)
   --           return Guint;
   --         --  Connect a callback to a button
   --
   --     end Button_Callback;

   procedure Load (Widget : access Gtk.Button.Gtk_Button_Record);
   --  The callback procedure

end Callbacks;
@end example

@code{Callbacks.Load} is a procedure that can be used to handle a signal
since its profile conforms with @code{Button_Callback.Callback}.

Note that @code{Callbacks.Load} must be declared at the library level
to ensure its lifetime and the presence of its variables during the execution
of the application.

@node Start an application with GtkAda
@chapter Start an application with GtkAda

You need to perform some initializations to start a GtkAda application:
@example
--  predefined units of the library
with Gtk.Rc;
with Gtk.Main;
with Gtk.Enums;
with Gtk.Window;
...
--  My units
with Callbacks;
...
procedure Application is
   procedure Create_Window is ...

begin
   --  Set the locale specific datas (e.g time and date format)
   Gtk.Main.Set_Locale;

   --  Initializes GtkAda
   Gtk.Main.Init;

   --  Load the resources
   Gtk.Rc.Parse ("application.rc");

   --  Create the main window
   Create_Window;

   --  Signal handling loop
   Gtk.Main.Main;
end Application;
@end example

the @code{Create_Window} procedure looks like

@example
   procedure Create_Window is
      Main_Window : Gtk.Window.Gtk_Window;
      ...
   begin
      Gtk.Window.Gtk_New
        (Window   => Main_Window,
         The_Type => Gtk.Enums.Window_Toplevel);

      --  From Gtk.Widget:
      Gtk.Window.Set_Title (Window => Main_Window, Title  => "Editor");

      --  Construct the window and connect various callbacks

      ...
      Gtk.Window.Show_All (Main_Window);
   end Create_Window;
@end example

@node Draw in a widget
@chapter Draw in a widget

To select a drawing area, use a @code{Gtk_Drawing} widget.
The drawing procedures apply to the Gdk window
(see @code{Gdk_Window} and @code{Gdk_Drawable}) of the
@code{Gtk_Drawing} widget via a graphic context (see @code{Gtk_Gc}).

Typically the code will look like:

@example
with Glib;
with Gdk.Window;
with Gdk.Drawable;
with Gdk.GC;
with Gdk.Font;

procedure Draw (Drawing : in out Gtk.Drawing_Area.Gtk_Drawing_Area) is
   Gdkw : Gdk.Window.Gdk_Window;
   GC   : Gdk.GC.Gdk_GC;
   Font : Gdk.Font.Gdk_Font;
   use type Glib.Gint;

begin
   -- Get the Gdk window

   Gdkw := Gtk.Drawing_Area.Get_Window (Drawing) ;

   -- Clear the window

   GDK.Window.Clear (Gdkw) ;

   -- Create a graphic context associated with this window

   Gdk.GC.Gdk_New (GC, Gdkw);

   -- Draw a line in this window

   Gdk.Drawable.Draw_Line
     (Drawable => Gdkw,
      GC => GC,
      X1 =>   0, Y1 =>   0,
      X2 => 100, Y2 => 100);

   -- Draw an arc

   Gdk.Drawable.Draw_Arc
     (Drawable => Gdkw,
      Gc       => gc,
      Filled   => True,
      X        => 100,
      Y        => 100,
      Width    => 200,
      Height   => 100,
      Angle1   => 0 * 64,
      Angle2   => 270 * 64);

   -- Ask for a given font

   Gdk.Font.Load (Font, "-adobe-courier-medium-i-*-*-15-*-*-*-*-*-*-*");
   Gdk.Drawable.Draw_Text
     (Drawable    => Gdkw,
      Font        => Font,
      Gc          => gc,
      X           => 50,
      Y           => 50,
      Text        => "Hello World");
   Gdk.Font.Destroy (Font);
   Gdk.GC.Destroy (GC);
end Draw;
@end example

@node Resource files
@chapter Resource files

Resource files let you parametrize the aspect of the widgets of a GtkAda
application without having to recompile it.
The file @code{"application.rc"} of the previous example is a resource file.

A resource file needs to be loaded (@code{Gtk.Rc.Parse}) @var{before} setting
the corresponding window.

In this file, it is possible to specify the visual characteristics of the
widgets (colors, fonts, @dots{}).
Under X, the @code{xfontsel} command allows you to select easily a font.
The FontSelection widget is also a simple way to select fonts.

Here is an example of a resource file:
@example
# application.rc
#
# resource file for "Application"

# Buttons style
style "button"
@{
# BackGround Colors
#                  Red  Green  Blue
  bg[PRELIGHT] = @{ 0.0,  0.75, 0.0 @} # Green when the mouse is on
                                     # the button
  bg[ACTIVE]   = @{ 0.75, 0.0,  0.0 @} # Red on click
# ForeGround Colors
#                  Red  Green  Blue
  fg[PRELIGHT] = @{ 1.0,  1.0,  1.0 @} # White when the mouse is on
                                     # the button
  fg[ACTIVE]   = @{ 1.0,  1.0,  1.0 @} # White on click
@}

# All the buttons will have the style "button"
widget_class "*GtkButton*" style "button"

# Text style
style "text"
@{
  font = "-adobe-courier-medium-r-normal-*-15-*-*-*-*-*-*-*"
  text[NORMAL] = @{ 0.0, 0.0, 0.0 @} # black
  fg[NORMAL]   = @{ 0.0, 0.0, 0.0 @} # black
  base[NORMAL] = @{ 1.0, 1.0, 1.0 @} # white : background color
@}

# All Gtk_Text will have the "text" style
widget_class "*GtkText" style "text"
@end example

@node General GTK documentation
@chapter General GTK documentation

This section describes briefly how to use the GTK toolset. This is largely
inspired from the GTK+ documentation. It is recommended that you read this
documentation for all general GTK topics.

The GTK toolkit is based on two lower level layers: GDK and Glib.
It is sometimes needed to call these layers directly. @xref{Description of the GDK hierarchy} for a brief description of these packages.

Each widget is declared in a separate package.
The file, package and type names can be automatically retrieved one from each
other. For example, the type @code{Gtk_Text} is defined in the package
@code{Gtk.Text} which is defined in the file @code{gtk-text.ads}.

You may want to look at the sources themselves to find informations on a
specific widget.

@menu
* Package Gtk.Main - high level routines::
* Package Gtk.Signal - connecting callbacks::
* Package Gtk.Tooltips::
* Package Gtk.Adjustment::
* Package Gtk.Widget::
* Package Gtk.Label::
* Package Gtk.Scrollbar::
* Package Gtk.Drawing_Area::
* Package Gtk.Editable::
* Package Gtk.Text::
* Package Gtk.Container::
* Package Gtk.Table::
* Package Gtk.Scrolled_Window::
* Package Gtk.Notebook::
* Package Gtk.Box::
* Package Gtk.Button::
* Package Gtk.Toggle_Button::
* Package Gtk.Check_Button::
* Package Gtk.Bin::
* Package Gtk.Event_Box::
* Package Gtk.Window::
* Package Gtk.File_Selection::
* Package Gtk.Enums::
* Package Gdk.Color::
* Package Gdk.Point::
* Package Gdk.Window::
* Package Gdk.Drawable::
* Package Gdk.GC::
* Package Gdk.Font::
@end menu

@node Package Gtk.Main - high level routines
@section Package Gtk.Main - high level routines

These procedures are described in the order in which they should be called:

@itemize @bullet
@item
@code{Set_Locale} must be called first. It sets the various datas specific to
your location, e.g time, date, decimal formats.
@example
procedure Set_Locale;
@end example

@item
@code{Init} initializes the Gtk @var{engine}. Among other things, it
parses the arguments provided on the command line.
@example
procedure Init;
@end example

@item
The signal handling loop: call it once the interface has been set-up.
@example
procedure Main;
@end example

@item
To interrupt the signal handling loop. Usually called in a callback to stop
the application.
@example
procedure Main_Quit;
@end example
@end itemize

@node Package Gtk.Signal - connecting callbacks
@section Package Gtk.Signal - connecting callbacks

This section describes three of the generic packages provided by
@code{Gtk.Signal}.
You can connect as many callback per signal and widgets as needed.
For a given widget and signal, the various callbacks will be executed
in the order in which they have been connected.

On the other hand, a same callback routine can be connected on several
widgets and signals.
The @code{Connect} function returns an integer (@code{Glib.Guint}) that
identifies the connection, allowing you to destroy it later by giving
this identifier and the appropriate widget.
It is also possible to destroy all the connections of a widget.

This first package (@code{Void_Callback}) provides a way to create callbacks
that has no specific parameter other than the emitting widget:
@example
generic
   type Base_Type is new Gtk.Object.Gtk_Object_Record with private;

package Void_Callback is

   type Callback is access procedure (Widget : access Base_Type);

   function Connect
     (Obj    : access Base_Type'Class;
      Name   : in String;
      Func   : in Callback;
      After  : in Boolean := False)
      return Guint;
end Void_Callback;
@end example

The callback procedure that can be connected with the @code{Connect} function
must follow the profile defined by the @code{Callback} type.
The object parameter will be the widget that emitted the signal.
For the @code{Connect} function, the parameters are:

@itemize @bullet
@item [Obj] The widget associated with the signal,
@item [Name] The signal name (@code{"clicked", "destroy", "delete_event"}, @dots{}),
@item [Func] A pointer to the callback routine,
@item [After] Indicates whether the callback should be executed after the
 automatic widget's class behavior.
@end itemize

This second package (@code{Callback}) whose callbacks accept an additional
data dynamically allocated during the call to @code{Connect} and whose
initial value is set by the @code{Func_Data} parameter

@example
generic
   type Base_Type is new Gtk.Object.Gtk_Object_Record with private;

   type Data_Type (<>) is private;
   --  The type of the data for the callback
   --  This type need not be an access type (as opposed as what
   --  happens in C). A new access is created by the connect function.

package Callback is

   type Callback is access procedure
     (Widget : access Base_Type;
      Data   : in Data_Type);
   --  Callback function for Signal_Connect below
   --  Data is now an 'in' parameter, since you are anyway not
   --  modifying the original data you gave, but a copy of it.

   function Connect
     (Obj       : access Base_Type'Class;
      Name      : in String;
      Func      : in Callback;
      Func_Data : in Data_Type;
      After     : in Boolean := False)
      return Guint;
end Callback;
@end example

The last package @code{Object_Callback}
provides callbacks that can be connected on any kind of widget.
(the @code{Obj} parameter can be any kind of object),
but the callback parameter, as for previous packages will still have to
be the same as the one specified during the instanciation.

At run time, the callback will get the widget parameter
@code{Slot_Object} that has been given to @code{Connect}.

This is for example useful when you need to handle a button click
depending on the window that contains the button instead of the button itself.

@example
generic
   type Base_Type is new Gtk.Object.Gtk_Object_Record with private;

package Object_Callback is
   type Callback is access procedure (Object : access Base_Type);

   function Connect
     (Obj         : access Gtk.Object.Gtk_Object_Record'Class;
      Name        : in String;
      Func        : in Callback;
      Slot_Object : access Base_Type'Class;
      After       : in Boolean := False)
      return Guint;
end Object_Callback;
@end example

Here a sample code extracted from a text editor that corresponds to the
text loading operation.
The @code{Callbacks.Load} procedure is a callback executed when the user
clicks on the ``Load'' button. This callback will create the file selection
window (@code{Gtk_File_Selection}) and make it modal to force the user to
select a file before continuing to work.
When the user clicks on the ``Ok'' button of the file selection window,
the @code{Callbacks.Ok} procedure is called with the parameter selection
window.

@example
with Gtk.Button;
package Callbacks is

   procedure Load (Widget : in out Gtk.Button.Gtk_Button);
   --  Callback for the ``Load'' button og the text editor

end Callbacks;

with Gtk.Signal, Gtk.Window, Gtk.Main;
with Gtk.Widget, Gtk.File_Selection, Glib;
with Editor;

package body Callbacks is

   package Files_Cb is new Gtk.Signal.Object_Callback
     (Gtk.File_Selection.Gtk_File_Selection);

   --  A callback of type File_Cb.Callback corresponding to the
   --  Cancel button of the file selection window.

   procedure Cancel
     (Files : in out Gtk.File_Selection.Gtk_File_Selection) is
   begin
      --  Hide the file selection window

      Gtk.File_Selection.Hide (Files);

      --  This window is no longer modal

      Gtk.Main.Grab_Remove (Files);
   end Cancel;

   -- A callback of type File_Cb.Callback corresponding to the ``OK''
   -- button of the file selection window.

   procedure Ok
     (Files : in out Gtk.File_Selection.Gtk_File_Selection) is
   begin
      Editor.Load (Gtk.File_Selection.Get_Filename (Files));
      Gtk.File_Selection.Hide (Files);
      Gtk.Main.Grab_Remove (Files);
   end Ok;

   -- Internal procedure to initialize a Gtk_File_Selection

   procedure Initialize_File_Selection
     (Files : in out Gtk.File_Selection.Gtk_File_Selection;
      Label : String;
      OK_CB : Files_Cb.Callback)
   is
      Cb_Id : Glib.Guint;
   begin
      Gtk.File_Selection.Gtk_New (Files, Label);

      --  Hide the create/remove buttons

      Gtk.File_Selection.Hide_Fileop_Buttons (Files);
      Cb_Id := Files_Cb.Connect (
         Obj         => Gtk.File_Selection.Get_Ok_Button (Files),
         --  The signal is related to the OK button

         Name        => "clicked", -- Event to detect
         Func        => OK_CB,     -- Callback procedure
         Slot_Object => Files);    -- Parameter given to the callback

      Cb_Id := Files_Cb.Connect (
         Obj         => Gtk.File_Selection.Get_Cancel_Button (Files),
         Name        => "clicked",
         Func        => Cancel'access,
         Slot_Object => Files);
   end Initialize_File_Selection;

   -- The file selection window

   Input_File_Sel : Gtk.File_Selection.Gtk_File_Selection;
   Input_File_Sel_Existe : Boolean := False;

   -- The ``Load'' callback body

   procedure Load (Widget : in out Gtk.Button.Gtk_Button) is
   begin
      if not Input_File_Sel_Existe then
         Initialize_File_Selection
           (Input_File_Sel, "File to load ?", OK'Access);
         Input_File_Sel_Existe := True;
      end if ;

      Gtk.Main.Grab_Add (Input_File_Sel);

      --  Show the file selection window

      Gtk.File_Selection.Show (Input_File_Sel);
   end Load;

end Callbacks;
@end example

Two procedures to destroy a specific or any connection.

@example
procedure Disconnect
  (Object     : access Gtk.Object.Gtk_Object_Record'Class;
   Handler_Id : in Guint);

procedure Handlers_Destroy
  (Obj : access Object.Gtk_Object_Record'Class);
@end example

@c gdk:   type Root_Type is abstract tagged

@c Package Gtk.Style:
@c    type Gtk_Style_Record is new Root_Type with private;
@c    type Gtk_Style is access all Gtk_Style_Record'Class;

@c Package Gtk.Object:
@c    type Gtk_Object_Record is new Root_Type with private;
@c    type Gtk_Object is access all Gtk_Object_Record'Class;

@c Package Gtk.Data:
@c    type Gtk_Data_Record is new Object.Gtk_Object_Record with private;
@c    type Gtk_Data is access all Gtk_Data_Record'Class;

@node Package Gtk.Tooltips
@section Package Gtk.Tooltips
@example
type Gtk_Tooltips_Record is new Gtk.Data.Gtk_Data_Record with private;
type Gtk_Tooltips is access all Gtk_Tooltips_Record'Class;
@end example

The message hint that pops up in a little window when the mouse stay
on a widget long enough without moving.

@node Package Gtk.Adjustment
@section Package Gtk.Adjustment
@example
type Gtk_Adjustment_Record is new Data.Gtk_Data_Record with private;
type Gtk_Adjustment is access all Gtk_Adjustment_Record'Class;
@end example

These objects allow you to create a link between a scrollbar and a
scrollable widget (text, scrolled_window).

@node Package Gtk.Widget
@section Package Gtk.Widget
@example
type Gtk_Widget_Record is new Object.Gtk_Object_Record with null record;
type Gtk_Widget is access all Gtk_Widget_Record'Class;
@end example

Root of the widget tree. Here are a few useful primitives that are inherited
by all the widgets.

@itemize @bullet
@item Destroy the widget
@example
procedure Destroy (Widget : access Gtk_Widget_Record);
@end example

@item The Widget can be referenced in a resource file under a specified name

@example
procedure Set_Name
  (Widget : access Gtk_Widget_Record; Name : in String);
@end example

@item The @code{Widget} is displayed

@example
procedure Show (Widget : access Gtk_Widget_Record);
@end example

@item The @code{Widget} and its components are displayed

@example
procedure Show_All (Widget : access Gtk_Widget_Record);
@end example

@item Hide the @code{Widget}.

@example
procedure Hide (Widget : access Gtk_Widget_Record);
@end example

@item To manipulate the color tables (see, e.g @code{Gdk.Color.White})

@example
function Get_Colormap (Widget : access Gtk_Widget_Record)
  return Gdk_Colormap;

function Get_Default_Colormap return Gdk_Colormap;

procedure Set_Default_Colormap
  (Widget : access Gtk_Widget_Record; Cmap : Gdk_Colormap);
@end example
@end itemize

To (de)associate a Gdk_Window to a widget:
@example
procedure Realize   (Widget : access Gtk_Widget_Record);
procedure Unrealize (Widget : access Gtk_Widget_Record);
function  Realized_Is_Set (Widget : access Gtk_Widget_Record'Class)
  return Boolean;
@end example

You need to use @code{Realize} when for example you want to insert text in a
@code{Gtk_Text} before calling @code{Show}.

To make a widget (un)sensitive so that it won't generate any signal:
@example
procedure Set_Sensitive
  (Widget    : access Gtk_Widget_Record;
   Sensitive : in Boolean := True);
@end example
@code{Set_Sensitive} can be used to temporarily disable a button or a
container. When it is not sensible, its visual aspect changes.

To know whether a widget has no parent (usually a main window):
@example
function Toplevel_Is_Set (Widget : access Gtk_Widget_Record'Class)
  return Boolean;
@end example

To get the parent widget:
@example
function Get_Parent (Widget : access Gtk_Widget_Record)
  return Gtk_Widget;
@end example

To get the low level window (@code{Gdk_Window}) associated with a widget:
@example
function Get_Window (Widget : access Gtk_Widget_Record)
  return Gdk.Window.Gdk_Window;
@end example

@c Package Gtk.Separator:
@c    type Gtk_Separator_Record is new Gtk.Widget.Gtk_Widget_Record with private;
@c    type Gtk_Separator is access all Gtk_Separator_Record'Class;

@c Package Gtk.Ruler:
@c    type Gtk_Ruler_Record is new Gtk.Widget.Gtk_Widget_Record with private;
@c    type Gtk_Ruler is access all Gtk_Ruler_Record'Class;

@c Package Gtk.Preview:
@c    type Gtk_Preview_Record is new Gtk.Widget.Gtk_Widget_Record with private;
@c    type Gtk_Preview is access all Gtk_Preview_Record'Class;

@c Package Gtk.Preview:
@c    type Gtk_Preview_Info_Record is new Gtk.Widget.Gtk_Widget_Record
@c      with private;
@c    type Gtk_Preview_Info is access all Gtk_Preview_Info_Record'Class;

@c Package Gtk.Progress_Bar:
@c    type Gtk_Progress_Bar_Record is new Gtk.Progress.Gtk_Progress_Record
@c      with private;
@c    type Gtk_Progress_Bar is access all Gtk_Progress_Bar_Record'Class;

@c Package Gtk.Misc:
@c    type Gtk_Misc_Record is new Widget.Gtk_Widget_Record with private;
@c    type Gtk_Misc is access all Gtk_Misc_Record'Class;

@c Package Gtk.Pixmap:
@c    type Gtk_Pixmap_Record is new Gtk.Misc.Gtk_Misc_Record with private;
@c    type Gtk_Pixmap is access all Gtk_Pixmap_Record'Class;

@c Package Gtk.Arrow:
@c    type Gtk_Arrow_Record is new Gtk.Misc.Gtk_Misc_Record with private;
@c    type Gtk_Arrow is access all Gtk_Arrow_Record'Class;

@node Package Gtk.Label
@section Package Gtk.Label
@example
type Gtk_Label_Record is new Misc.Gtk_Misc_Record with private;
type Gtk_Label is access all Gtk_Label_Record'Class;
@end example

To put and then modify a string.
A @code{Gtk_Label} can emit no signal (see @code{Event_Box} if you want to
connect a signal)

Create a new label
@example
procedure Gtk_New (Label : out Gtk_Label; Str : in String);
@end example

Change the label string
@example
procedure Set_Text (Label : access Gtk_Label_Record; Str : in String);
@end example

@c Package Gtk.Tips_Query:
@c    type Gtk_Tips_Query_Record is new Gtk.Label.Gtk_Label_Record with private;
@c    type Gtk_Tips_Query is access all Gtk_Tips_Query_Record'Class;

@c Package Gtk.Image:
@c    type Gtk_Image_Record is new Gtk.Misc.Gtk_Misc_Record with private;
@c    type Gtk_Image is access all Gtk_Image_Record'Class;

@c Package Gtk.GRange:
@c    type Gtk_Range_Record is new Gtk.Widget.Gtk_Widget_Record with private;
@c    type Gtk_Range is access all Gtk_Range_Record'Class;

@c Package Gtk.Scale:
@c    type Gtk_Scale_Record is new Gtk.GRange.Gtk_Range_Record with private;
@c    type Gtk_Scale is access all Gtk_Scale_Record'Class;

@node Package Gtk.Scrollbar
@section Package Gtk.Scrollbar
@example
type Gtk_Scrollbar_Record is new
  Gtk.GRange.Gtk_Range_Record with private;
type Gtk_Scrollbar is access all Gtk_Scrollbar_Record'Class;
@end example

Horizontal or vertical scrollbars that can be associated with the
@code{Widget} you want to scroll using
@code{Adjustment} (see, eg @code{Gtk.Text.Get_Vadj}).

@example
procedure Gtk_New_Hscrollbar
  (Widget     : out Gtk_Scrollbar;
   Adjustment : in Gtk.Adjustment.Gtk_Adjustment);

procedure Gtk_New_Vscrollbar
  (Widget     : out Gtk_Scrollbar;
   Adjustment : in Gtk.Adjustment.Gtk_Adjustment);
@end example

@node Package Gtk.Drawing_Area
@section Package Gtk.Drawing_Area
@example
type Gtk_Drawing_Area_Record is new Gtk.Widget.Gtk_Widget_Record
  with private;
type Gtk_Drawing_Area is access all Gtk_Drawing_Area_Record'Class;

procedure Gtk_New (Widget : out Gtk_Drawing_Area);
procedure Size
  (Darea  : access Gtk_Drawing_Area_Record;
   Width  : in Glib.Gint;
   Height : in Glib.Gint);
@end example

You can get the @code{Gdk_Window} associated with a widget to draw in it
using the GDK primitives of @code{Gdk_Drawable} which is a @code{subtype}
of @code{Gdk_Window}, see the GDK section.

This window exists only when the widget is actually displayed, e.g after the
call to @code{Show} of the window containing the
@code{Gtk_Drawing_Area}.

It is possible to draw in the initialization procedure after the procedure
@code{Show} or when the @code{Gtk.Main.Main} loop is running,
on the @code{"configure_event"} signal.

A @code{Gtk_Drawing_Area} is a very low level object,
in particular when it is hidden by another window and then exposed, it
is not redrawn automatically. It is up to the application to handle the
expose event, by connecting a callback on the
@code{"expose_event"} signal.

@c Package Gtk.Curve:
@c    type Gtk_Curve_Record is new Gtk.Drawing_Area.Gtk_Drawing_Area_Record
@c      with private;
@c    type Gtk_Curve is access all Gtk_Curve_Record'Class;

@node Package Gtk.Editable
@section Package Gtk.Editable
@example
type Gtk_Editable_Record is new
  Gtk.Widget.Gtk_Widget_Record with private;
type Gtk_Editable is access all Gtk_Editable_Record'Class;
@end example

Parent of the editable widgets, such as @code{Text}.

@c Package Gtk.GEntry:
@c    type Gtk_Entry_Record is new Gtk.Editable.Gtk_Editable_Record with private;
@c    type Gtk_Entry is access all Gtk_Entry_Record'Class;

@c Package Gtk.Spin_Button:
@c    type Gtk_Spin_Button_Record is new Gtk.GEntry.Gtk_Entry_Record with private;
@c    type Gtk_Spin_Button is access all Gtk_Spin_Button_Record'Class;

@node Package Gtk.Text
@section Package Gtk.Text
To manipulate text.
@example
type Gtk_Text_Record is new
  Gtk.Editable.Gtk_Editable_Record with private;
type Gtk_Text is access all Gtk_Text_Record'Class;
@end example

End of line are marked by a @code{Ascii.LF}.
When the application modify the text (using, e.g @code{Insert}), it can first
freeze it (@code{Freeze}) to prevent any change from the user, then
unfreeze it (@code{Thaw}) to allow the user to interact again.

@example
procedure Gtk_New
  (Widget : out Gtk_Text;
   Hadj   : access Gtk.Adjustment.Gtk_Adjustment_Record'Class
     := Gtk.Adjustment.Null_Adjustment;
   Vadj   : access Gtk.Adjustment.Gtk_Adjustment_Record'Class
     := Gtk.Adjustment.Null_Adjustment);

procedure Freeze (Text : access Gtk_Text_Record);

procedure Thaw (Text : access Gtk_Text_Record);

function Get_Hadj (Widget : access Gtk_Text_Record)
  return Gtk.Adjustment.Gtk_Adjustment;

function Get_Vadj (Widget : access Gtk_Text_Record)
  return Gtk.Adjustment.Gtk_Adjustment;

function Get_Length (Text : in Gtk_Text) return Guint;

procedure Insert
  (Text   : access Gtk_Text_Record;
   Font   : in Gdk.Font.Gdk_Font'Class;
   Fore   : in Gdk.Color.Gdk_Color;
   Back   : in Gdk.Color.Gdk_Color;
   Chars  : in String;
   Length : in Gint);
@end example

By default, the text shown is not modifiable by the user. To change this,
use the @code{Set_Editable} procedure:
@example
procedure Set_Editable
  (Text : access Gtk_Text_Record; Editable : in Boolean);
@end example

To avoid cutting words at the end of a line:
@example
procedure Set_Word_Wrap
  (Text      : access Gtk_Text_Record;
   Word_Wrap : in Boolean);
@end example

Also inherits primitives from @code{Gtk.Editable.Gtk_Editable}:
@itemize @bullet

@item Destroy a text section
@example
procedure Delete_Text
  (Editable  : access Gtk_Editable_Record;
   Start_Pos : in Gint;
   End_Pos   : in Gint);   --  e.g Glib.Gint (Get_Length (...))
@end example

@item Get the current postion of the cursor
@example
function Get_Current_Pos (Widget : access Gtk_Editable_Record)
  return Guint;
@end example
@end itemize

@node Package Gtk.Container
@section Package Gtk.Container
@example
type Gtk_Container_Record is new
  Gtk.Widget.Gtk_Widget_Record with private;
type Gtk_Container is access all Gtk_Container_Record'Class;
@end example

General notion that permits to create a hierarchical structure of widgets, such
as @code{Gtk_Box, Gtk_Table, Gtk_EventBox}, @dots{}

To add/remove a widget in a @code{Gtk_Container}:

@example
procedure Add
  (Container : access Gtk_Container_Record;
   Widget    : access Gtk.Widget.Gtk_Widget_Record'Class);

procedure Remove
  (Container : access Gtk_Container_Record;
   Widget    : access Gtk.Widget.Gtk_Widget_Record'Class);
@end example

The procedures @code{Pack_Start} and @code{Pack_End} of @code{Gtk_Box} and
@code{Attach} of @code{Gtk_Table} let you add widgets and specify their
position.

To set the width of the border around the @code{Gtk_Container}:
@example
procedure Border_Width
  (Container    : access Gtk_Container_Record;
   Border_Width : in Gint);
@end example

@c @section Package Gtk.Toolbar
@c @example
@c    type Gtk_Toolbar_Record is new Gtk.Container.Gtk_Container_Record
@c      with private;
@c    type Gtk_Toolbar is access all Gtk_Toolbar_Record'Class;
@c @end example

@node Package Gtk.Table
@section Package Gtk.Table
@example
type Gtk_Table_Record is new Gtk.Container.Gtk_Container_Record
  with private;
type Gtk_Table is access all Gtk_Table_Record'Class;
@end example

To group widgets in a table. The same widget can cover several boxes of the
table. The size of the boxes depend on what they contain.

@example
procedure Gtk_New
  (Widget      : out Gtk_Table;
   Rows        : in Glib.Gint;
   Columns     : in Glib.Gint;
   Homogeneous : in Boolean);
@end example

If @code{Homogeneous} is True, all the boxes will have the same size, determined
by the largest widget and the longest widget.
Otherwise, the width of a column (resp. heigh of a row) will be determined
by the largest widget of the column.

To attach a widget to a table
@example
procedure Attach
  (Table         : access Gtk_Table_Record;
   Child         : access Gtk.Widget.Gtk_Widget_Record'Class;
   Left_Attach   : in Gint;
   Right_Attach  : in Gint;
   Top_Attach    : in Gint;
   Bottom_Attach : in Gint;
   Xoptions      : in Gtk_Attach_Options;
   Yoptions      : in Gtk_Attach_Options;
   Xpadding      : in Gint;
   Ypadding      : in Gint);

procedure Attach_Defaults
  (Table         : access Gtk_Table_Record;
   Widget        : access Gtk.Widget.Gtk_Widget_Record'Class;
   Left_Attach   : in Gint;
   Right_Attach  : in Gint;
   Top_Attach    : in Gint;
   Bottom_Attach : in Gint);
@end example

Attach the widget @code{Child} to the position indicated by
@code{Left_Attach, Right_Attach, Top_Attach} and
@code{Bottom_Attach}.
These indexes start from 0 to the number of column or rows specified at
table creation. The origin (0, 0) of the frontiers is located in upper left.

@example
    0          1          2
   0+----------+----------+
    |          |          |
   1+----------+----------+
    |          |          |
   2+----------+----------+
@end example

The values of @code{Xoptions} @code{Yoptions} can be a logical @var{or} of
several values:
@itemize @bullet
@item [Gtk.Enums.Expand] The table will use all the remaining space in the
 window.
@item [Gtk.Enums.Shrink] If the widget has less space than needed, it will
 shrink instead of disappearing.
@item [Gtk.Enums.Fill] The widget take the whole space that has been allocated
 for it.
@end itemize

@code{Xpadding} and @code{Ypadding} give the widths in number of pixels of the
 free spaces reserved around the widget.

For the @code{Attach_Defaults} procedure, the default values of @code{Xoptions}
and @code{Yoptions} are equals to @code{Expand or Fill} and those of
@code{Xpadding} and @code{Ypadding} are 0.

@node Package Gtk.Scrolled_Window
@section Package Gtk.Scrolled_Window
@example
type Gtk_Scrolled_Window_Record is new Container.Gtk_Container_Record
  with private;
type Gtk_Scrolled_Window is access all Gtk_Scrolled_Window_Record'Class;
@end example

To create a scrollable zone in which you can put any kind of widget, like
e.g a table of buttons.
If the window is too small, all the widgets won't be visible, but they will
remain accessible using the scrollbars.
@example
procedure Gtk_New
  (Scrolled_Window :    out Gtk_Scrolled_Window;
   Hadjustment     : access Adjustment.Gtk_Adjustment_Record'Class
     := Adjustment.Null_Adjustment;
   Vadjustment     : access Adjustment.Gtk_Adjustment_Record'Class
     := Adjustment.Null_Adjustment);
@end example

Create a @code{Gtk_Scrolled_Window} by optionally specifying adjustment rules.

To get the adjutment rules (to attach scrollbars).
@example
function Get_Hadjustment
  (Scrolled_Window : access Gtk_Scrolled_Window_Record)
   return Adjustment.Gtk_Adjustment;

function Get_Vadjustment
  (Scrolled_Window : access Gtk_Scrolled_Window_Record)
   return Adjustment.Gtk_Adjustment;
@end example

@c Package Gtk.Paned:
@c    type Gtk_Paned_Record is new Gtk.Container.Gtk_Container_Record
@c      with private;
@c    type Gtk_Paned is access all Gtk_Paned_Record'Class;

@c Package Gtk.Tree:
@c    type Gtk_Tree_Record is new Gtk.Container.Gtk_Container_Record with private;
@c    type Gtk_Tree is access all Gtk_Tree_Record'Class;

@c Package Gtk.Menu_Shell:
@c    type Gtk_Menu_Shell_Record is new Gtk.Container.Gtk_Container_Record
@c      with private;
@c    type Gtk_Menu_Shell is access all Gtk_Menu_Shell_Record'Class;

@c Package Gtk.Menu:
@c    type Gtk_Menu_Record is new Gtk.Menu_Shell.Gtk_Menu_Shell_Record
@c      with private;
@c    type Gtk_Menu is access all Gtk_Menu_Record'Class;

@c Package Gtk.Menu_Bar:
@c    type Gtk_Menu_Bar_Record is new Gtk.Menu_Shell.Gtk_Menu_Shell_Record
@c      with private;
@c    type Gtk_Menu_Bar is access all Gtk_Menu_Bar_Record'Class;

@c Package Gtk.List:
@c    type Gtk_List_Record is new Gtk.Container.Gtk_Container_Record with private;
@c    type Gtk_List is access all Gtk_List_Record'Class;

@c Package Gtk.Fixed:
@c    type Gtk_Fixed_Record is new Gtk.Container.Gtk_Container_Record
@c      with private;
@c    type Gtk_Fixed is access all Gtk_Fixed_Record'Class;

@node Package Gtk.Notebook
@section Package Gtk.Notebook
@example
type Gtk_Notebook_Record is new Gtk.Container.Gtk_Container_Record
  with private;
type Gtk_Notebook is access all Gtk_Notebook_Record'Class;
@end example

The NoteBook Widget is a collection of @var{pages} that overlap each other,
each page containing different information.
This widget has become more common lately in GUI programming,
and it is a good way to show blocks similar information that warrant
separation in their display. 

@c Package Gtk.CList:
@c    type Gtk_Clist_Record is new Gtk.Container.Gtk_Container_Record
@c      with private;
@c    type Gtk_Clist is access all Gtk_Clist_Record'Class;

@node Package Gtk.Box
@section Package Gtk.Box
@example
type Gtk_Box_Record is new
  Gtk.Container.Gtk_Container_Record with private;
type Gtk_Box is access all Gtk_Box_Record'Class;
subtype Gtk_Vbox is Gtk_Box;
subtype Gtk_Hbox is Gtk_Box;
@end example

Horizontal (@code{Gtk_New_Hbox}) and vertical (@code{Gtk_New_Vbox}) boxes
that can contain several widgets.
you can add widgets from

@itemize @bullet
@item the left to the right starting from the beginning (@code{Pack_Start})
@item the right to the left, starting from the end (@code{Pack_End})
@end itemize

@example
procedure Gtk_New_Vbox
  (Box         : in out Gtk_Box;
   Homogeneous : in  Boolean;
   Spacing     : in  Gint);
procedure Initialize_Vbox
  (Box         : access Gtk_Box_Record;
   Homogeneous : in  Boolean;
   Spacing     : in  Gint);

procedure Gtk_New_Hbox
  (Box         : in out Gtk_Box;
   Homogeneous : in  Boolean;
   Spacing     : in  Gint);A
procedure Initialize_Hbox
  (Box         : access Gtk_Box_Record;
   Homogeneous : in  Boolean;
   Spacing     : in  Gint);

procedure Pack_Start
  (In_Box  : access Gtk_Box_Record;
   Child   : access Gtk.Widget.Gtk_Widget_Record'Class;
   Expand  : in Boolean := True;
   Fill    : in Boolean := True;
   Padding : in Gint    := 0);

procedure Pack_End
  (In_Box  : access Gtk_Box_Record;
   Child   : access Gtk.Widget.Gtk_Widget_Record'Class;
   Expand  : in Boolean := True;
   Fill    : in Boolean := True;
   Padding : in Gint    := 0);
@end example

@xref{Package Gtk.Table}

@c Package Gtk.Status_Bar:
@c    type Gtk_Status_Bar_Record is new Gtk.Box.Gtk_Box_Record with private;
@c    type Gtk_Status_Bar is access all Gtk_Status_Bar_Record'Class;

@c Package Gtk.Color_Selection:
@c    type Gtk_Color_Selection_Record is new Gtk.Box.Gtk_Box_Record with private;
@c    type Gtk_Color_Selection is access all Gtk_Color_Selection_Record'Class;

@c Package Gtk.Button_Box:
@c    type Gtk_Button_Box_Record is new Gtk.Box.Gtk_Box_Record with private;
@c    type Gtk_Button_Box is access all Gtk_Button_Box_Record'Class;

@c Package Gtk.VButton_Box:
@c    type Gtk_VButton_Box_Record is new Gtk.Button_Box.Gtk_Button_Box_Record
@c      with private;
@c    type Gtk_VButton_Box is access all Gtk_VButton_Box_Record'Class;

@c Package Gtk.HButton_Box:
@c    type Gtk_Hbutton_Box_Record is new Gtk.Button_Box.Gtk_Button_Box_Record
@c      with private;
@c    type Gtk_Hbutton_Box is access all Gtk_Hbutton_Box_Record'Class;

@c Package Gtk.Gamma_Curve:
@c    type Gtk_Gamma_Curve_Record is new Gtk.Box.Gtk_Box_Record with private;
@c    type Gtk_Gamma_Curve is access all Gtk_Gamma_Curve_Record'Class;

@c Package Gtk.Combo:
@c    type Gtk_Combo_Record is new Gtk.Box.Gtk_Box_Record with private;
@c    type Gtk_Combo is access all Gtk_Combo_Record'Class;

@node Package Gtk.Button
@section Package Gtk.Button
@example
type Gtk_Button_Record is new Bin.Gtk_Bin_Record with private;
type Gtk_Button is access all Gtk_Button_Record'Class;
@end example

A simple button with a label and signals (e.g @code{clicked}).

@c Package Gtk.Option_Menu:
@c    type Gtk_Option_Menu_Record is new Button.Gtk_Button_Record with private;
@c    type Gtk_Option_Menu is access all Gtk_Option_Menu_Record'Class;

@node Package Gtk.Toggle_Button
@section Package Gtk.Toggle_Button
@example
type Gtk_Toggle_Button_Record is new Gtk.Button.Gtk_Button_Record
  with private;
type Gtk_Toggle_Button is access all Gtk_Toggle_Button_Record'Class;
@end example

Toggle buttons are very similar to normal buttons, except they will always
be in one of two states, alternated by a click. They may be depressed,
and when you click again, they will pop back up.  Click again, and they will
pop back down.

@node Package Gtk.Check_Button
@section Package Gtk.Check_Button
@example
type Gtk_Check_Button_Record is new
  Toggle_Button.Gtk_Toggle_Button_Record with private;
type Gtk_Check_Button is access all Gtk_Check_Button_Record'Class;
@end example

Check buttons inherit many properties and functions from the the toggle
buttons above, but look a little different.
Rather than being buttons with text inside them, they are small squares with
the text to the right of them. These are often seen for toggling
options on and off in applications. 

@c Package Gtk.Radio_Button:
@c   type Gtk_Radio_Button is new Check_Button.Gtk_Check_Button with private;
@node Package Gtk.Bin
@section Package Gtk.Bin
@example
type Gtk_Bin is new Container.Gtk_Container with private;
@end example

@c Package Gtk.Item:
@c    type Gtk_Item_Record is new Bin.Gtk_Bin_Record with private;
@c    type Gtk_Item is access all Gtk_Item_Record'Class;

@c Package Gtk.List_Item:
@c    type Gtk_List_Item_Record is new Gtk.Item.Gtk_Item_Record with private;
@c    type Gtk_List_Item is access all Gtk_List_Item_Record'Class;

@c Package Gtk.Menu_Item:
@c    type Gtk_Menu_Item_Record is new Item.Gtk_Item_Record with private;
@c    type Gtk_Menu_Item is access all Gtk_Menu_Item_Record'Class;

@c Package Gtk.Check_Menu_Item:
@c    type Gtk_Check_Menu_Item_Record is new Gtk.Menu_Item.Gtk_Menu_Item_Record
@c      with private;
@c    type Gtk_Check_Menu_Item is access all Gtk_Check_Menu_Item_Record'Class;

@c Package Gtk.Radio_Menu_Item:
@c    type Gtk_Radio_Menu_Item_Record
@c       is new Gtk.Check_Menu_Item.Gtk_Check_Menu_Item_Record with private;
@c    type Gtk_Radio_Menu_Item is access all Gtk_Radio_Menu_Item_Record'Class;

@c Package Gtk.Tree_Item:
@c    type Gtk_Tree_Item_Record is new Gtk.Item.Gtk_Item_Record with private;
@c    type Gtk_Tree_Item is access all Gtk_Tree_Item_Record'Class;

@c Package Gtk.Handle_Box:
@c    type Gtk_Handle_Box_Record is new Gtk.Bin.Gtk_Bin_Record with private;
@c    type Gtk_Handle_Box is access all Gtk_Handle_Box_Record'Class;

@c Package Gtk.Frame:
@c    type Gtk_Frame_Record is new Gtk.Bin.Gtk_Bin_Record with private;
@c    type Gtk_Frame is access all Gtk_Frame_Record'Class;

@c Package Gtk.Aspect_Frame:
@c    type Gtk_Aspect_Frame_Record is new Gtk.Frame.Gtk_Frame_Record with private;
@c    type Gtk_Aspect_Frame is access all Gtk_Aspect_Frame_Record'Class;

@node Package Gtk.Event_Box
@section Package Gtk.Event_Box
@example
type Gtk_Event_Box_Record is new Gtk.Bin.Gtk_Bin_Record with private;
type Gtk_Event_Box is access Gtk_Event_Box_Record'Class;
@end example

To associate a callback or clip a widget that is not able to do it, like
labels for example.

@example
procedure Gtk_New (Widget : out Gtk_Event_Box);
@end example

This widget is a child of @code{Gtk_Container} and inherits in particular of:

@example
procedure Add (Container : access Gtk_Container_Record;
               Widget    : access Gtk.Widget.Gtk_Widget_Record'Class);
@end example

@c Package Gtk.Viewport:
@c    type Gtk_Viewport_Record is new Gtk.Bin.Gtk_Bin_Record with private;
@c    type Gtk_Viewport is access all Gtk_Viewport_Record'Class;

@node Package Gtk.Window
@section Package Gtk.Window
@example
type Gtk_Window_Record is new Bin.Gtk_Bin_Record with private;
type Gtk_Window is access all Gtk_Window_Record'Class;
@end example

The base window, emits the signals @code{"destroy", "delete_event"}.

@c Package Gtk.Color_Selection_Dialog:
@c    type Gtk_Color_Selection_Dialog_Record is new Gtk.Window.Gtk_Window_Record
@c      with private;
@c    type Gtk_Color_Selection_Dialog
@c      is access all Gtk_Color_Selection_Dialog_Record'Class;

@node Package Gtk.File_Selection
@section Package Gtk.File_Selection
@example
type Gtk_File_Selection_Record is new Gtk.Window.Gtk_Window_Record
  with private;
type Gtk_File_Selection is access all Gtk_File_Selection_Record'Class;
@end example

To select a file in the directories tree. Nothing special to know about
it, just use it!
There are three buttons @code{Ok, Cancel and Help}.
You can modify these buttons (e.g change the labels, connect callbacks, @dots{})
with the various @code{Get_..._Button} functions.

@example
procedure Gtk_New
  (File_Selection : out Gtk_File_Selection; Title : in String);
@end example

To associate a callback with the buttons of the file selector:
@example
function Get_Ok_Button
  (File_Selection : access Gtk_File_Selection_Record)
   return Gtk.Button.Gtk_Button;

function Get_Cancel_Button
  (File_Selection : access Gtk_File_Selection_Record)
   return Gtk.Button.Gtk_Button;
@end example

To consult or set the filename:
@example
function Get_Filename
  (File_Selection : access Gtk_File_Selection_Record)
   return String;

procedure Set_Filename
  (File_Selection : access Gtk_File_Selection_Record;
   Filename : in String);
@end example

To hide the file manipulation buttons (destruction, @dots{}):

@example
procedure Hide_Fileop_Buttons
  (File_Selection : access Gtk_File_Selection_Record);
@end example

@c Package Gtk.Dialog:
@c    type Gtk_Dialog_Record is new Gtk.Window.Gtk_Window_Record with private;
@c    type Gtk_Dialog is access all Gtk_Dialog_Record'Class;

@c Package Gtk.Input_Dialog:
@c    type Gtk_Input_Dialog_Record is new Dialog.Gtk_Dialog_Record with private;
@c    type Gtk_Input_Dialog is access all Gtk_Input_Dialog_Record'Class;

@c Package Gtk.Alignment:
@c    type Gtk_Alignment_Record is new Gtk.Bin.Gtk_Bin_Record with private;
@c    type Gtk_Alignment is access Gtk_Alignment_Record'Class;

@node Package Gtk.Enums
@section Package Gtk.Enums
This package defines all the enumerated types used by the GTK hierarchy.

@node Description of the GDK hierarchy
@chapter Description of the GDK hierarchy
GTK is based on a lower level layer called GDK that contains some simple
drawing and window primitives.

@node Package Gdk.Color
@section Package Gdk.Color
Color types and table of colors:
@example
type Gdk_Color is private;
type Gdk_Colormap is new Root_Type with private;
@end example

Allows one to get black and white colors by asking the
@code{Gdk_Colormap} of a widget:
@example
function White (Colormap : in Gdk_Colormap) return Gdk_Color;
function Black (Colormap : in Gdk_Colormap) return Gdk_Color;
Wrong_Color : exception;
@end example

See for example @code{Get_Default_Colormap}.

@node Package Gdk.Point
@section Package Gdk.Point
@example
type Gdk_Point is private;
@end example

Used to describe polygons.

@example
type Gdk_Points_Array is array (Positive range <>) of Gdk_Point;

function Get_X (Point : in Gdk_Point) return Glib.Gint16;
function Get_Y (Point : in Gdk_Point) return Glib.Gint16;
procedure Set_X (Point : in out Gdk_Point; X : Glib.Gint16);
procedure Set_Y (Point : in out Gdk_Point; Y : Glib.Gint16);
@end example
 
@node Package Gdk.Window
@section Package Gdk.Window
@example
type Gdk_Window is new Root_Type with private;
@end example

To clear a window (e.g before drawing ):
@example
procedure Clear (Window : in out Gdk_Window);
@end example
 
@node Package Gdk.Drawable
@section Package Gdk.Drawable
@example
subtype Gdk_Drawable is Gdk.Window.Gdk_Window;
@end example

@example
   procedure Draw_Rectangle (Drawable : in Gdk_Drawable'Class;
                             Gc       : in Gdk.GC.Gdk_GC'Class;
                             Filled   : in Boolean := False;
                             X        : in Gint;
                             Y        : in Gint;
                             Width    : in Gint;
                             Height   : in Gint);
 
   procedure Draw_Point (Drawable : in Gdk_Drawable'Class;
                         Gc       : in Gdk.GC.Gdk_GC'Class;
                         X        : in Gint;
                         Y        : in Gint);
 
   procedure Draw_Line (Drawable : in Gdk_Drawable'Class;
 
   procedure Draw_Line (Drawable : in Gdk_Drawable'Class;
                        Gc       : in Gdk.GC.Gdk_GC'Class;
                        X1       : in Gint;
                        Y1       : in Gint;
                        X2       : in Gint;
                        Y2       : in Gint);
 
   procedure Draw_Arc (Drawable : in Gdk_Drawable'Class;
                       Gc       : in Gdk.GC.Gdk_GC'Class;
                       Filled   : in Boolean := False;
                       X        : in Gint;
                       Y        : in Gint;
                       Width    : in Gint;
                       Height   : in Gint;
                       Angle1   : in Gint;
                       Angle2   : in Gint);
 
   procedure Draw_Polygon (Drawable : in Gdk_Drawable'Class;
                           Gc       : in Gdk.GC.Gdk_GC'Class;
                           Filled   : in Boolean;
                           Points   : in Gdk.Point.Gdk_Points_Array);
   procedure Draw_Text
     (Drawable    : in Gdk_Drawable'Class;
      Font        : in Gdk.Font.Gdk_Font;
      Gc          : in Gdk.GC.Gdk_GC;
      X           : in Glib.Gint;
      Y           : in Glib.Gint;
      Text        : in String);
@end example

for all the procedures (in particular @code{Draw_Arc}), the parameter are:
@itemize @bullet
 
@item [X, Y] Position of the point or of the upper left corner or the rectangle.
 
@item [Width, Height] Width and height of the rectangle or of the rectangle
containing an ellipse.
 
@item [Angle1]  Starting angle of the arc in 1/64th degrees.
 
@item [Angle2]  Ending angle relative to Angle1 in 1/64th degrees.

@item [Font]  A font, that can be loaded using @code{Gdk.Font.Load}.
              For example:
@example
   Gdk.Font.Load
     (Font, "-adobe-courier-medium-i-*-*-15-*-*-*-*-*-*-*");
@end example
@end itemize

@node Package Gdk.GC
@section Package Gdk.GC
A @code{Gdk_GC} is a graphic context that must be associated, during its
creation, with a @code{Gdk_Window}, and which is needed for each drawing
primitive of @code{Gdk_Drawable}.
A @code{Gdk_GC} let you, for example, set the colors to use for a drawing.

@example
   type Gdk_GC is new Root_Type with private;
 
   procedure Gdk_New (GC     :    out Gdk_GC;
                      Window : in     Gdk.Window.Gdk_Window'Class);
 
   procedure Destroy (GC : in out Gdk_GC);
 
   procedure Set_Foreground (GC    : in out Gdk_GC;
                             Color : in     Gdk.Color.Gdk_Color);
 
   procedure Set_Background (GC    : in out Gdk_GC;
                             Color : in     Gdk.Color.Gdk_Color);
 
   procedure Set_Font (GC   : in out Gdk_GC;
                       Font : in     Gdk.Font.Gdk_Font'Class);
@end example
 
@node Package Gdk.Font
@section Package Gdk.Font
A font describes the graphical aspect of the characters, their size,
kind, @dots{}.

Under @code{X11}, each font has a name of the form:
@example
"-adobe-courier-medium-i-*-*-15-*-*-*-*-*-*-*"
@end example

The X command @code{xfontsel} let select you a font and build its associated
name automatically.
 
@example
   type Gdk_Font is new Root_Type with private;
 
   procedure Load
     (Font      :    out Gdk_Font;
      Font_Name : in     String);
 
   procedure Fontset_Load
     (Font         :   out Gdk_Font;
      Fontset_Name : in    String);
 
   function Id (Font : in Gdk_Font) return Gint;
 
   function "=" (Fonta, Fontb : in Gdk_Font) return Boolean;
 
   function String_Width
     (Font : in Gdk_Font;
      Str  : in String) return Gint;
 
   function Text_Width
     (Font : in Gdk_Font;
      Text : in String) return Gint;
 
   function Char_Width
     (Font : in Gdk_Font;
      Char : in Character) return Gint;
 
   function String_Measure
     (Font : in Gdk_Font;
      Str  : in String) return Gint;
 
   function Text_Measure
     (Font : in Gdk_Font;
      Text : in String) return Gint;
 
   function Char_Measure
     (Font : in Gdk_Font;
      Char : in Character) return Gint;
@end example

@code{Width} gives the sum of the characters' widths,
@code{Measure} gives a value similar to @code{Width} except that it takes
info account the kind of the font (e.g @code{italic}).

@node Description of the Glib hierarchy
@chapter Description of the Glib hierarchy

Glib is the low-level layer and provides various types such as
@code{Gint, Guint}, @dots{}.

@c Glib.XML

@node Creating and Binding new widgets
@chapter Creating and Binding new widgets

New since version 0.6, GtkAda has now a basic support for creating new
widgets directly in Ada (although you can't create your own signals
yet, we are still working on it).

Since GtkAda has an Object Oriented conception (well, at least you can
program by extension), it is easy, if you want to associate your
own data with a widget, to create your own type. Please see the
examples below. You should also have a look at the @code{testgtk/}
 directory.

We provide a Perl script to help you create a binding to a C widget
(this is the script we have used ourselves).  This will not fully
automate the process, although it should really speed things up. You
will probably need less than 15 min to create a new binding once you
will get used to the way GtkAda works. Note that your C file should
have the same format as the one used by Gtk+ itself.

Here are the steps to create a new binding:

@itemize @bullet
@item Give the @code{generate.pl} script the C header file

@item The perl script should ask you for every field in the C structure if
you want to create a function to make it accessible from Ada. Answer
@var{y} or @var{n} (the default value is @var{n}, just press ENTER).

@example
$ perl generate.pl ../include/gtk/gtkbutton.h > temporary
  Create a function for the field child (of type GtkWidget*) [n]?
  Create a function for the field in_button (of type guint) [n]?
  Create a function for the field button_down (of type guint) [n]?
@end example

@item If you answered yes to at least one of the above questions, create a
new C file, and move the C part of the @var{temporary} file created by
generate.pl to this C file.

@item Do a gnatchop on the @var{temporary} file created by generate.pl

@example
$ gnatchop temporary
@end example

This should create two Ada files (specification and body)

@item Edit these two files if needed (generally to change some parameters
  from Gint to Boolean for instance). It can be a little bit tricky
  when one of your functions returns a GList* or a GSList*. Please have
  a look at gtk-combo.ads for examples how to do this.
@end itemize

@node Threads
@chapter Threads

The 1.2 series of Gtk+ are now thread safe. The
usage of tasks inside programs using this binding should not cause any
problem provided that you protect your Gtk calls with Gdk.Threads.Enter/
Leave and that your windowing system (e.g X) is thread-safe.

We recommend however that you read the section related to this topic in the
GTK+ documentation.

@node How to report bugs
@chapter How to report bugs

This library is still considered beta code, and it is thus likely that
you will  find bugs.  We  have tried to  test it as much  as possible,
essentially  by  converting  the  testgtk.c  file  found  in  the  gtk
distribution.   We   have  been  able   to  rewrite  nearly   all  the
tests. Please have a look at the  testgtk, which can give you a lot of
examples of how to use this binding.

For more general questions about gtk itself, please ask your questions
to the  gtk  mailing list. The  authors of  this binding  are far from
beeing specialists of gtk, as it was one of our first project with gtk.

There are two kinds of problems you can encounter:
@itemize @bullet
@item If the gtk library itself was compiled with warnings turned on, you
may get some  warnings messages,  mainly because of types problems.
These warnings should not appear, as we have tried to be as type safe
as possible  in this package. To know exactly where the problem is,
compile your program with debug information, run gdb, and set a
breakpoint on the function @code{g_warning}. Then run your program as usual,
using the @code{run} command. Then send us the result of the @code{where}
command. Here is a summary:

@example
$ gnatmake -f -g <your_program_name> `gtkada-config`
$ gdb <your_program_name>
(gdb) break main
(gdb) run
(gdb) break g_warning
(gdb) continue
....
(gdb) where
@end example

@item In  some  (hopefully) rare cases,   you can even get a  segmentation
fault  within gtk.  That  means there is  definitevly  something wrong
either  your program  or   the  binding.  Please  check   your program
carefully, and if you think this is a problem in  the binding, send us
an e-mail.
@end itemize

To report errors, send a mail to the authors (@code{gtkada@@ada.eu.org})
explaining exactly what your
are  doing,  what  it  the  expected  result  and  what  you  actually
get. Please include the required sources to reproduce the problem, in
a  format usable  by @code{gnatchop}  (basically, insert  all  the required
sources at  the end of  the mail). Please  try to provide a  subset of
your sources as small as possible.

Of course, we will  welcome any patch   you can provide, so  that this
binding is as useful as possible.

@node New tagged type scheme
@chapter New tagged type scheme

GtkAda 0.6 is an almost complete rewrite of GtkAda. Whereas widgets
used to be record types, they now are implemented as access types.
This change has two benefits:
@itemize @bullet
@item It is now clearer, when you pass an object to a function or as
  an argument to a callback, that you are still working with the
  widget you created before.
@item Most important, it is now possible to extend existing types directly
  in Ada (see the section below).
@end itemize

Your existing code might have to be modified a little though (sorry
about that, this is for the better!).
@itemize @bullet
@item Although @code{Gtk_New} now creates access types (and allocate memory for
  them), you do not have to free this memory yourself. This is
  automatically taken care of by gtk itself, which is one of the
  strong points of the new scheme.
@item The only part of your code that is actually modified are the
  callbacks. The changes should be easy to handle (We did it
  for testgtk itself :-).
  When instanciating a callback generic, the first parameter should be
  modified like this:

@example
package My_Cb is new Signal.Void_Callback (Gtk_Widget_Record);
                                                     ^^^^^^^
@end example

  Then you have to modify the spec of the subprogram iself:

@example
procedure My_Func (Button : access Gtk.Button.Gtk_Button_Record;
                   Data   : in Gint);
@end example

  Note that the first parameter is an anonymous access to a record
  type, and the second parameter is an "in" parameter.
@end itemize

The last things that have changed in this new version of the binding are some
of the names of the parameters in the subprograms of the bindings. This
is part of a major cleanup we are doing so that things can be more
homogeneous within GtkAda.

@node Using tagged types to extend Gtk widgets
@chapter Using tagged types to extend Gtk widgets

Since version 0.6 of this binding, it is possible to associate your
own data with existing widgets, simply by creating new types. This
file will show you a simple example, but you should rather read the
source code in testgtk/ where we used this feature instead of using
@code{user_data} as in the C version.

@example
type My_Button_Record is new Gtk_Button_Record with record
    --  whatever data you want to associate with your button
end record;
type My_Button is access all My_Button_Record'Class;
@end example

With the above statements, your new type is defined. Every function
available for @code{Gtk_Button} is also available for @code{My_Button}.
Of course, as with every tagged type in Ada, you can create your own
primitive functions, with the following prototype:

@example
procedure My_Primitive_Func (Myb : access My_Button_Record);
@end example

To instanciate an object of type @code{My_Button} in your application, do
the following:

@example
declare
   Myb : My_Button;
begin
   Myb := new My_Button_Record;
   Initialize (Myb);   --  from Gtk.Button
end;
@end example

The first line creates the Ada type, whereas the @code{Initialize} call
actually creates the C widget and associate with the Ada type.

@node Support for Glade the Gtk GUI builder
@chapter Support for Glade, the Gtk GUI builder

GtkAda now comes with a support for the GUI builder Glade (this is not
the glade released with Gnat for distributed systems).
Not all widgets are supported yet, but we eventually hope to have all
of them. If you really need one, it is easy to add the two required
functions @dots{}

We actually provide two versions: a dynamic one and a static one. In
both cases, you first need to get and install glade (http://glade.pn.org).
Then start a new project (or edit an old one). It is easy enough to use,
simply select the widget you want to add to your interface, and click!

For now, you can not directly create Ada files from Glade (although this
should be in the next version). In the meanwhile, save your project as
an XML file.

@itemize @bullet
@item DGATE is the dynamic version of our support. This is an Ada program
that takes the XML file in argument. It also provides default
callbacks for your application, we recommand using it while you are
trying to design your interface.

@item GATE is the static version of our support. This tool
takes the XML file in argument and generates a set of Ada files that,
when compiled, will recreate the interface you just designed with Glade.
@end itemize

The most important file created by Gate is called
@code{callback_<project_name>.adb}.
It contains stubs for all the callbacks you declared in Glade.

Note that you can easily go back to Glade any time, modify your interface,
and have GATE re-generate a set of files. All your modifications will be
kept in the new files. For that, GATE creates a directory @code{.gate/} in the
current directory. Please do not delete it if you want GATE to be able to
keep your changes from one version to the next.

Also note that to be able to keep track of your modifications, gate
relies on @code{patch} and @code{diff} being available on your system.
If you don't have a working set of @code{diff/patch}, @code{configure}
will simply replace them by null operations.

@node A complete example
@chapter A complete example
A window is created with 3 buttons that shows the 3 different types of
callbacks provided.
One interesting thing is that @code{Callbacks.Bye} is
connected three times: on the @code{"Quit"} button and two times on the
main window.

@example
with Gtk.Signal;
with Gtk.Button;
with Gtk.Window;

package Callbacks is

   package Button_Callback is new Gtk.Signal.Void_Callback
     (Widget_Type => Gtk.Button.Gtk_Button);
   procedure Increment (Widget : in out Gtk.Button.Gtk_Button);

   package Button_Message is new Gtk.Signal.Callback
     (Widget_Type => Gtk.Button.Gtk_Button,
      Data_Type => String);

   procedure Message
     (Widget : in out Gtk.Button.Gtk_Button; Data : in out String);

   package Window_Callback is new Gtk.Signal.Object_Callback
     (Widget_Type => Gtk.Window.Gtk_Window);

   procedure Bye (Window : in out Gtk.Window.Gtk_Window);

end Callbacks;

with Gtk.Main;
with Ada.Text_Io;

package body Callbacks is

   Counter : Natural := 0;

   procedure Increment (Widget : in out Gtk.Button.Gtk_Button) is
   begin
      Counter := Counter + 1;
      Ada.Text_Io.Put_Line (Natural'Image (compteur));
   end Increment;

   procedure Message
     (Widget : in out Gtk.Button.Gtk_Button; Data : in out String) is
   begin
      Ada.Text_Io.Put_Line (Data);
   end Message;

   procedure Bye (Window : in out Gtk.Window.Gtk_Window) is
   begin
      Gtk.Window.Destroy (Window);
      Gtk.Main.Main_Quit;
   end Bye;

end Callbacks;

with Gtk.Rc;
with Gtk.Main;
with Gtk.Enums;
with Gtk.Window;
with Gtk.Box;
with Gtk.Label;
with Gtk.Button;
with Callbacks;
with Glib;

procedure Example is

   procedure Fix_Label (Box : in out Gtk.Box.Gtk_Box; Str : String) is
      Label : Gtk.Label.Gtk_Label;
   begin
      Gtk.Label.Gtk_New (Label => Label, Str => Str);
      Gtk.Box.Pack_Start
        (In_Box => Box, Child => Label, Expand => False, Fill => False);
   end Fix_Label;

   procedure Create_Box
     (W : in out Gtk.Window.Gtk_Window;
      Str : String)
   is
      Box    : Gtk.Box.Gtk_Box;
      Button : Gtk.Button.Gtk_Button;
      Cb_Id  : Glib.Guint;

   begin
      Gtk.Box.Gtk_New_Vbox
        (Widget => Box, Homogeneous => True, Spacing => 0);
      Gtk.Window.Add (Container => W, Widget => Box);

      Fix_Label (Box, Str);

      Gtk.Button.Gtk_New (Widget => Button, Label => "Increment");
      Gtk.Box.Pack_Start (In_Box => Box, Child => Button);
      Cb_Id := Callbacks.Button_Callback.Connect
        (Obj => Button,
         Name => "clicked",
         Func => Callbacks.Increment'Access);

      Gtk.Button.Gtk_New (Widget => Button, Label => "Message");
      Gtk.Box.Pack_Start (In_Box => Box, Child => Button);
      Cb_Id := Callbacks.Button_Message.Connect
        (Obj => Button,
         Name => "clicked",
         Func => Callbacks.Message'Access,
         Func_Data => "Button message clicked");

      Gtk.Button.Gtk_New (Widget => Button, Label => "Quit");
      Gtk.Box.Pack_Start (In_Box => Box, Child => Button);
      Cb_Id := Callbacks.Window_Callback.Connect
        (Obj => Button,
         Name => "clicked",
         Func => Callbacks.Bye'Access,
         Slot_Object => W);
   end Create_Box;

   procedure Window is
      Main_Window : Gtk.Window.Gtk_Window;
      Cb_Id : Glib.Guint;

   begin
      Gtk.Window.Gtk_New
        (Window => Main_Window, The_Type => Gtk.Enums.Window_Toplevel);

      --  Inherited from Gtk.Widget:

      Gtk.Window.Set_Title
        (Window => Main_Window, Title => "Some Title");
      Create_Box (Main_Window, "my box") ;

      --  Connect the Callbacks

      Cb_Id := Callbacks.Window_Callback.Connect
        (Obj => Main_Window,
         Name => "destroy",
         Func => Callbacks.Bye'Access,
         Slot_Object => Main_Window);
      Cb_Id := Callbacks.Window_Callback.Connect
        (Obj => Main_Window,
         Name => "delete_event",
         Func => Callbacks.Bye'Access,
         Slot_Object => Main_Window);
      Gtk.Window.Show_All (Main_Window);
   end Window;

begin
   Gtk.Main.Set_Locale;
   Gtk.Main.Init;
   Gtk.Rc.Parse ("example.rc"); 
   Window;
   Gtk.Main.Main;
end Example;
@end example
@bye
