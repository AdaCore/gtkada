\input texinfo   @c -*-texinfo-*-
@c %**start of header
@setfilename gtkada.info
@settitle GtkAda User's Guide
@syncodeindex fn cp

@titlepage

@set GtkAdaVersion 1.2.7

@title GtkAda User's Guide
@subtitle Version @value{GtkAdaVersion}
@subtitle Document revision level $Revision$
@subtitle Date: $Date$
@author E. Briot, J. Brobecker, A. Charlet, P. Durif

@page
@vskip 0pt plus 1filll

Copyright @copyright{} 1998-2000, Emmanuel Briot, Joel Brobecker, Arnaud Charlet

This document may be copied, in whole or in part, in any form or by any
means, as is or with alterations, provided that (1) alterations are clearly
marked as alterations and (2) this copyright notice is included
unmodified in any copy.

@end titlepage

@ifinfo
@node Top, Introduction, (dir), (dir)
@top GtkAda User's Guide

GtkAda User's Guide

GtkAda, the Ada 95 graphical toolkit

Version @value{GtkAdaVersion}

Date: $Date$

Copyright @copyright{} 1998-1999, Emmanuel Briot, Joel Brobecker, Arnaud Charlet

This document may be copied, in whole or in part, in any form or by any
means, as is or with alterations, provided that (1) alterations are clearly
marked as alterations and (2) this copyright notice is included
unmodified in any copy.

@menu
* Introduction::
* Getting started with GtkAda::
* Hierarchical composition of a window::
* Signal handling::
* Starting an application with GtkAda::
* Description of the GDK hierarchy::
* Resource files::
* Memory management::
* Tasking with GtkAda::
* Object-oriented features::
* Support for Glade the Gtk GUI builder::
* How to report bugs::
* Bibliography::

@detailmenu
 --- The Detailed Node Listing ---

Getting started with GtkAda

* How to build and install GtkAda::
* Organization of the GtkAda package::
* How to compile an application with GtkAda::
* Architecture of the toolkit::
* Widgets Hierarchy::

Description of the GDK hierarchy

* Package Gdk.Point::
* Package Gdk.Window::
* Package Gdk.Drawable::
* Package Gdk.Font::
* Draw in a widget::

Object-oriented features
* Using tagged types to extend Gtk widgets::
* Creating new widgets in Ada::

@end detailmenu
@end menu
@end ifinfo

@c --------------------------------------------------------------------
@node Introduction
@chapter Introduction: What is GtkAda ?
@c --------------------------------------------------------------------

@noindent
GtkAda is a high-level portable graphical toolkit, based on the gtk+
toolkit, one of the official GNU toolkits. It makes it easy to create
portable user interfaces for multiple platforms, including most
platforms that have a X11 server and Win32 platforms.

Although it is based on a C library, GtkAda uses some advanced Ada95
features like tagged types, generic packages, access to subprograms,
exceptions, etc@dots{} to make it easier to use and design interfaces.
For efficiency reasons, it does not use controlled types, but takes care
of all the memory management for you in other ways.

As a result, this library provides a @i{secure}, @i{easy to use} and
@i{extensible} toolkit.

Compared to the C library, GtkAda provides type safety (especially in the
callbacks area), and object-oriented programming. As opposed to common
knowledge, it requires @i{less} type casting than with in C.
Its efficiency is about the same as the C library through the use of inline
subprograms.

GtkAda comes with a complete integration to the graphical interface
builder @code{Glade}@footnote{Glade was written by Damon Chaplin}. This
makes it even easier to develop interfaces, since you just have to click
to create a window and all the dialogs. Ada code can then be generated
with a single click.

GtkAda also has a full support for OpenGL, and comes with a very thin
binding to the OpenGL (@code{Mesa}) libraries. You can thus create
graphical applications that display 3D graphics, and display them in a
GtkAda window, as with any other 2D graphics. This manual does not
document OpenGL at all, see any book on OpenGL, or the specification
that came with your OpenGL library, for more information.

The following Internet sites will always contain the latest new and
packages for @code{GtkAda}, @code{gtk+} and @code{Glade}.

     @uref{http://gtkada.eu.org}

     @uref{http://www.gtk.org}

     @uref{http://glade.pn.org}
     

The scheme used for GtkAda's version numbers is the following: the major
version number is the same as for the underlying gtk+ library (e.g 1.2
or 1.3). Thus, stable versions of GtkAda will have even major numbers,
and development versions (potentially less stable, although we are
trying to make sure that no big problem exists in those versions) will
have odd version numbers. The minor version numbers depends on GtkAda's
release number.

This documentation is distributed with GtkAda @b{version
@value{GtkAdaVersion}}. At this stage, every widget found in @w{gtk+
1.2} has been implemented, and the test program found in the gtk release
has been fully coded in Ada (have a look at the @code{testgtk/}
directory in the distribution).

This toolkit was tested on the following systems:
@itemize @bullet
@item Linux/x86
@item Linux/sparc
@item Linux/ppc
@item Solaris/sparc
@item Solaris/x86
@item Dec Unix 4.0b
@item SGI IRIX 6.5
@item HP/UX 10.20
@item HP/UX 11.00
@item NT 4.0
@item AiX 4.3.2
@item SCO UnixWare 7.1
@item FreeBSD 3.2
@end itemize

with the latest version of the @code{GNAT} compiler, developed and supported by
Ada Core Technologies (see @uref{http://www.gnat.com}).

If you manage to use it on other systems (which should probably be
straightforward - just recompile GtkAda), please let us know so that
we can add to the above list.

This version of GtkAda is compatible with @code{gtk+} @b{1.2.2} up to
@b{version 1.2.6}. This release is no longer compatible with older versions
of gtk+ (up to 1.0). If you really need to use such an old version, please
consider downloading GtkAda 0.2.1 (but be aware that your code will
never work with recent versions, since the API has been completely
rewritten since then).

This version of GtkAda is compatible with @code{Glade} @b{version
0.5.5}.  Due to some modification in the output format of Glade, this
release will not work with older versions. It is also not guaranteed to
work with more recent versions. Please update your version of Glade.

This document does not describe all the widgets available in GtkAda, nor
does it try to explain all the subprograms. The GtkAda Reference Manual
provides this documentation instead, as well as
the GtkAda sources spec files themselves, whose extension is @file{.ads}.

No complete example is provided in this documentation. Instead, please
refer to the examples that you can find in the @file{testgtk/} and
@file{examples/} directory in the GtkAda distribution, since these are
more up-to-date (and more extensive).
They are heavily commented, and are likely to contain a lot of
information that you might find interesting.

If you are interested in getting support for GtkAda (including priority
bug fixes, early releases, help in using the toolkit, help in designing
your interface,@dots{}), please contact Ada Core Technologies
(sales@@gnat.com).


@c --------------------------------------------------------------------
@node Getting started with GtkAda
@chapter Getting started with GtkAda
@c --------------------------------------------------------------------

@noindent
This chapter describes how to start a new GtkAda application. It explains
the basic features of the toolkit, and shows how to compile and run your
application.

It also gives a brief overview of the extensive widget hierarchy available
in GtkAda.

@menu
* How to build and install GtkAda::
* Organization of the GtkAda package::
* How to compile an application with GtkAda::
* Architecture of the toolkit::
* Widgets Hierarchy::
@end menu

@c ---------------------------------------------------------------------
@node How to build and install GtkAda
@section How to build and install GtkAda
@c ---------------------------------------------------------------------

@noindent
This section explains how to build and install GtkAda on your machine.
It is Unix-oriented, since GtkAda is distributed in binary format on
Windows machines, and comes with all the dependent packages, including
the gtk+ libraries and @code{Glade}. If you are a Windows-user, you should
skip this section.

On Unix systems, you first need to install the glib and gtk+
libraries. Download the compatible packages from the gtk+ web site
(@url{http://www.gtk.org}, compile and install it.  When compiling glib,
make sure that the support for multithreading is enabled (this is
default, and can be enforced with the @code{--enable-threads
--with-threads} command line switches.

Change your PATH environment variable so that the script @code{gtk-config},
which indicates where gtk+ was installed and what libraries it needs is
automatically found by GtkAda. You will no longer need this script once
GtkAda is installed, unless you develop part of your application in C.

OpenGL support will not be activated in GtkAda unless you already have
the OpenGL libraries on your systems. You can for instance look at
Mesa, which is free implementation.

Optionally, you can also install the @code{Glade} interface builder. Get
the compatible package from the Glade web site, compile and install it.
The official version already knows about Ada (at least enough to call
GtkAda's own programs), so no patch is needed.

You can finally download the latest version of GtkAda from the web site.
Untar and uncompress the package, then simply do the following
steps:
@example
   > ./configure
   > make install
@end example

As usual with the @code{configure} script, you can specify where you want
to install the GtkAda libraries by using the @code{--prefix} switch.

If you have some OpenGL libraries installed on your system, you can make
sure that @code{configure} finds them by specifying the
@code{--with-GL-prefix} switch on the command line. @code{configure}
should be able to automatically detect the libraries however.

You must then make sure that the system will be able to find the dynamic
libraries at run time if your application uses them. Typically, you
would do one of the following:
@itemize @bullet
@item run @code{ldconfig} if you installed GtkAda in one of the standard
  location and you are super-user on your machine
@item edit @code{/etc/ld.conf} if you are super-user but did not install
  GtkAda in one of the standard location. Add the path that contains
  libgtkada.so (by default @file{/usr/local/lib} or @file{$prefix/lib}.
@item modify your @code{LD_LIBRARY_PATH} environment variable if you are
  not super-user. You should simply add the path to libgtkada.
@end itemize

@c ----------------------------------------------------------------------
@node Organization of the GtkAda package
@section Organization of the GtkAda package
@c ----------------------------------------------------------------------

In addition to the full sources, the GtkAda package contains a lot of
heavily commented examples. If you haven't been through those examples, we
really recommend that you look at them and try to understand them, since
they contain some examples of code that you might find interesting for
your own application.

@itemize @bullet

@item @file{testgtk/} directory:

This directory contains an application that tests all the widgets in GtkAda.
It gives you a quick overview of what can be found in the toolkit, as well
as some detailed information on the widgets and their parameters.

Each demo is associated with contextual help pointing to aspects worth
studying.

It also contains an OpenGL demo, if GtkAda was compiled with support for
OpenGL.

This program is far more extensive that its C counterpart, and the GtkAda
team has added a lot of new examples.

@item @file{examples/} directory:

This directory contains some small examples, unrelated to testgtk.  For
instance, this is where you will find some sample XML files for
@code{Gate} and @code{Dgate}, as well as some new widgets created
directly in Ada, as examples of how to create your own callback
marshallers.

On the whole these examples are a little more complex than testgtk but,
since they focus on demonstrating a precise concept, they are still quite
easy to understand.

@item @file{docs/} directory:

It contains the html, info, text and @TeX{} versions of the documentation you
are currently reading. Note that the documentation is divided into two
subdirectories, one containing the user guide, which you are currently
reading, the other containing the reference manual, which gives detailed
information on all the widgets found in GtkAda. The docs directory also
contains a subdirectory with some slides that were used to present GtkAda
at various shows.

@end itemize

@c ----------------------------------------------------------------------
@node How to compile an application with GtkAda
@section How to compile an application with GtkAda
@c ----------------------------------------------------------------------

This section explains how you can compile your own applications.
The procedure is system-dependent, and thus is divided into two
subsections.

@subsection Unix systems

@noindent
On Unix systems, a script called @code{gtkada-config} is automatically
created when you build GtkAda. This script is copied in a subdirectory
@file{bin/} in the installation directory.

The easiest and recommended way to build a GtkAda application is to
use the @code{gnatmake} program distributed with GNAT, that takes care of
all the dependencies for you. Use the @code{gtkada-config} to specify
where GtkAda and gtk+ libraries have been installed.

@example
   > gnatmake <main-file> `gtkada-config`
@end example

Note the use of back-ticks around gtkada-config, which force the shell to
evaluate the script and put the output on the command line.

However, on complex systems, gnatmake might not be enough. Users frequently
like to create @code{Makefile}s. The script @code{gtkada-config} remains
useful in that case, since you can call it from your Makefile (same
syntax as above with the back-ticks) to create variables like FLAGS and
LIBS. See the switches of @code{gtkada-config} below for more information.

The script @code{gtkada-config} understands the following command line
switches (chosen to be compatible with the ones set by @code{gtk-config}):

@itemize @bullet
@item @code{--cflags}: Output only the compiler flags, i.e the  include
  directories where the GtkAda spec files are found. This should be used
  if you only want to compile your files, but do not want to bind or link
  them.
@item @code{--libs}: Output only the switches for the linker. This lists
  the directories where all the GtkAda, gtk+, and dependant libraries are
  found. For instance, if GtkAda was compiled with support for OpenGL,
  the OpenGL libraries will automatically be present.
@item @code{--static}: Forces the libraries to be static libraries instead
  of dynamic ones.
@end itemize

@subsection Windows systems

Things are somewhat easier on Windows systems. You don't have access to the
@code{gtkada-config} script. However, the good news is that you also don't
have to specify which libraries to use or where to find them.

The only thing you should specify on the @code{gnatmake} command line is
where the GtkAda spec files are found, as in:

@smallexample
   > gnatmake <main-file> -Ic:\GtkAda\lib
@end smallexample

if GtkAda was installed in @file{c:\GtkAda}.

No static libraries are provided currently, so you can't create a static
version of your application and you will have to use the dynamic libraries.

@c ---------------------------------------------------------------------
@node Architecture of the toolkit
@section Architecture of the toolkit
@c ---------------------------------------------------------------------

@noindent
The gtk+ toolkit has been designed from the beginning to be portable.
It is made of three libraries, @code{gtk}, @code{gdk} and @code{glib}.

@code{Glib} is a non-graphical library, that includes support for lists,
h-tables, threads, etc@dots{} It is a highly optimized,
platform-independent library. Since most of its contents are already
available in Ada (or in the @file{GNAT.*} hierarchy in the GNAT
distribution), GtkAda does not include a binding to it, except for a few
required packages. These are the @file{Glib.*} packages in the GtkAda
distribution.

@code{Gdk} is the platform-dependent part of gtk+. Its implementation is
completely different on win32 systems and X11 systems, although the
interface is of course the same. It provides a set of functions to draw
lines, rectangles and pixmaps on the screen, manipulate
colors, etc@dots{} It has a complete equivalent in GtkAda, through the
@file{Gdk.*} packages.

@code{Gtk} is the top level library. It is platform independent, and
does all its drawing through calls to Gdk. This is where the high-level
widgets are defined. It also includes support for callbacks. Its
equivalent in the GtkAda libraries are the @file{Gtk.*} packages. It is
made of a fully object-oriented hierarchy of widgets (see @ref{Widgets
Hierarchy}).

Since your application only calls GtkAda, it is fully portable, and can
be recompiled as-is on other platforms.

@example
+---------------------------------------------+
|             Your Application                |
+---------------------------------------------+
|                 GtkAda                      |
|               +-----------------------------+
|               |            GTK              |
|       +-------+-----------------------------+
|       |           GDK                       |
+-------+--------------+--+-------------------+
|          GLIB        |  | X-Window / Win32  |
+----------------------+  +-------------------+
@end example

Although the packages have been evolving a lot since the first versions
of GtkAda, the specs are stabilizing now. We will try as much as possible
to provide backward compatibility whenever possible.

Since GtkAda is based on gtk+ we have tried to stay as close to it as possible
while using high-level features of the Ada95 language. It is
thus relatively easy to convert external examples from C to Ada.

We have tried to adopt a consistent naming scheme for Ada identifiers:
@itemize @bullet

@item The widget names are the same as in C, except that an underscore
sign (_) is used to separate words, e.g
@smallexample
Gtk_Button   Gtk_Color_Selection_Dialog
@end smallexample

@item Because of a clash between Ada keywords and widget names, there
are two exceptions to the above general rule:
@smallexample
Gtk.GEntry.Gtk_Entry   Gtk.GRange.Gtk_Range
@end smallexample

@item The function names are the same as in  C, ignoring the leading
@code{gtk_} and the widget name, e.g
@smallexample
gtk_misc_set_padding        @result{}  Gtk.Misc.Set_Padding
gtk_toggle_button_set_state @result{}  Gtk.Toggle_Button.Set_State
@end smallexample

@item Most enum types have been grouped in the @file{gtk-enums.ads} file

@item Some features have been implemented as generic packages. These
are the timeout functions (see Gtk.Main.Timeout), the idle functions
(see Gtk.Main.Idle), and the data that can be attached to any object
(see Gtk.Object.User_Data). Type safety is ensured through these
generic packages.

@item Callbacks were the most difficult thing to interface with. These
are extremely powerful and versatile, since the callbacks can have any
number of arguments, can return values, or not,etc@dots{} These are once
again implemented as generic packages, that require more explanation
(@pxref{Signal handling}).

@end itemize

@cartouche
@b{WARNING:} all the generic packages allocate some memory for internal
structures, and call internal functions. This memory is freed by gtk
itself, by calling some Ada functions. Therefore the generic packages
have to be instanciated at library level, not inside a subprogram, so
that the functions are still defined when gtk needs to free the memory.
@end cartouche


@c ----------------------------------------------------------------------
@node Widgets Hierarchy
@section Widgets Hierarchy
@c ----------------------------------------------------------------------

@noindent
All widgets in @code{GtkAda} are implemented as tagged types. They all have
a common ancestor, called @code{Gtk.Object.Gtk_Object}. All visual objects
have a common ancestor called @code{Gtk.Widget.Gtk_Widget}.

The following table describes the list of objects and their inheritance
tree. As usual with tagged types, all the primitive subprograms defined
for a type are also known for all of its children. This is a very
powerful way to create new widgets, as will be explained in
@ref{Creating new widgets in Ada}.

Although gtk+ was written in C its design is object-oriented, and thus
GtkAda has the same structure. The following rules have been applied to
convert from C names to Ada names: a widget @code{Gtk_XXX} is defined in
the Ada package @code{Gtk.XXX}, in the file @file{gtk-xxx.ads}. This
follows the GNAT convention for file names.  For instance, the
@code{Gtk_Text} widget is defined in the package @code{Gtk.Text}, in the
file @file{gtk-text.ads}.

Note also that most of the documentation for GtkAda is found in the spec
files themselves.

It is important to be familiar with this hierarchy. It is then easier to
know how to build and organize your windows. Most widgets are demonstrated
in the @file{testgtk/} directory in the GtkAda distribution.

@cartouche
@image{hierarchy, 22.8cm}
@smallexample
            @strong{Hierarchy of widgets in GtkAda}
@end smallexample
@end cartouche

@c ----------------------------------------------------------------------
@node Hierarchical composition of a window
@chapter Hierarchical composition of a window
@c ----------------------------------------------------------------------

@noindent
Interfaces in GtkAda are built in layers, as in Motif.
For instance, a typical dialog is basically a Gtk_Window, that in turn
contains a Gtk_Box, itself divided into two boxes and a Gtk_Separator,
and so on.

@iftex
@image{boxes, 14cm}
@end iftex

Altough this may seem more complicated than setting absolute positions
for children, this is the simplest way to automatically handle the
resizing of windows. Each container that creates a layer knows how it
should behave when it is resized, and how it should move its children.
Thus almost everything is handled automatically, and you don't have to do
anything to support resizing.

If you really insist on moving the children to a specific position, look
at the @code{Gtk_Fixed} widget and its demo in @file{testgtk/}. But you
really should not use this container, since you will then have to do
everything by hand.

All the containers are demonstrated in @file{testgtk/}, in the GtkAda
distribution. This should help you understand all the parameters
associated with the containers. It is very important to master these
containers, since using the appropriate containers will make building
interfaces a lot easier.

If you look at the widget hierarchy (@pxref{Widgets Hierarchy}),
you can see that a Gtk_Window inherits from Gtk_Bin, and thus can have
only one child. In most cases, the child of a Gtk_Window will thus
be a Gtk_Box, which can have any number of children.

Some widgets in GtkAda itself are built using this strategy, from the
very basic @code{Gtk_Button} to the more advanced
@code{Gtk_File_Selection}.

For example, by default a Gtk_Button contains a Gtk_Label, which
displays the text of the button (like ``OK'' or ``Cancel'').

However, it is easy to put a pixmap in a button instead. When you
create the button, do not specify any label. Thus, no child will be
added, and you can give it your own. See @file{testgtk/create_pixmap.adb}
for an example on how to do that.


@c ----------------------------------------------------------------------
@node Signal handling
@chapter Signal handling
@c ----------------------------------------------------------------------

@noindent
In GtkAda, the interaction between the interface and the core
application is done via signals. Most user actions on the graphical
application trigger some signals to be @samp{emitted}. 

A signal is a message that an object wants to broadcast. It is
identified by its name, and each one is associated with certain events
which happen during the widget's lifetime. For instance, when the user
clicks on a Gtk_Button, a "clicked" signal is emitted by that
button.More examples of signals can be found in the GtkAda reference
manual.

It is possible to cause the application to react to such events by
@samp{connecting} to a signal a special procedure called a
@samp{handler} or @samp{callback}.  This handler will be called every
time that signal is emitted, giving the application a chance to do any
processing it needs. More than one handler can be connected to the
same signal on the same object; the handlers are invoked in the order
they were connected.

Depending on their type, the widgets define zero (e.g
@code{Gtk_Label}), one or several different signals. Of course, the signals,
as every thing else, are inherited from the parents, thus every widget answers
to a lot of signals.

The easiest way to find out what signals can be emitted by a widget is to
look at the GtkAda reference manual. Hopefully, every widget will finally
be documented there. That document explains when the signal is emitted,
and the general form that handlers should have (although you can always add
a User_Data is you wish).

In the meantime, you can also look directly at the C header files,
distributed with the gtk+ library. Each widget is described in its own C
file and has two C structures associated with it. One of them is the
``class'' structure, and contains a series of pointers to
functions. Each of these functions has the same name as the signal name.

For instance, consider the following extract from gtkbutton.h:
@example
@b{struct} _GtkButtonClass
@{
  GtkBinClass        parent_class;
  
  @b{void} (* pressed)  (GtkButton *button);
  @b{void} (* released) (GtkButton *button);
  @b{void} (* clicked)  (GtkButton *button);
  @b{void} (* enter)    (GtkButton *button);
  @b{void} (* leave)    (GtkButton *button);
@};
@end example

This means that the Gtk_Button widget redefines five new signals, called
respectively @code{"pressed"}, @code{"release"}, ...

The profile of the handler can also be deduced from those pointers:
The handler has the same arguments, plus an optional User_Data parameter
that can be used to pass any kind of data to the handler.  When the
User_Data parameter is used, the value of this data is specified when
connecting the handler to the signal. It is then given back to the
handler when the signal is raised.

Therefore, the profile of a handler should look like:
@example
   procedure Pressed_Handler (Button : access Gtk_Button_Record'Class;
                              User_Data   : ...);
@end example

The callback does not need to use all the arguments. It is legal to use
a procedure that "drops" some of the last arguments.
The User_Data is a special case, since you decide at connection time whether
you want it or not. If you decided to have it then you callback must
accept it, and this is checked by the compiler.

Any number of arguments can be dropped as long as those arguments are
the last ones in the list and you keep the first one. For instance,
the signal "button_press_event" normally can be connected to a
handler with any of the following profiles:

@example
   --  with a user_data
   procedure Handler (Widget    : access Gtk_Widget_Record'Class;
                      Event     : Gdk.Event.Gdk_Event;
                      User_Data : ...);
   procedure Handler (Widget    : access Gtk_Widget_Record'Class;
                      User_Data : ...);

   --  without a user_data
   procedure Handler (Widget    : access Gtk_Widget_Record'Class;
                      Event     : Gdk.Event.Gdk_Event);
   procedure Handler (Widget    : access Gtk_Widget_Record'Class);
@end example

Beware that adding new arguments is not possible, since no value would
be provided for them. When connecting a handler GtkAda will not always
verify that your handler does not have more arguments than expected, so
caution is recommended (it only does so if you use the @code{Gtk.Marshallers}
package, see below).

All the signal-handling work is performed by using the services provided
by the Gtk.Handlers package. This package is completely self-documented,
so please check the documentation for this package either in the GtkAda
Reference Manual or in the specifications themselves.

Here is a commented example of how to use it; the complete example can
be found in create_file_selection.adb (inside the testgtk/
directory). Let's imagine that an application opens a file selector to
allow the user to select a file.  GtkAda provides a high-level widget
called Gtk_File_Selection which can be used in this case:

@example
   declare
      Window : Gtk_File_Selection;
   begin
      Gtk.File_Selection.Gtk_New (Window, Title => "Select a file");
   end;
@end example

When the "OK" button is pressed, the application needs to retrieve the
file selected and then close the dialog. All we need to know in that
procedure is what widget to operate on. This can be achieved by the
following handler:

@need 3000
@smallexample
   procedure OK (Files : access Gtk_File_Selection_Record'Class) is
   begin
      Ada.Text_IO.Put_Line ("Selected " & Get_Filename (Files));
      --  Prints the name of the selected file.
      Destroy (Files);
      --  Destroys the file selector dialog
   end Ok;
@end smallexample

We now need to connect the object we created in the first part and this
new callback we just defined. As documented in the reference manual,
Gtk.Handlers defines four types of generic packages, depending on the
arguments one expects in the callback and whether the callback returns a
value or not. Note that you can not arbitrarily choose to return a value,
this depends on the signal, as explained above.

In our case, since our callback does not return any value and does not
have any User_Data (ie we don't need to pass it extra values, defined
at connection time), the appropriate package is Gtk.Handlers.Callback.

We thus instantiate that package. Once again, remember that the generic
packages in GtkAda need to be present in memory at all time, since they
take care of freeing the memory they are using when finished. They must
be instantiated at library level and not inside a subprogram.

@example
   package Files_Cb is new 
      Handlers.Callback (Gtk_File_Selection_Record);
@end example

As you can see in @code{Gtk.Handlers}, this package now provides a set
of Connect subprograms than can be used to establish a permanent tie
between a widget and a handler. It also provides a set of other
subprograms which one can use to emit the signals manually, although
most of the time the signals are simply emitted internally by GtkAda. We
will not discuss the Emit_By_Name subprograms here.

The general form of handler, as used in @code{Gtk.Handlers}, expects some
handlers that take two or three arguments: the widget on which the
signal was applied, an array of all the extra arguments sent internally
by GtkAda, and possibly some user data given when the connection was
made.

This is the most general form of handler and it covers all the possible
cases. However, it also expects the user to manually extract the needed
values from the array of arguments. This is not always the most convenient
solution. This is why GtkAda provides a second package related to signals,
@code{Gtk.Marshallers}.

This package provides a set of functions that can be used as callbacks
directly for GtkAda, and that will call your own handlers after extracting
the required values from the array of arguments. Although this might sound
a little bit complicated, this is in fact a very powerful mechanism, in fact
similar to what is done internally by gtk+ in C. This does not add any
overhead compared to C programs, since we do basically the same thing but at
the Ada level.

A set of functions @code{To_Marshaller} is found in every generic package
in @code{Gtk.Handlers}. They take a single argument, the name of the function
you want to call, and return a handler that can be used directly in
@code{Connect}.

The connection is then done with the following piece of code. Note that this
can be done just after creating the widget, in the same block. As soon as it
is created, a widget is ready to accept connections (although no signals will
be emitted before the widget is shown on the screen).

Note the two following things: we use @code{To_Marshaller} since our
handler does not accept the array of arguments as a parameter, and we use the
special @code{Object_Connect} procedure. This means that the parameter to
our callback (Files) will be the Slot_Object given in Object_Connect, instead
of being the button itself.

@example
   Files_Cb.Object_Connect
     (Get_Ok_Button (Window),  --  The object to connect to the handler
      "clicked",               --  The name of the signal
      Files_Cb.To_Marshaller (Ok'Access),  --  The signal handler
      Slot_Object => Window);
@end example


@c ----------------------------------------------------------------------
@node Starting an application with GtkAda
@chapter Starting an application with GtkAda
@c ----------------------------------------------------------------------

You need to perform some initializations to start a GtkAda application:
@example
@c @group
@c @cartouche
--  predefined units of the library
@b{with} Gtk.Rc;
@b{with} Gtk.Main;
@b{with} Gtk.Enums;
@b{with} Gtk.Window;
...
--  My units
@b{with} Callbacks;
...
@b{procedure} Application is
   @b{procedure} Create_Window @b{is} ...

@b{begin}
   --  Set the locale specific datas (e.g time and date format)
   Gtk.Main.Set_Locale;

   --  Initializes GtkAda
   Gtk.Main.Init;

   --  Load the resources
   Gtk.Rc.Parse ("application.rc");

   --  Create the main window
   Create_Window;

   --  Signal handling loop
   Gtk.Main.Main;
@b{end} Application;
@c @end cartouche
@c @end group
@end example

the @code{Create_Window} procedure looks like

@example
@c @group
@c @cartouche
   @b{procedure} Create_Window @b{is}
      Main_Window : Gtk.Window.Gtk_Window;
      ...
   @b{begin}
      Gtk.Window.Gtk_New
        (Window   => Main_Window,
         The_Type => Gtk.Enums.Window_Toplevel);

      --  From Gtk.Widget:
      Gtk.Window.Set_Title (Window => Main_Window, Title  => "Editor");

      --  Construct the window and connect various callbacks

      ...
      Gtk.Window.Show_All (Main_Window);
   @b{end} Create_Window;
@c @end cartouche
@c @end group
@end example

@node Description of the GDK hierarchy
@chapter Description of the GDK hierarchy
GTK is based on a lower level layer called GDK that contains some simple
drawing and window primitives.

@menu
* Package Gdk.Point::
* Package Gdk.Window::
* Package Gdk.Drawable::
* Package Gdk.Font::
* Draw in a widget::
@end menu

@node Package Gdk.Point
@section Package Gdk.Point
@example
@c @group
@c @cartouche
@b{type} Gdk_Point @b{is private};
@c @end cartouche
@c @end group
@end example

Used to describe polygons.

@example
@c @group
@c @cartouche
@b{type} Gdk_Points_Array @b{is array} (Positive @b{range} <>) @b{of} Gdk_Point;

@b{function} Get_X (Point : @b{in} Gdk_Point) @b{return} Glib.Gint16;
@b{function} Get_Y (Point : @b{in} Gdk_Point) @b{return} Glib.Gint16;
@b{procedure} Set_X (Point : @b{in out} Gdk_Point; X : Glib.Gint16);
@b{procedure} Set_Y (Point : @b{in out} Gdk_Point; Y : Glib.Gint16);
@c @end cartouche
@c @end group
@end example
 
@node Package Gdk.Window
@section Package Gdk.Window
@example
@c @group
@c @cartouche
@b{type} Gdk_Window @b{is new} Root_Type @b{with private};
@c @end cartouche
@c @end group
@end example

To clear a window (e.g before drawing):
@example
@c @group
@c @cartouche
@b{procedure} Clear (Window : @b{in out} Gdk_Window);
@c @end cartouche
@c @end group
@end example
 
@node Package Gdk.Drawable
@section Package Gdk.Drawable
@example
@c @group
@c @cartouche
@b{subtype} Gdk_Drawable @b{is} Gdk.Window.Gdk_Window;
@c @end cartouche
@c @end group
@end example

@example
@c @group
@c @cartouche
   @b{procedure} Draw_Rectangle (Drawable : @b{in} Gdk_Drawable'@b{Class};
                             Gc       : @b{in} Gdk.GC.Gdk_GC'@b{Class};
                             Filled   : @b{in} Boolean := False;
                             X        : @b{in} Gint;
                             Y        : @b{in} Gint;
                             Width    : @b{in} Gint;
                             Height   : @b{in} Gint);
 
   @b{procedure} Draw_Point (Drawable : @b{in} Gdk_Drawable'@b{Class};
                         Gc       : @b{in} Gdk.GC.Gdk_GC'@b{Class};
                         X        : @b{in} Gint;
                         Y        : @b{in} Gint);
 
   @b{procedure} Draw_Line (Drawable : @b{in} Gdk_Drawable'@b{Class};
 
   @b{procedure} Draw_Line (Drawable : @b{in} Gdk_Drawable'@b{Class};
                        Gc       : @b{in} Gdk.GC.Gdk_GC'@b{Class};
                        X1       : @b{in} Gint;
                        Y1       : @b{in} Gint;
                        X2       : @b{in} Gint;
                        Y2       : @b{in} Gint);
 
   @b{procedure} Draw_Arc (Drawable : @b{in} Gdk_Drawable'@b{Class};
                       Gc       : @b{in} Gdk.GC.Gdk_GC'@b{Class};
                       Filled   : @b{in} Boolean := False;
                       X        : @b{in} Gint;
                       Y        : @b{in} Gint;
                       Width    : @b{in} Gint;
                       Height   : @b{in} Gint;
                       Angle1   : @b{in} Gint;
                       Angle2   : @b{in} Gint);
 
   @b{procedure} Draw_Polygon (Drawable : @b{in} Gdk_Drawable'@b{Class};
                           Gc       : @b{in} Gdk.GC.Gdk_GC'@b{Class};
                           Filled   : @b{in} Boolean;
                           Points   : @b{in} Gdk.Point.Gdk_Points_Array);
   @b{procedure} Draw_Text
     (Drawable    : @b{in} Gdk_Drawable'@b{Class};
      Font        : @b{in} Gdk.Font.Gdk_Font;
      Gc          : @b{in} Gdk.GC.Gdk_GC;
      X           : @b{in} Glib.Gint;
      Y           : @b{in} Glib.Gint;
      Text        : @b{in} String);
@c @end cartouche
@c @end group
@end example

for all the procedures (in particular @code{Draw_Arc}), the parameters are:
@itemize @bullet
 
@item [X, Y] Position of the point or of the upper left corner or the rectangle.
 
@item [Width, Height] Width and height of the rectangle or of the rectangle
containing an ellipse.
 
@item [Angle1]  Starting angle of the arc in 1/64th degrees.
 
@item [Angle2]  Ending angle relative to Angle1 in 1/64th degrees.

@item [Font]  A font, that can be loaded using @code{Gdk.Font.Load}.
              For example:
@example
@c @group
@c @cartouche
   Gdk.Font.Load
     (Font, "-adobe-courier-medium-i-*-*-15-*-*-*-*-*-*-*");
@c @end cartouche
@c @end group
@end example
@end itemize

@node Package Gdk.Font
@section Package Gdk.Font
A font describes the graphical aspect of the characters, their size,
kind, @dots{}.

Under @code{X11}, each font has a name of the form:
@example
@c @group
@c @cartouche
"-adobe-courier-medium-i-*-*-15-*-*-*-*-*-*-*"
@c @end cartouche
@c @end group
@end example

The X command @code{xfontsel} lets you select a font and build its associated
name automatically.
 
@example
@c @group
@c @cartouche
   @b{type} Gdk_Font @b{is new} Root_Type @b{with private};
 
   @b{procedure} Load
     (Font      :    @b{out} Gdk_Font;
      Font_Name : @b{in}     String);
 
   @b{procedure} Fontset_Load
     (Font         :   @b{out} Gdk_Font;
      Fontset_Name : @b{in}    String);
 
   @b{function} Id (Font : @b{in} Gdk_Font) @b{return} Gint;
 
   @b{function} "=" (Fonta, Fontb : @b{in} Gdk_Font) @b{return} Boolean;
 
   @b{function} String_Width
     (Font : @b{in} Gdk_Font;
      Str  : @b{in} String) @b{return} Gint;
 
   @b{function} Text_Width
     (Font : @b{in} Gdk_Font;
      Text : @b{in} String) @b{return} Gint;
 
   @b{function} Char_Width
     (Font : @b{in} Gdk_Font;
      Char : @b{in} Character) @b{return} Gint;
 
   @b{function} String_Measure
     (Font : @b{in} Gdk_Font;
      Str  : @b{in} String) @b{return} Gint;
 
   @b{function} Text_Measure
     (Font : @b{in} Gdk_Font;
      Text : @b{in} String) @b{return} Gint;
 
   @b{function} Char_Measure
     (Font : @b{in} Gdk_Font;
      Char : @b{in} Character) @b{return} Gint;
@c @end cartouche
@c @end group
@end example

@code{Width} gives the sum of the characters' widths,
@code{Measure} gives a value similar to @code{Width} except that it takes
into account the attributes of the font (e.g @code{italic}).

@node Draw in a widget
@section Draw in a widget

To select a drawing area, use a @code{Gtk_Drawing_Area} widget.
The drawing procedures apply to the Gdk window
(see @code{Gdk_Window} and @code{Gdk_Drawable}) of the
@code{Gtk_Drawing_Area} widget via a graphic context (see @code{Gtk_Gc}).

Typically the code will look like:

@example
@c @group
@c @cartouche
@b{with} Glib;
@b{with} Gdk.Window;
@b{with} Gdk.Drawable;
@b{with} Gdk.GC;
@b{with} Gdk.Font;

@b{procedure} Draw (Drawing : @b{in} @b{out} Gtk.Drawing_Area.Gtk_Drawing_Area) @b{is}
   Gdkw : Gdk.Window.Gdk_Window;
   GC   : Gdk.GC.Gdk_GC;
   Font : Gdk.Font.Gdk_Font;
   @b{use} @b{type} Glib.Gint;

@b{begin}
   -- Get the Gdk window

   Gdkw := Gtk.Drawing_Area.Get_Window (Drawing) ;

   -- Clear the window

   GDK.Window.Clear (Gdkw) ;

   -- Create a graphic context associated with this window

   Gdk.GC.Gdk_New (GC, Gdkw);

   -- Draw a line in this window

   Gdk.Drawable.Draw_Line
     (Drawable => Gdkw,
      GC => GC,
      X1 =>   0, Y1 =>   0,
      X2 => 100, Y2 => 100);

   -- Draw an arc

   Gdk.Drawable.Draw_Arc
     (Drawable => Gdkw,
      Gc       => gc,
      Filled   => True,
      X        => 100,
      Y        => 100,
      Width    => 200,
      Height   => 100,
      Angle1   => 0 * 64,
      Angle2   => 270 * 64);

   -- Ask for a given font

   Gdk.Font.Load (Font, "-adobe-courier-medium-i-*-*-15-*-*-*-*-*-*-*");
   Gdk.Drawable.Draw_Text
     (Drawable    => Gdkw,
      Font        => Font,
      Gc          => gc,
      X           => 50,
      Y           => 50,
      Text        => "Hello World");
   Gdk.Font.Destroy (Font);
   Gdk.GC.Destroy (GC);
@b{end} Draw;
@c @end cartouche
@c @end group
@end example

@node Resource files
@chapter Resource files

Resource files let you parametize aspects of the widgets in a GtkAda
application without having to recompile it.

A resource file needs to be loaded (@code{Gtk.Rc.Parse}) @var{before} setting
the corresponding window.

In this file, it is possible to specify the visual characteristics of the
widgets (colors, fonts, @dots{}).
Under X, the @code{xfontsel} command allows you to easily select a font.
The FontSelection widget is also a simple way to select fonts.

Here is an example of a resource file:
@example
# application.rc
#
# resource file for "Application"

# Buttons style
style "button"
@{
# BackGround Colors
#                  Red  Green  Blue
  bg[PRELIGHT] = @{ 0.0,  0.75, 0.0 @} # Green when the mouse is on
                                     # the button
  bg[ACTIVE]   = @{ 0.75, 0.0,  0.0 @} # Red on click
# ForeGround Colors
#                  Red  Green  Blue
  fg[PRELIGHT] = @{ 1.0,  1.0,  1.0 @} # White when the mouse is on
                                     # the button
  fg[ACTIVE]   = @{ 1.0,  1.0,  1.0 @} # White on click
@}

# All the buttons will have the style "button"
widget_class "*GtkButton*" style "button"

# Text style
style "text"
@{
  font = "-adobe-courier-medium-r-normal-*-15-*-*-*-*-*-*-*"
  text[NORMAL] = @{ 0.0, 0.0, 0.0 @} # black
  fg[NORMAL]   = @{ 0.0, 0.0, 0.0 @} # black
  base[NORMAL] = @{ 1.0, 1.0, 1.0 @} # white : background color
@}

# All Gtk_Text will have the "text" style
widget_class "*GtkText" style "text"
@end example


@node Memory management
@chapter Memory management

GtkAda takes care of almost all the memory management for you.
Here is a brief overview of how this works, you'll have to check the sources
if you want more detailed information.
Gtk+ (the C library) does its own memory management through reference
counting, i.e. any widget is destroyed when it is no longer referenced anywhere
in the application.

In GtkAda itself, a ``user_data'' is associated with each object
allocated by a @code{Gtk_New} procedure. A ``destroy'' callback is also
associated to be called when the object to which the 
user_data belongs is destroyed (see Gtk.Initialize_User_Data).
Thus, every time a C object is destroyed, the equivalent Ada structure is also
destroyed (see Gtk.Free_User_Data).
 
Concerning widgets containing children, 
every container holds a reference to its children, whose reference counting is
thus different from 0 (and generally 1). When the container is destroyed, the 
reference of all its children and grand-children is decremented, and they are 
destroyed in turn if needed. So the deallocation of a widget hierarchy is also
performed automatically.

@node Tasking with GtkAda
@chapter Tasking with GtkAda

The Glib library can be used in a task-safe mode by calling Gdk.Thread.Init
before making any other Glib calls. In this mode Glib automatically locks all
internal data structures as needed. This does not mean that two tasks can
simultaneously access, for example, a single hash table, but they can access
two different hash tables simultaneously. If two different tasks need to
access the same hash table, the application is responsible for locking itself
(e.g by using protected objects).

When Glib is initialized to be task-safe, GtkAda is task aware. There is
a single global lock that you must acquire with Gdk.Threads.Enter before
making any Gdk/Gtk call, and which you must release with
Gdk.Threads.Leave afterwards. 

Beware that the GtkAda main loop (Gtk.Main.Main) can only be be run inside
one specific tasks. In other words, you cannot call Gtk.Main.Main from
any task other than the one that started the outer level main loop.

Note that Gdk.Threads assumes that you are using a tasking run time that maps
Ada tasks to native threads. For example under Linux with GNAT, you need to
change the default tasking run time for that purpose.

A minimal main program for a tasking GtkAda application looks like: 

@example
@b{with} Gdk.Threads;
@b{with} Gtk.Main;
@b{with} Gtk.Enums; @b{use} Gtk.Enums;
@b{with} Gtk.Window; @b{use} Gtk.Window;

@b{procedure} GtkAda_With_Tasks @b{is}
   Window : Gtk_Window;
@b{begin}
   Gdk.Threads.Init;
   Gtk.Main.Init;

   Gtk_New (Window, Window_Toplevel);
   Show (Window);

   Gdk.Threads.Enter;
   Gtk.Main.Main;
   Gdk.Threads.Leave;
@b{end} GtkAda_With_Tasks;
@end example

Callbacks require a bit of attention. Callbacks from GtkAda (signals) are made
within the GtkAda lock. However, callbacks from Glib (timeouts, IO callbacks,
and idle functions) are made outside of the GtkAda lock. So, within a signal
handler you do not need to call Gdk.Threads.Enter, but within the other types
of callbacks, you do.

@node Object-oriented features
@chapter Object-oriented features

GtkAda has been designed from the beginning to provide a full Object
oriented layer over gtk+. This means that features such as type
extension, dynamic dispatching, ... are made available through the
standard Ada language.

This section will describe both how things work and how you can extend
existing widgets or even create your own.

@menu
* General description of the tagged types::
* Using tagged types to extend Gtk widgets::
* Creating new widgets in Ada::
@end menu

@node General description of the tagged types
@section General description of the tagged types

@subsection Why should I use object-oriented programing ?
Every widget in GtkAda is a tagged type and has a number of
primitive subprograms which are known to all its children.

This means that, as opposed to what you see in C code, you don't have
(well most of the time you don't) to explictly cast types and, even
when you have to, Ada always makes sure that the conversion is valid.

Thus your programs are much safer and most errors are found at compile
time, as is usually the case with Ada.

For instance, if you create a table, put some widgets in it, and then,
later in your program, try to access those widgets, then you do not need
to know beforehand what their type is, when and by whom they were
created, ... You simply ask for the children of the table, and you get
in return a tagged type that contains all the information you need. You
can even use dynamic dispatching without ever having to cast to a known
type.

This makes GtkAda a very powerful tool for designing graphical interfaces.

If you think one of the standard widgets is nice, but would be even
better if it was drawing itself in a slighlty different way, of if it could
contain some other data that you need in your application, there is a very
simple way to do it: just create a new type that extends the
current one (see the section @ref{Using tagged types to extend Gtk widgets}
below.

Maybe you want to create your own brand new widget, that knows how to draw
itself, how to react to events, ... and you want to be able to reuse it
anytime you need ? Once again, using the standard Ada features, you can
simply create a new tagged type and teach it how to interact with the user.
See the section @ref{Creating new widgets in Ada} below.

@subsection Type conversions from C to Ada widgets

There are basically three kinds of widgets that you can use with GtkAda:
@itemize @bullet
@item @i{Ada widgets}:
These are widgets that are written directly in Ada, using the object
oriented features of GtkAda
@item @i{Standard widgets}:
These are the widgets that are part of the standard gtk+ and GtkAda
distributions. This include all the basic widgets you need to build
advanced interfaces.
@item @i{imported C widgets}
These are widgets that were created in C, and for which you (or someone else)
created an Ada binding. This is most probably the kind of widgets you will
have if you want to use third party widgets.
@end itemize

GtkAda will always be able to find and/or create a valid tagged type in
the first case, no matter if you explicitly created the widget or if it
was created automatically by gtk+. For instance, if you created a widget
in Ada, put it in a table, and later on extracted it from the table, then you
will still have the same widget.

There are two issues: if the widget was explictly created by you,
or at least by GtkAda, then it will always be and remain associated with a
correct Ada type.

However, if the widget was created implicitly (for instance every time you
create a Gtk_Button, a Gtk_Label is also created for the text displayed), then
GtkAda is not, by default, able to create the corresponding Ada type. Instead
it will create a Gtk_Widget, and you will thus have to do an Uncheck_Cast
to convert it back to the type you want and expect.

In the third case (imported C widgets), GtkAda is not, by default, able to
create the corresponding Ada type.

The solution we suggest to solve these two issues is to 'with' the
@b{Gtk.Type_Conversion} unit. In that case, every standard widget, no matter who
created them, will always be correctly converted to an appropriate Ada type.
So, basically, if you put the following in your main unit:

@example
@b{with} Gtk.Type_Conversion;

@b{begin}
   Gtk.Main.Init;
   Gtk.Type_Conversion.Init;
   ...
@b{end}
@end example

then you can safely get the children of any widget (table, boxes, ...) and be
sure you have the right Ada type. You won't need to explictly convert your
widget to something else.

However, 'with'ing this unit means that your application will depend on every
package of GtkAda, which is a little bit heavier, and explains why this is not
the default. We do recommend you use it if it is not extremely important
whether your application depends on all the packages of GtkAda.

The case of imported C widgets is a little bit trickier. Since GtkAda does not
know anything about them when it is built, it can't magically convert the C
widgets to Ada widgets. This is your job to teach GtkAda how to do the
conversion.

We thus provide a 'hook' function which you need to modify. This function is
defined in the package @b{Gtk.Type_Conversion}. It is a function that takes
a string with the name of the C widget (ex/ "GtkButton"), and expects a newly
allocated pointer in return. If you don't know this type either, simply
return @b{null}.

@node Using tagged types to extend Gtk widgets
@section Using tagged types to extend Gtk widgets

Since version 0.6 of this toolkit, it is possible to associate your
own data with existing widgets simply by creating new types. This
section will show you a simple example, but you should rather read the
source code in testgtk/ where we used this feature instead of using
@code{user_data} as is used in the C version.

@example
@c @group
@c @cartouche
@b{type} My_Button_Record @b{is new} Gtk_Button_Record @b{with record}
    --  whatever data you want to associate with your button
@b{end record};
@b{type} My_Button @b{is access all} My_Button_Record'@b{Class};
@c @end cartouche
@c @end group
@end example

With the above statements, your new type is defined. Every function
available for @code{Gtk_Button} is also available for @code{My_Button}.
Of course, as with every tagged type in Ada, you can create your own
primitive functions with the following prototype:

@example
@c @group
@c @cartouche
@b{procedure} My_Primitive_Func (Myb : @b{access} My_Button_Record);
@c @end cartouche
@c @end group
@end example

To instanciate an object of type @code{My_Button} in your application, do
the following:

@example
@c @group
@c @cartouche
@b{declare}
   Myb : My_Button;
@b{begin}
   Myb := @b{new} My_Button_Record;
   Initialize (Myb);   --  from Gtk.Button
@b{end};
@c @end cartouche
@c @end group
@end example

The first line creates the Ada type, whereas the @code{Initialize} call
actually creates the C widget and associates it with the Ada type.

@node Creating new widgets in Ada
@section Creating new widgets in Ada

With GtkAda, you can now create widgets directly in Ada. These new
widgets can be used directly, as if they were part of gtk itself.

Creating new widgets is a way to create reuseable components. You can
apply to them the same functions as would for any other widget, such as
Show, Hide, ...

This section will explain how to create two types of widgets: composite
widgets and widgets created from scratch. Two examples are provided with
GtkAda, in the directories @file{examples/composite_widget} and
@file{examples/base_widget}. Please also refer to the gtk+ tutorial,
which describes the basic mechanisms that you need to know to create
a widget (even if the Ada code is really different from the C code...)

@menu
* Creating composite widgets::
* Creating widgets from scratch::
@end menu

@node Creating composite widgets
@subsection Creating composite widgets

A composite widget is a widget that does not do much by itself. Rather,
this is a collection of subwidgets grouped into a more general entity.
For instance, among the standard widgets, @code{Gtk_File_Selection} and
@code{Gtk_Font_Selection} belong to this category.

The good news is that there is nothing special to know. Just create a
new tagged type, extending one of the standard widgets (or even another
of your own widgets), provide a @code{Gtk_New} function that allocates
memory for this widget, and call the @code{Initialize} function that does
the actual creation of the widget and the subwidgets.
There is only one thing to do: @code{Initialize} should call the
parent class's @code{Initialize} function, to create the underlying C
widget.

The example directory @file{examples/composite_widget} reimplements the
@code{Gtk_Dialog} widget as written in C by the creators of gtk+.

@node Creating widgets from scratch
@subsection Creating widgets from scratch

First, an important note: please do not read this if this is your first
time using GtkAda or if you don't really understand the signal mechanism.
Creating a nice and working widget really takes a lot of messing with the
low level signals.

Creating a widget from scratch is what you want to do if your widget should
be drawn in a special way, should create and emit new signals, ...
The example we give in @file{examples/base_widget} is a small target on
which the user can click, and that sends one of two signals "bullseye" or
"missed", depending on where the user has clicked.

Once again, the only two functions that you must create are @code{Gtk_New}
and @code{Initialize}.
This time, @code{Initialize} has to do two things:

@example
   Parent_Package.Initialize (Widget);

   --  The above line calls the Initialize function from the parent.
   --  This creates the underlying C widget, which we are going to
   --  modify with the following call:

   Gtk.Object.Initialize_Class_Record
       (Widget, Signals, Class_Record);
   --  This initializes the "class record" for the widget and
   --  creates the signals.
@end example

In the above example, the new part is the second call. It takes three
arguments:
@itemize @bullet
@item Widget
This is the widget that you want to initialize
@item Signals
This is an array of string access containing the name of the signals
you want to create. For instance, you could create Signals with
@example
   Signals      : Gtk.Object.Signal_Array (0 .. 1) :=
     (0 => @b{new} String' ("bullseye" & ASCII.Nul),
      1 => @b{new} String' ("missed" & ASCII.Nul));
@end example
This will create two signals, named "bullseye" and "missed", whose callbacks
do not take any argument (apart from the usual user's data). This is the only
restriction from GtkAda compared to gtk+: all the callbacks are created
automatically, but you can not specify additional parameters to be sent
automatically by GtkAda.

@item Class_Record
Every widget in C is associated with two records. The first one, which exists
only once per widget type, is the ``class record''. It contains the list of
signals that are known by this widget type, the list of default callbacks for
the signals, ...; the second record is an ``instance record'', which contains
data specific to a particular instance.
In GtkAda, the ``instance record'' is simply your tagged type and its fields.
The call to @code{Initialize_Class_Record} is provided to initialize the
``class record''. As we said, there should be only one such record per widget
type. This parameter ``Class_Record'' will point to this records, once it is
created, and will be reused for every instanciation of the widget.

@end itemize

Then of course @code{Initialize} should set up some signal handlers for
the functions you want to redefine.
Three signals are especially useful:

@itemize @bullet

@item "size_request"

This callback is passed one parameter, as in :
@example
   @b{procedure} Size_Request
      (Widget      : @b{access} My_Widget_Record;
       Requisition : @b{in out} Gtk.Widget.Gtk_Requisition);
@end example
This function should modify Requisition to specify the widget's ideal
size. This might not be the exact size that will be set, since some
containers might decide to enlarge or to shrink it.

@item "size_allocate"

This callback is called every time the widget is moved in its parent
window, or it is resized. It is passed one paramater, as in :
@example
   @b{procedure} Size_Allocate
      (Widget     : @b{access} My_Widget_Record;
       Allocation : @b{in out} Gtk.Widget.Gtk_Allocation)
@end example
This function should take the responsability to move the widget, using
for instance @code{Gdk.Window.Move_Resize}.

@item "expose_event"

This callback is called every time the widget needs to be redrawn. It
is passed one parameter, the area to be redrawn (to speed things up, you
don't need to redraw the whole widget, just this area).

@end itemize


@node Support for Glade the Gtk GUI builder
@chapter Support for Glade, the Gtk GUI builder

@section Introduction
GtkAda now comes with support for the GUI builder Glade (this is not
the glade released with Gnat for distributed systems).
Using Glade itself is straightforward: it is an intuitive point and click
GUI builder. The main difference from other builders is that, since GtkAda
builds a UI with blocks by default, you will not be asked to set the size and
position of your windows by default. If you are looking for this kind of
interaction you should consider using the Gtk_Fixed container. However, please
read the GtkAda reference manual before considering using Gtk_Fixed.

@section Using Glade
Note that we only recommend using version 0.5.5 of Glade, as some previous
versions are not compatible. Using this version you can directly create Ada
files from Glade by selecting Ada95 as the language under project options.
By doing so, you will tell Glade to call Gate internally when using the
``Write Source Code'' functionality.
Glade saves your interface in a project file whose syntax is XML
based. In the following sections, we will refer to this file as either
``the XML file'' or ``the project file'' interchangeably.

@section Gate
@subsection Invoking Gate
Gate is the static version of our support. This tool
takes the Glade XML file as an argument and generates a set of Ada files that,
when compiled, will recreate the interface you just designed with Glade.
To invoke it, simply call gate will a Glade project file This will generate
Ada files in the directory set as the ``Source Directory'' project option,
or otherwise in the current working directory.

@subsection Structure of the generated files
@subsubsection The main file
The main file is the name of the program name specified in the XML Glade file:
@code{<program name>.adb}. It contains initialization and creation code for
each top level widget contained in the XML file. This is intended as a
convenient default to visualize your GUI, but you will usually want to modify
this initialization.

@subsubsection Top level widget files
For each top level widget, Gate will generate a package
@code{<widget>_Pkg.Callbacks} in the files @code{<widget_pkg-callbacks.ads} and
@code{.adb}. These packages contain all the GtkAda calls needed to create the
widgets you designed within Glade. You will usually not need to modify these
files yourself.

@subsubsection Main handler file
This file, called @code{callbacks_<program name>.ads} contains all the Handler
package instantiations needed by your application. You will usually not need
to modify it.

@subsubsection Top level widget signal files
These are the most important files created by Gate. Each is called
@code{<widget_name>_pkg-callbacks.adb}.
They contain stubs for all the callbacks related to a top level widget
you declared in Glade. With the main file, this the only files you should modify
yourself. Note that it is recommended that you structure your application such that
the real code is put in separate packages (i.e not generated files) as much
as possible, to avoid potential merging problems when your interface is
significantly changed within Glade. See next section for more details.

Currently, Gate will generate callback stub procedures that can
handle the expected number of arguments for each signal. This is done using
a relatively low level mechanism explained in the reference manual
(package Gtk.Handlers). Basically, callbacks expecting arguments will take
a Gtk_Argument as their only parameter, and Gate will generate the appropriate
variable declaration and conversion calls to provide the expected GtkAda
arguments. You should not modify this code by hand unless you know what
you are doing.

For example, given a signal @code{delete_event}, Gate will generate the
following procedure body, giving access to the arguments of this callback:
a @code{Gtk_Window_Record} (Object) and a @code{Gdk_Event} (Arg1)

@example
   @b{procedure} On_Main_Window_Delete_Event
     (Object : @b{access} Gtk_Window_Record'Class;
      Params : Gtk.Arguments.Gtk_Args)
   @b{is}
      Arg1 : Gdk_Event := To_Event (Params, 1);
   @b{begin}
      null;
   @b{end} On_Main_Window_Delete_Event;
@end example

The only limitation is that currently Gate does not handle callbacks which
return values, which means that you have to modify the code by hand. This
limitation should however be fixed in future versions of GtkAda.

@subsection Modifying generated files
Note that you can easily go back to Glade any time, modify your interface,
and have Gate re-generate a set of files. All your modifications will be
kept in the new files. For that, Gate creates a directory @code{.gate} in the
current directory. Please do not delete it if you want Gate to be able to
keep your changes from one version to the next.

Also note that to keep track of your modifications, gate relies on
@code{patch} and @code{diff} being available on your system. If you
don't have a working set of @code{diff/patch}, @code{configure} will
simply replace them by null operations, which means that regenerated
files will override the previous ones.

Under Win32 based systems, GtkAda now comes with a set of unix-like tools
(including @code{patch} and @code{diff}) that provide the same functionality.
Note that these tools are provided as is, and we recommend using your own
supported set of utilities. You can find the complete package of the GNU
utilities provided at
@url{http://www.weihenstephan.de/~syring/win32/UnxUtils.html}.

In some cases, due to major changes in the project file, Gate may not be
able to merge all the changes. In this case, it will notify you so, and
files with a @code{.rej} extension will be generated to help you do the merge
manually.

@subsection Adding Gate support for new widgets

This section is intended for developpers that wish to add support for new
GtkAda widgets in Gate. Note that this section is not complete yet.

@subsubsection Implementing ``Generate'' procedures
To provide support for a new widget, you first need to write a ``Generate''
procedure that will take care of generating the piece of code related to
the widget's properties. Note that the parents properties do not
have to be handled by this function.

@itemize @bullet
@item Glib.Glade API
The Glib.Glade package contains a self documented API that will help you
automate most of the work for common widgets.
@item Most common mapping
  @itemize @bullet
  @item Gen_New
  @item Gen_Set
  @item Gen_Call_Child
  @item example
  @end itemize
@item Registering ``Generate'' functions
  Gtk.Glade.Register_Generate (Widget, Func)
This procedure associates a given Genrate procedure with a given widget name
(not available yet).
@end itemize

@section Dgate (Dynamic Gate)
@subsection Introduction to Dgate
Dgate is the dynamic version of our support. This is an Ada program that takes
the XML file in argument. It also provides default callbacks for your
application. We recommand using it while you are trying to design your
interface to get a rapid look and feel of your GUI without having to compile
any files.

@subsection Using Dgate
As with Gate you can simply invoke Dgate by specifying a Glade project file.
Note that Dgate is actually a very simple GtkAda application that takes
advantage of powerful features of GtkAda: the ability to dynamically create
widgets given a XML specification from a file or memory.

@subsection Gtk.Glade

@itemize @bullet
@item Loading an XML file
@item Registering signals
@item Retrieving widgets
@end itemize

@c @subsection A complete example

@section Limitations
Gate and Dgate currently support all Gtk+ widgets and properties available
under Glade. But, to help you identify widgets that may not be supported (e.g
Gnome widgets), Gate will generate a warning on the standard error:

@smallexample
$ gate warning.glade
Generating Ada files...

GtkAda-WARNING **: Unsupported widget GnomeCanvas (canvas1)
The following files have been created/updated in src:
[...]
@end smallexample

and add a comment in the @code{<widget>_pkg.adb} file that looks like:

@smallexample
--  WARNING: Unsupported widget GnomeCanvas (canvas1)
@end smallexample

This means that while generating the file Gate detected an unsupported
widget (in this case GnomeCanvas) whose name is canvas1.
If you get such a warning your file may or may not compile properly, but
you won't get the complete widget hierarchy at run time.

Feel free to send us (see @ref{How to report bugs}) the XML file that
causes this problem. We don't guarantee a rapid fix for each particular
problem but receiving real examples of missing functionnalities will
certainly help implementing them faster.

Similarly, Dgate generates a warning to standard error when encountering
an unsupported widget:

@smallexample
GtkAda-WARNING **: Unsupported widget GnomeCanvas (canvas1)
@end smallexample

@node How to report bugs
@chapter How to report bugs

GtkAda is becoming more and more stable due to its increasing use, but
you may still find bugs while using it. We have tried to test it as much
as possible, essentially by converting the testgtk.c file found in the gtk
distribution, as well as with generating a significant number of interfaces
using the GUI builder and Gate.
We strongly suggest that you have a look at testgtk, which gives
a lot of examples of how to use this toolkit.

There are two kinds of problems you can encounter:
@itemize @bullet
@item If the gtk library itself was compiled with warnings turned on, you
may get some  warnings messages,  mainly because of types problems.
These warnings should not appear, as we have tried to be as type safe
as possible  in this package. To know exactly where the problem is,
compile your program with debug information, run gdb, and set a
breakpoint on the function @code{g_log}. Then run your program as usual,
using the @code{run} command. Then send us the result of the @code{where}
command. Here is a summary:

@example
@c @group
@c @cartouche
$ gnatmake -f -g <your_program_name> `gtkada-config`
$ gdb <your_program_name>
(gdb) break main
(gdb) run
(gdb) break g_log
(gdb) continue
....
(gdb) where
@c @end cartouche
@c @end group
@end example

@item In  some  (hopefully) rare cases,   you can even get a  segmentation
fault within gtk.  That means there is definitly something wrong either
in your program or in the toolkit.  Please check your program carefully
and, if you think this is a problem in GtkAda itself, send us an e-mail.
@end itemize

If you are a supported user of GNAT, send mail to
@uref{mailto:report@@gnat.com} to report errors, otherwise send mail
to the authors (@uref{mailto:gtkada@@ada.eu.org}) explaining exactly
what your are  doing,  what  is  the  expected  result  and  what  you
actually get. Please include the required sources to reproduce the
problem, in a  format usable  by @code{gnatchop}  (basically, insert
all  the required sources at  the end of  the mail). Please  try to
provide as small as possible a  subset of your sources.

Of course, we will  welcome any patch   you can provide, so  that this
toolkit may be as useful as possible.

@c --------------------------------------------------------------
@node Bibliography
@chapter Bibliography

We recommand the following documents. Most of them were written with C
in mind, but should be easily adapted after you've read the rest of
this document.

@itemize @bullet
@item [1] "Gtk+/Gome Application Development" -- Havoc Pennington
This book, by one of the main authors of the the GNOME environment,
describes in detail some of the inner mechanisms of gtk+, including
signal handling, and a complete description of all the widgets and all
the events found in @code{Gdk.Event}.

It is worth noting that this book has been published under the Open
Publication License. You can get an electronic copy of it at
@url{http://www.opencontent.org/}.
@end itemize

@c @printindex cp
@contents

@bye
