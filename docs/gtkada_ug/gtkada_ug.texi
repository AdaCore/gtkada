\input texinfo   @c -*-texinfo-*-
@c %**start of header
@setfilename gtkada.info
@settitle GtkAda User's Guide
@syncodeindex fn cp

@titlepage

@title GtkAda User's Guide
@subtitle Version 1.2.0
@subtitle Document revision level $Revision$
@subtitle Date: $Date$
@author E. Briot, J. Brobecker, A. Charlet, P. Durif

@page
@vskip 0pt plus 1filll

Copyright @copyright{} 1998-1999, Emmanuel Briot, Joel Brobecker, Arnaud Charlet

This document may be copied, in whole or in part, in any form or by any
means, as is or with alterations, provided that (1) alterations are clearly
marked as alterations and (2) this copyright notice is included
unmodified in any copy.

@end titlepage

@ifinfo
@node Top, Introduction, (dir), (dir)
@top GtkAda User's Guide

GtkAda User's Guide

GtkAda, the Ada 95 graphical toolkit

Version 1.2.0

Date: $Date$

Copyright @copyright{} 1998-1999, Emmanuel Briot, Joel Brobecker, Arnaud Charlet

This document may be copied, in whole or in part, in any form or by any
means, as is or with alterations, provided that (1) alterations are clearly
marked as alterations and (2) this copyright notice is included
unmodified in any copy.

@menu
* Introduction::
* Getting started with GtkAda::
* Contents::
* Hierarchical composition of a window::
* Signal handling::
* Start an application with GtkAda::
* General GTK documentation::
* Description of the GDK hierarchy::
* Description of the Glib hierarchy::
* Resource files::
* Creating and Binding new widgets::
* Threads::
* How to report bugs::
* New tagged type scheme::
* Using tagged types to extend Gtk widgets::
* Creating new widgets in Ada::
* Support for Glade the Gtk GUI builder::
* A complete example::

 --- The Detailed Node Listing ---

Getting started with GtkAda

* How to build and install GtkAda::
* How to compile an application with GtkAda::
* Architecture::
* Widgets Hierarchy::

General GTK documentation

* Package Gtk.Main - high level routines::
* Package Gtk.Signal - connecting callbacks::
* Package Gtk.Tooltips::
* Package Gtk.Adjustment::
* Package Gtk.Widget::
* Package Gtk.Label::
* Package Gtk.Scrollbar::
* Package Gtk.Drawing_Area::
* Package Gtk.Text::
* Package Gtk.Container::
* Package Gtk.Table::
* Package Gtk.Scrolled_Window::
* Package Gtk.Notebook::
* Package Gtk.Box::
* Package Gtk.Button::
* Package Gtk.Toggle_Button::
* Package Gtk.Check_Button::
* Package Gtk.Event_Box::
* Package Gtk.Window::
* Package Gtk.File_Selection::
* Package Gtk.Enums::

Description of the GDK hierarchy

* Package Gdk.Color::
* Package Gdk.Point::
* Package Gdk.Window::
* Package Gdk.Drawable::
* Package Gdk.GC::
* Package Gdk.Font::
* Draw in a widget::

@end menu
@end ifinfo

@node Introduction
@chapter Introduction
@noindent
The home page for GtkAda, that will always contain the latest news for
this binding, is

     @uref{http://ada.eu.org/gtkada/}

@noindent     
The home page for gtk is

     @uref{http://www.gtk.org}

This is GtkAda version 1.2.0. This package is an Ada95 graphical library
for the Gimp Toolkit, which means this is a set of packages to allow you
to easily create some graphical interfaces under X11 and Win32, using Ada95
as a programming language.

From now on, major version numbers will follow Gtk+ (e.g 1.2, 1.3),
meaning that stable versions of GtkAda will have major number 1.2 and
development versions will have number 1.3.
 
Every widget from gtk 1.2 has been implemented, and the test
program found in the gtk release has been reimplemented in Ada (have a
look at the @code{testgtk/} directory).

This binding was tested on the following systems:
@itemize @bullet
@item Linux version 2.0.35
@item SunOS 5.5.1
@item Dec Unix 4.0b
@item SGI IRIX 6.5
@end itemize
using the following compilers:
@itemize @bullet
@item Gnat 3.11b2
@item Gnat 3.11p
@end itemize

the following versions of gtk:
@itemize @bullet
@item Gtk 1.2.1
@item Gtk 1.2.0
@end itemize

and the following versions of glade:
@itemize @bullet
@item Glade 0.4.1
@item Glade 0.4.0
@end itemize

Although versions up to 0.2.1 were compatible with Gtk-1.0, this one is
Gtk-1.2 specific. If you are looking for a binding to
Gtk-1.0, please consider downloading GtkAda 0.2.1.

If you manage to use it on other systems (which should probably be
straightforward - just recompile GtkAda), please let us know so that
we can add to the above list.

This documentation is largely inspired from the Gtk+ documentation written
by Ian Main and Tony Gale.

GtkAda uses extensively the object oriented programming capabilities,
access to subprograms, exceptions and genericity (in particular to define
and handle callbacks) provided by Ada 95.
As a result, this library provides a secure, easy to use and extensible
toolset.

A complete example of the use of GtkAda is provided at the end of this document.

@node Getting started with GtkAda
@chapter Getting started with GtkAda

@menu
* A complete example::
* How to build and install GtkAda::
* How to compile an application with GtkAda::
* Architecture::
* Widgets Hierarchy::
@end menu

@node How to build and install GtkAda
@section How to build and install GtkAda

To build and install GtkAda, simply do the following steps:
@itemize @bullet
@item ./configure
@item make
@item make install
@end itemize

You then have to make sure that the dynamic library @code{libgtkada}
is known by your system, by typically running @code{ldconfig},
editing @code{/etc/ld.conf} or add the path that contains libgtkada
(by default @code{/usr/local/lib}, or @code{$prefix/lib} if you specified
the @code{--prefix} option during the configure step) to your 
@code{LD_LIBRARY_PATH}

@node How to compile an application with GtkAda
@section How to compile an application with GtkAda

A script, @code{gtkada-config}, is provided to simplify the build of an
application:
@example
gnatmake <main-file> `gtkada-config`
@end example

@node Architecture
@section Architecture
There are three major libraries: GTK, GDK and GLIB.
GTK is based on GDK and GLIB, GDK is based on GLIB and the underlying
windowing library (X-Window or Win32).

@example
+---------------------------------------------+
|             Your Application                |
|               +-----------------------------+
|               |            GTK              |
|       +-------+-----------------------------+
|       |           GDK                       |
+-------+--------------+--+-------------------+
|          GLIB        |  | X-Window / Win32  |
+----------------------+  +-------------------+
@end example

GTK is the interface you will use most, but it is sometimes needed to use
directly GDK and GLIB.

The Gtk components (resp. Gdk and Glib) are available in packages whose
name start with @code{Gtk_} (resp. @code{Gdk_} and @code{Glib}).

GtkAda uses an object oriented approach of the components (called
@samp{widget}), whose hierarchy is given in the following section.

@node Widgets Hierarchy
@section Widgets Hierarchy

The simple rule followed by GtkAda to implement each widget is the following:
Given a widget @code{Gtk_Xxx}, its definition can be found in the package
@code{Gtk.Xxx} in the file @code{gtk-xxx.ads}.

For example, the @code{Gtk_Text} type is defined in package
@code{Gtk.Text} located in the file @code{gtk-text.ads}.

Here is the complete hierarchy of Gtk widgets:

@example
1    Gtk_Data
2       Gtk_Tooltips
2       Gtk_Adjustment

1    Gtk_Widget
2       Gtk_Separator
2       Gtk_Ruler
2       Gtk_Preview
2       Gtk_Preview_Info
2       Gtk_Progress_Bar
2       Gtk_Misc
3          Gtk_Arrow
3          Gtk_Image
3          Gtk_Label
4             Gtk_Tips_Query
3          Gtk_Pixmap

2       Gtk_Range
3          Gtk_Scale
3          Gtk_Scrollbar

2       Gtk_Drawing_Area
3          Gtk_Curve

2       Gtk_Editable
3          Gtk_Entry
4             Gtk_Spin_Button
3          Gtk_Text

2       Gtk_Container
3          Gtk_Box
4             Gtk_Button_Box
5                Gtk_VButton_Box
5                Gtk_HButton_Box
4             Gtk_Gamma_Curve
4             Gtk_Color_Selection
4             Gtk_Combo
4             Gtk_Status_Bar
3          Gtk_Button
4             Gtk_Option_Menu
4             Gtk_Toggle_Button
5                Gtk_Check_Button
6                   Gtk_Radio_Button
3          Gtk_Toolbar
3          Gtk_Table
3          Gtk_Scrolled_Window
3          Gtk_Paned
3          Gtk_Tree
3          Gtk_Menu_Shell
4             Gtk_Menu
4             Gtk_Menu_Bar
3          Gtk_List
3          Gtk_Fixed
3          Gtk_Notebook
3          Gtk_CList
3          Gtk_Bin
4             Gtk_Alignment
4             Gtk_Event_Box
4             Gtk_Frame
5                Gtk_Aspect_Frame
4             Gtk_Handle_Box
4             Gtk_Item
5                Gtk_Tree_Item
5                Gtk_List_Item
5                Gtk_Menu_Item
6                   Gtk_Check_Menu_Item
7                      Gtk_Radio_Menu_Item
4             Gtk_Viewport
4             Gtk_Window
5                Gtk_Color_Selection_Dialog
5                Gtk_File_Selection
5                Gtk_Dialog
6                   Gtk_Input_Dialog
@end example

The number represents the type's depth in the hierarchy.

@node Contents
@chapter Contents

The almost full set of widget that comes with Gtk 1.2 has been bound,
and you should be able to use all of these widgets from your Ada
program.

Although it is not quite complete yet, the Gdk binding (the low level
layer) will probably not evolve soon, unless some people (why not you?)
send us patches, or at least ask for specific functions.

The specs have been evolving a lot since version 0.5, but things should
really stabilize now. We hope that the changes in the next versions will
not break existing code, but we certainly can not guaranty anything.

We have tried to adopt a consistent naming scheme for Ada identifiers:
@itemize @bullet
@item The widget names are the same as in C, except that an underscore
sign (_) is used to separate words, e.g

@example
Gtk_Button   Gtk_Color_Selection_Dialog
@end example

@item The function names are the  same as in  C, ignoring the leading
@code{gtk_} and the widget name, e.g

@example
gtk_misc_set_padding        ->  Set_Padding
gtk_toggle_button_set_state ->  Set_State
@end example

@item All the enum types have been grouped in the gtk-enums.ads file

@item The only tricky part is for the callbacks, the timeout functions,
the idle functions, and the data that can be attached to any
object. In these cases, we have used generic package to provide type
safety. Please have a look at the files in testgtk to see how these
functions are used.
@end itemize

@var{WARNING:} all the generic functions allocate some memory for
internal structures. This  memory is freed  by gtk itself,  by calling
some Ada functions. Therefore the generic packages  have to be instanciated
at library level, not  inside a subprogram,  so that the functions are
still defined when gtk needs to free the memory.

@node Hierarchical composition of a window
@chapter Hierarchical composition of a window

Typically, a window is created in which one can insert a box containing
either:
@itemize @bullet
@item Atomic components such as Button, Text, Label, @dots{}
@item Other boxes recursively.
@end itemize

Each component is a widget (Window Gadget), even the windows.

@node Signal handling
@chapter Signal handling

A signal is @samp{emited} by a widget when an action is performed by the
user on this widget. If the widget has one or more procedures attached
to this signal, they are then executed.
Such procedure will be called @code{callback} in this document.

To associate a callback to a widget, you have to connect this callback to
the specific widget, specifying which signal will be handled. This is
done with the @code{Connect} function.

Depending on their type, the widgets can emit zero (e.g @code{Gtk_Label}),
one or several different signals.

A signal is identified by a string, e.g
@itemize @bullet
@item "clicked"
@item "destroy"
@item "delete_event"
@item "configure_event"
@item "expose_event"
@end itemize

For a specific widget, you can connect several callbacks on the same signal.
They will be executed in the order in which they have been connected.

One single callback can be connected several times on the same widget and even
on different widgets.

The choice made by GtkAda to use generics may look complicated but is
actually simple to use and more important, ensures type checking.

For example, you can connect to a @code{Gtk_Button} an action to
execute each time the button is clicked (signal @code{"clicked"}).
Here is how to do it:
@example
@c @group
@c @cartouche
@b{declare}
   Button : Gtk.Button.Gtk_Button;
   Cb_Id  : Glib.Guint;

@b{begin}
   Gtk.Button.Gtk_New (Button => Button, Label => "Load");
   Cb_Id := Callbacks.Button_Callback.Connect (
      Obj  => Button,                     --  the emitting widget
      Name => "clicked",                  --  the generated signal
      Func => Callbacks.Load'Access);     --  the signal handler
@b{end};
@c @end cartouche
@c @end group
@end example

The package @code{Button_Callback} is an instanciation of the
package @code{Gtk.Signal.Void_Callback}
with the type @code{Gtk.Button.Gtk_Button}.

This package defines an access type to a procedure
@code{Button_Callback.Callback} and the corresponding connect function
@code{Button_Callback.Connect}.

The callbacks provided to this function have to respect the
@code{Button_Callback.Callback} type. Below is an example of how to declare
this package.

@example
@c @group
@c @cartouche
@b{with} Gtk.Signal;
@b{with} Gtk.Button;

@b{package} Callbacks @b{is}
   --  Define callbacks that apply on the widget that detected the
   --  corresponding signal.
   --  These callbacks have only one parameter: the widget itself

   @b{package} Button_Callback @b{is} @b{new} Gtk.Signal.Void_Callback
     (Widget_Type => Gtk.Button.Gtk_Button_Record);

   --  Which is equivalent to:
   --     package Button_Callback is
   --
   --        type Callback is access procedure
   --           (Widget : access Gtk.Button.Gtk_Button_Record);
   --        --  Definition of the Callback type
   --
   --        function Connect
   --          (Obj    : access Gtk.Button.Gtk_Button_Record'Class;
   --           Name   : in String;
   --           Func   : in Callback;
   --           After  : in Boolean := False)
   --           return Guint;
   --         --  Connect a callback to a button
   --
   --     end Button_Callback;

   @b{procedure} Load (Widget : @b{access} Gtk.Button.Gtk_Button_Record);
   --  The callback procedure

@b{end} Callbacks;
@c @end cartouche
@c @end group
@end example

@code{Callbacks.Load} is a procedure that can be used to handle a signal
since its profile conforms with @code{Button_Callback.Callback}.

Note that @code{Callbacks} must be declared at the library level
to ensure its lifetime and the presence of its variables during the execution
of the application. This is needed so that GtkAda can take care of freeing
memory.

@node Start an application with GtkAda
@chapter Start an application with GtkAda

You need to perform some initializations to start a GtkAda application:
@example
@c @group
@c @cartouche
--  predefined units of the library
@b{with} Gtk.Rc;
@b{with} Gtk.Main;
@b{with} Gtk.Enums;
@b{with} Gtk.Window;
...
--  My units
@b{with} Callbacks;
...
@b{procedure} Application is
   @b{procedure} Create_Window @b{is} ...

@b{begin}
   --  Set the locale specific datas (e.g time and date format)
   Gtk.Main.Set_Locale;

   --  Initializes GtkAda
   Gtk.Main.Init;

   --  Load the resources
   Gtk.Rc.Parse ("application.rc");

   --  Create the main window
   Create_Window;

   --  Signal handling loop
   Gtk.Main.Main;
@b{end} Application;
@c @end cartouche
@c @end group
@end example

the @code{Create_Window} procedure looks like

@example
@c @group
@c @cartouche
   @b{procedure} Create_Window @b{is}
      Main_Window : Gtk.Window.Gtk_Window;
      ...
   @b{begin}
      Gtk.Window.Gtk_New
        (Window   => Main_Window,
         The_Type => Gtk.Enums.Window_Toplevel);

      --  From Gtk.Widget:
      Gtk.Window.Set_Title (Window => Main_Window, Title  => "Editor");

      --  Construct the window and connect various callbacks

      ...
      Gtk.Window.Show_All (Main_Window);
   @b{end} Create_Window;
@c @end cartouche
@c @end group
@end example

@node General GTK documentation
@chapter General GTK documentation

This section describes briefly how to use the GTK toolset. This is largely
inspired from the GTK+ documentation. It is recommended that you read this
documentation for all general GTK topics.

The GTK toolkit is based on two lower level layers: GDK and Glib.
It is sometimes needed to call these layers directly. @xref{Description of the GDK hierarchy} for a brief description of these packages.

Each widget is declared in a separate package.  The file, package and
type names can be automatically retrieved from one another. For example,
the type @code{Gtk_Text} is defined in the package @code{Gtk.Text} which
is defined in the file @code{gtk-text.ads}.

You may want to look at the sources themselves to find informations on a
specific widget.

@menu
* Package Gtk.Main - high level routines::
* Package Gtk.Signal - connecting callbacks::
* Package Gtk.Tooltips::
* Package Gtk.Adjustment::
* Package Gtk.Widget::
* Package Gtk.Label::
* Package Gtk.Scrollbar::
* Package Gtk.Drawing_Area::
* Package Gtk.Text::
* Package Gtk.Container::
* Package Gtk.Table::
* Package Gtk.Scrolled_Window::
* Package Gtk.Notebook::
* Package Gtk.Box::
* Package Gtk.Button::
* Package Gtk.Toggle_Button::
* Package Gtk.Check_Button::
* Package Gtk.Event_Box::
* Package Gtk.Window::
* Package Gtk.File_Selection::
* Package Gtk.Enums::
@end menu

@node Package Gtk.Main - high level routines
@section Package Gtk.Main - high level routines

These procedures are described in the order in which they should be called:

@itemize @bullet
@item
@code{Set_Locale} must be called first. It sets the various datas specific to
your location, e.g time, date, decimal formats.
@example
procedure Set_Locale;
@end example

@item
@code{Init} initializes the Gtk @var{engine}. Among other things, it
parses the arguments provided on the command line.
@example
procedure Init;
@end example

@item
The signal handling loop: call it once the interface has been set-up.
@example
procedure Main;
@end example

@item
To interrupt the signal handling loop. Usually called in a callback to stop
the application.
@example
procedure Main_Quit;
@end example
@end itemize

@node Package Gtk.Signal - connecting callbacks
@section Package Gtk.Signal - connecting callbacks

This section describes three of the generic packages provided by
@code{Gtk.Signal}.
You can connect as many callback per signal and widgets as needed.
For a given widget and signal, the various callbacks will be executed
in the order in which they have been connected.

On the other hand, a same callback routine can be connected to several
widgets and signals.
The @code{Connect} function returns an integer (@code{Glib.Guint}) that
identifies the connection, allowing you to destroy it later by giving
this identifier and the appropriate widget.
It is also possible to destroy all the connections to a widget.

The first package (@code{Void_Callback}) provides a way to create callbacks
that have no specific parameter other than the emitting widget:
@example
@c @group
@c @cartouche
@b{generic}
   @b{type} Base_Type @b{is} new Gtk.Object.Gtk_Object_Record @b{with} @b{private};

@b{package} Void_Callback @b{is}

   @b{type} Callback @b{is} @b{access} @b{procedure} (Widget : @b{access} Base_Type);

   @b{function} Connect
     (Obj    : @b{access} Base_Type'Class;
      Name   : @b{in} String;
      Func   : @b{in} Callback;
      After  : @b{in} Boolean := False)
      @b{return} Guint;
@b{end} Void_Callback;
@c @end cartouche
@c @end group
@end example

The callback procedure that can be connected with the @code{Connect} function
must follow the profile defined by the @code{Callback} type.
The object parameter will be the widget that emitted the signal.
For the @code{Connect} function, the parameters are:

@itemize @bullet
@item [Obj] The widget associated with the signal,
@item [Name] The signal name (@code{"clicked", "destroy", "delete_event"}, @dots{}),
@item [Func] A pointer to the callback routine,
@item [After] Indicates whether the callback should be executed before or after
 the widget's automatic class behavior.
@end itemize

The second package (@code{Callback}) whose callbacks accept an additional
data dynamically allocated during the call to @code{Connect} and whose
initial value is set by the @code{Func_Data} parameter

@example
@c @group
@c @cartouche
@b{generic}
   @b{type} Base_Type @b{is new} Gtk.Object.Gtk_Object_Record @b{with private};

   @b{type} Data_Type (<>) @b{is private};
   --  The type of the data for the callback
   --  This type need not be an access type (as opposed as what
   --  happens in C). A new access is created by the connect function.

@b{package} Callback @b{is}

   @b{type} Callback @b{is access procedure}
     (Widget : @b{access} Base_Type;
      Data   : @b{in} Data_Type);
   --  Callback function for Signal_Connect below

   @b{function} Connect
     (Obj       : @b{access} Base_Type'@b{Class};
      Name      : @b{in} String;
      Func      : @b{in} Callback;
      Func_Data : @b{in} Data_Type;
      After     : @b{in} Boolean := False)
      @b{return} Guint;
@b{end} Callback;
@c @end cartouche
@c @end group
@end example

The last package @code{Object_Callback}
provides callbacks that can be connected to any kind of widget.
(the @code{Obj} parameter can be any kind of object),
but the callback parameter, as for previous packages will still have to
be the same as the one specified during the instanciation.

At run time, the callback will get the widget parameter
@code{Slot_Object} that has been given to @code{Connect}.

This is for example useful when you need to handle a button click
depending on the window that contains the button instead of the button itself.

@example
@c @group
@c @cartouche
@b{generic}
   @b{type} Base_Type @b{is new} Gtk.Object.Gtk_Object_Record @b{with private};

@b{package} Object_Callback @b{is}
   @b{type} Callback @b{is access procedure} (Object : @b{access} Base_Type);

   @b{function} Connect
     (Obj         : @b{access} Gtk.Object.Gtk_Object_Record'@b{Class};
      Name        : @b{in} String;
      Func        : @b{in} Callback;
      Slot_Object : @b{access} Base_Type'@b{Class};
      After       : @b{in} Boolean := False)
      @b{return} Guint;
@b{end} Object_Callback;
@c @end cartouche
@c @end group
@end example

Here a sample code extracted from a text editor that corresponds to the
text loading operation.
The @code{Callbacks.Load} procedure is a callback executed when the user
clicks on the ``Load'' button. This callback will create the file selection
window (@code{Gtk_File_Selection}) and make it modal to force the user to
select a file before continuing to work.
When the user clicks on the ``Ok'' button of the file selection window,
the @code{Callbacks.Ok} procedure is called with the parameter selection
window.

@example
@c @group
@c @cartouche
@b{with} Gtk.Button;
@b{package} Callbacks @b{is}

   @b{procedure} Load (Widget : @b{in out} Gtk.Button.Gtk_Button);
   --  Callback for the ``Load'' button of the text editor

@b{end} Callbacks;

@b{with} Gtk.Signal, Gtk.Window, Gtk.Main;
@b{with} Gtk.Widget, Gtk.File_Selection, Glib;
@b{with} Editor;

@b{package body} Callbacks @b{is}

   @b{package} Files_Cb @b{is new} Gtk.Signal.Object_Callback
     (Gtk.File_Selection.Gtk_File_Selection);

   --  A callback of type File_Cb.Callback corresponding to the
   --  Cancel button of the file selection window.

   @b{procedure} Cancel
     (Files : @b{access} Gtk.File_Selection.Gtk_File_Selection_Record) @b{is}
   @b{begin}
      --  Hide the file selection window

      Gtk.File_Selection.Hide (Files);

      --  This window is no longer modal

      Gtk.Main.Grab_Remove (Files);
   @b{end} Cancel;

   -- A callback of type File_Cb.Callback corresponding to the ``OK''
   -- button of the file selection window.

   @b{procedure} Ok
     (Files : @b{access} Gtk.File_Selection.Gtk_File_Selection_Record) @b{is}
   @b{begin}
      Editor.Load (Gtk.File_Selection.Get_Filename (Files));
      Gtk.File_Selection.Hide (Files);
      Gtk.Main.Grab_Remove (Files);
   @b{end} Ok;

   -- Internal procedure to initialize a Gtk_File_Selection

   @b{procedure} Initialize_File_Selection
     (Files : @b{access} Gtk.File_Selection.Gtk_File_Selection_Record;
      Label : String;
      OK_CB : Files_Cb.Callback)
   @b{is}
      Cb_Id : Glib.Guint;
   @b{begin}
      Gtk.File_Selection.Gtk_New (Files, Label);

      --  Hide the create/remove buttons

      Gtk.File_Selection.Hide_Fileop_Buttons (Files);
      Cb_Id := Files_Cb.Connect (
         Obj         => Gtk.File_Selection.Get_Ok_Button (Files),
         --  The signal applies to the OK button

         Name        => "clicked", -- Event to detect
         Func        => OK_CB,     -- Callback procedure
         Slot_Object => Files);    -- Parameter given to the callback

      Cb_Id := Files_Cb.Connect (
         Obj         => Gtk.File_Selection.Get_Cancel_Button (Files),
         Name        => "clicked",
         Func        => Cancel'access,
         Slot_Object => Files);
   @b{end} Initialize_File_Selection;

   -- The file selection window

   Input_File_Sel : Gtk.File_Selection.Gtk_File_Selection;
   Input_File_Sel_Existe : Boolean := False;

   -- The ``Load'' callback body

   @b{procedure} Load (Widget : @b{access} Gtk.Button.Gtk_Button_Record) @b{is}
   @b{begin}
      @b{if not} Input_File_Sel_Existe @b{then}
         Initialize_File_Selection
           (Input_File_Sel, "File to load ?", OK'Access);
         Input_File_Sel_Existe := True;
      @b{end if};

      Gtk.Main.Grab_Add (Input_File_Sel);

      --  Show the file selection window

      Gtk.File_Selection.Show (Input_File_Sel);
   @b{end} Load;

@b{end} Callbacks;
@c @end cartouche
@c @end group
@end example

Two procedures to destroy a specific or any connection.

@example
@c @group
@c @cartouche
@b{procedure} Disconnect
  (Object     : @b{access} Gtk.Object.Gtk_Object_Record'@b{Class};
   Handler_Id : @b{in} Guint);

@b{procedure} Handlers_Destroy
  (Obj : @b{access} Object.Gtk_Object_Record'@b{Class});
@c @end cartouche
@c @end group
@end example

@node Package Gtk.Tooltips
@section Package Gtk.Tooltips
@example
@c @group
@c @cartouche
@b{type} Gtk_Tooltips_Record @b{is new} Gtk.Data.Gtk_Data_Record @b{with private};
@b{type} Gtk_Tooltips @b{is access all} Gtk_Tooltips_Record'@b{Class};
@c @end cartouche
@c @end group
@end example

The message hint that pops up in a little window when the mouse stay
on a widget long enough without moving.

@node Package Gtk.Adjustment
@section Package Gtk.Adjustment
@example
@c @group
@c @cartouche
@b{type} Gtk_Adjustment_Record @b{is new} Data.Gtk_Data_Record @b{with private};
@b{type} Gtk_Adjustment @b{is access all} Gtk_Adjustment_Record'@b{Class};
@c @end cartouche
@c @end group
@end example

These objects allow you to create a link between a scrollbar and a
scrollable widget (text, scrolled_window).

@node Package Gtk.Widget
@section Package Gtk.Widget
@example
@c @group
@c @cartouche
@b{type} Gtk_Widget_Record @b{is new} Object.Gtk_Object_Record @b{with null record};
@b{type} Gtk_Widget @b{is access all} Gtk_Widget_Record'@b{Class};
@c @end cartouche
@c @end group
@end example

Root of the widget tree. Here are a few useful primitives that are inherited
by all the widgets.

@itemize @bullet
@item Destroy the widget
@example
@c @group
@c @cartouche
@b{procedure} Destroy (Widget : @b{access} Gtk_Widget_Record);
@c @end cartouche
@c @end group
@end example

@item The Widget can be referenced in a resource file under a specified name

@example
@c @group
@c @cartouche
@b{procedure} Set_Name
  (Widget : @b{access} Gtk_Widget_Record; Name : in String);
@c @end cartouche
@c @end group
@end example

@item The @code{Widget} is displayed

@example
@c @group
@c @cartouche
@b{procedure} Show (Widget : @b{access} Gtk_Widget_Record);
@c @end cartouche
@c @end group
@end example

@item The @code{Widget} and its child widgets are displayed

@example
@c @group
@c @cartouche
@b{procedure} Show_All (Widget : @b{access} Gtk_Widget_Record);
@c @end cartouche
@c @end group
@end example

@item Hide the @code{Widget}.

@example
@c @group
@c @cartouche
@b{procedure} Hide (Widget : @b{access} Gtk_Widget_Record);
@c @end cartouche
@c @end group
@end example

@item To manipulate the color tables (see, e.g @code{Gdk.Color.White})

@example
@c @group
@c @cartouche
@b{function} Get_Colormap (Widget : @b{access} Gtk_Widget_Record)
  @b{return} Gdk_Colormap;

@b{function} Get_Default_Colormap @b{return} Gdk_Colormap;

@b{procedure} Set_Default_Colormap
  (Widget : @b{access} Gtk_Widget_Record; Cmap : Gdk_Colormap);
@c @end cartouche
@c @end group
@end example

@item To (de)associate a Gdk_Window to a widget:
@example
@c @group
@c @cartouche
@b{procedure} Realize (Widget : @b{access} Gtk_Widget_Record);
@b{procedure} Unrealize (Widget : @b{access} Gtk_Widget_Record);
@b{function}  Realized_Is_Set (Widget : @b{access} Gtk_Widget_Record'@b{Class})
  @b{return} Boolean;
@c @end cartouche
@c @end group
@end example

You need to use @code{Realize} when for example you want to insert text in a
@code{Gtk_Text} before calling @code{Show}.

@item To make a widget (un)sensitive so that it won't generate any signal:
@example
@c @group
@c @cartouche
@b{procedure} Set_Sensitive
  (Widget    : @b{access} Gtk_Widget_Record;
   Sensitive : @b{in} Boolean := True);
@c @end cartouche
@c @end group
@end example
@code{Set_Sensitive} can be used to temporarily disable a button or a
container. When it is not sensitive, its visual aspect changes.

@item To know whether a widget has no parent (usually a main window):
@example
@c @group
@c @cartouche
@b{function} Toplevel_Is_Set (Widget : @b{access} Gtk_Widget_Record'@b{Class})
  @b{return} Boolean;
@c @end cartouche
@c @end group
@end example

@item To get the parent widget:
@example
@c @group
@c @cartouche
@b{function} Get_Parent (Widget : @b{access} Gtk_Widget_Record)
  @b{return} Gtk_Widget;
@c @end cartouche
@c @end group
@end example

@item To get the low level window (@code{Gdk_Window}) associated with a widget:
@example
@c @group
@c @cartouche
@b{function} Get_Window (Widget : @b{access} Gtk_Widget_Record)
  @b{return} Gdk.Window.Gdk_Window;
@c @end cartouche
@c @end group
@end example

@end itemize

@node Package Gtk.Label
@section Package Gtk.Label
@example
@c @group
@c @cartouche
@b{type} Gtk_Label_Record @b{is new} Misc.Gtk_Misc_Record @b{with private};
@b{type} Gtk_Label @b{is access} all Gtk_Label_Record'@b{Class};
@c @end cartouche
@c @end group
@end example

To display and then modify a simple string.
A @code{Gtk_Label} can emit no signal (see @code{Event_Box} if you want to
connect a signal)

Create a new label
@example
@c @group
@c @cartouche
@b{procedure} Gtk_New (Label : @b{out} Gtk_Label; Str : @b{in} String);
@c @end cartouche
@c @end group
@end example

Change the label string
@example
@c @group
@c @cartouche
@b{procedure} Set_Text (Label : @b{access} Gtk_Label_Record; Str : @b{in} String);
@c @end cartouche
@c @end group
@end example

@node Package Gtk.Scrollbar
@section Package Gtk.Scrollbar
@example
@c @group
@c @cartouche
@b{type} Gtk_Scrollbar_Record @b{is new} Gtk.GRange.Gtk_Range_Record @b{with private};
@b{type} Gtk_Scrollbar @b{is access all} Gtk_Scrollbar_Record'@b{Class};
@c @end cartouche
@c @end group
@end example

Horizontal or vertical scrollbars that can be associated with the
@code{Widget} you want to scroll using
@code{Adjustment} (see, eg @code{Gtk.Text.Get_Vadj}).

@example
@c @group
@c @cartouche
@b{procedure} Gtk_New_Hscrollbar
  (Widget     : @b{out} Gtk_Scrollbar;
   Adjustment : @b{in} Gtk.Adjustment.Gtk_Adjustment);

@b{procedure} Gtk_New_Vscrollbar
  (Widget     : @b{out} Gtk_Scrollbar;
   Adjustment : @b{in} Gtk.Adjustment.Gtk_Adjustment);
@c @end cartouche
@c @end group
@end example

@node Package Gtk.Drawing_Area
@section Package Gtk.Drawing_Area
@example
@c @group
@c @cartouche
@b{type} Gtk_Drawing_Area_Record @b{is new} Gtk.Widget.Gtk_Widget_Record
  @b{with private};
@b{type} Gtk_Drawing_Area @b{is access all} Gtk_Drawing_Area_Record'@b{Class};

@b{procedure} Gtk_New (Widget : @b{out} Gtk_Drawing_Area);
@b{procedure} Size
  (Darea  : @b{access} Gtk_Drawing_Area_Record;
   Width  : @b{in} Glib.Gint;
   Height : @b{in} Glib.Gint);
@c @end cartouche
@c @end group
@end example

You can get the @code{Gdk_Window} associated with a widget to draw in it
using the GDK primitives of @code{Gdk_Drawable} which is a @code{subtype}
of @code{Gdk_Window}, see the GDK section.

This window exists only when the widget is actually realized, e.g after the
call to @code{Realize} or @code{Show} of the @code{Gtk_Drawing_Area}.

It is possible to draw in the initialization procedure after the procedure
@code{Show} or when the @code{Gtk.Main.Main} loop is running,
on the @code{"configure_event"} signal.

A @code{Gtk_Drawing_Area} is a very low level object,
in particular when it is hidden by another window and then exposed, it
is not redrawn automatically. It is up to the application to handle the
expose event, by connecting a callback on the
@code{"expose_event"} signal.

@node Package Gtk.Text
@section Package Gtk.Text
To manipulate text.
@example
@c @group
@c @cartouche
@b{type} Gtk_Text_Record @b{is new}
  Gtk.Editable.Gtk_Editable_Record @b{with private};
@b{type} Gtk_Text @b{is access} all Gtk_Text_Record'@b{Class};
@c @end cartouche
@c @end group
@end example

End of line are marked by a @code{Ascii.LF}.  When the application
modifies the text (using, e.g @code{Insert}), it can first freeze it
(@code{Freeze}) to prevent any change from the user and any automatic
update of the display, then unfreeze it (@code{Thaw}) to allow the user
to interact again.

@example
@c @group
@c @cartouche
@b{procedure} Gtk_New
  (Widget : @b{out} Gtk_Text;
   Hadj   : @b{access} Gtk.Adjustment.Gtk_Adjustment_Record'@b{Class}
     := Gtk.Adjustment.Null_Adjustment;
   Vadj   : @b{access} Gtk.Adjustment.Gtk_Adjustment_Record'@b{Class}
     := Gtk.Adjustment.Null_Adjustment);

@b{procedure} Freeze (Text : @b{access} Gtk_Text_Record);

@b{procedure} Thaw (Text : @b{access} Gtk_Text_Record);

@b{function} Get_Hadj (Widget : @b{access} Gtk_Text_Record)
  @b{return} Gtk.Adjustment.Gtk_Adjustment;

@b{function} Get_Vadj (Widget : @b{access} Gtk_Text_Record)
  @b{return} Gtk.Adjustment.Gtk_Adjustment;

@b{function} Get_Length (Text : @b{in} Gtk_Text) @b{return} Guint;

@b{procedure} Insert
  (Text   : @b{access} Gtk_Text_Record;
   Font   : @b{in} Gdk.Font.Gdk_Font'@b{Class};
   Fore   : @b{in} Gdk.Color.Gdk_Color;
   Back   : @b{in} Gdk.Color.Gdk_Color;
   Chars  : @b{in} String;
   Length : @b{in} Gint);
@c @end cartouche
@c @end group
@end example

By default, the text shown is not modifiable by the user. To change this,
use the @code{Set_Editable} procedure:
@example
@c @group
@c @cartouche
@b{procedure} Set_Editable
  (Text : @b{access} Gtk_Text_Record; Editable : @b{in} Boolean);
@c @end cartouche
@c @end group
@end example

To avoid cutting words at the end of a line:
@example
@c @group
@c @cartouche
@b{procedure} Set_Word_Wrap
  (Text      : @b{access} Gtk_Text_Record;
   Word_Wrap : @b{in} Boolean);
@c @end cartouche
@c @end group
@end example

Also inherits primitives from @code{Gtk.Editable.Gtk_Editable}:
@itemize @bullet

@item Destroy a text section
@example
@c @group
@c @cartouche
@b{procedure} Delete_Text
  (Editable  : @b{access} Gtk_Editable_Record;
   Start_Pos : @b{in} Gint;
   End_Pos   : @b{in} Gint);   --  e.g Glib.Gint (Get_Length (...))
@c @end cartouche
@c @end group
@end example

@item Get the current postion of the cursor
@example
@b{function} Get_Current_Pos (Widget : access Gtk_Editable_Record)
  return Guint;
@end example
@end itemize

@node Package Gtk.Container
@section Package Gtk.Container
@example
@c @group
@c @cartouche
@b{type} Gtk_Container_Record @b{is new}
  Gtk.Widget.Gtk_Widget_Record @b{with private};
@b{type} Gtk_Container @b{is access all} Gtk_Container_Record'@b{Class};
@c @end cartouche
@c @end group
@end example

General notion that permits to create a hierarchical structure of widgets, such
as @code{Gtk_Box, Gtk_Table, Gtk_EventBox}, @dots{}

To add/remove a widget in a @code{Gtk_Container}:

@example
@c @group
@c @cartouche
@b{procedure} Add
  (Container : @b{access} Gtk_Container_Record;
   Widget    : @b{access} Gtk.Widget.Gtk_Widget_Record'@b{Class});

@b{procedure} Remove
  (Container : @b{access} Gtk_Container_Record;
   Widget    : @b{access} Gtk.Widget.Gtk_Widget_Record'@b{Class});
@c @end cartouche
@c @end group
@end example

The @b{procedure}s @code{Pack_Start} and @code{Pack_End} of @code{Gtk_Box} and
@code{Attach} of @code{Gtk_Table} let you add widgets and specify their
position.

To set the width of the border around the @code{Gtk_Container}:
@example
@c @group
@c @cartouche
@b{procedure} Border_Width
  (Container    : @b{access} Gtk_Container_Record;
   Border_Width : @b{in} Gint);
@c @end cartouche
@c @end group
@end example

@node Package Gtk.Table
@section Package Gtk.Table
@example
@c @group
@c @cartouche
@b{type} Gtk_Table_Record @b{is new} Gtk.Container.Gtk_Container_Record
  @b{with private};
@b{type} Gtk_Table @b{is access all} Gtk_Table_Record'@b{Class};
@c @end cartouche
@c @end group
@end example

To group widgets in a table. The same widget can cover several boxes of the
table. The size of the boxes depends on what they contain.

@example
@c @group
@c @cartouche
@b{procedure} Gtk_New
  (Widget      : @b{out} Gtk_Table;
   Rows        : @b{in} Glib.Gint;
   Columns     : @b{in} Glib.Gint;
   Homogeneous : @b{in} Boolean);
@c @end cartouche
@c @end group
@end example

If @code{Homogeneous} is True, all the boxes will have the same size, determined
by the largest widget and the longest widget.
Otherwise, the width of a column (resp. heigh of a row) will be determined
by the largest widget of the column.

To attach a widget to a table
@example
@c @group
@c @cartouche
@b{procedure} Attach
  (Table         : @b{access} Gtk_Table_Record;
   Child         : @b{access} Gtk.Widget.Gtk_Widget_Record'@b{Class};
   Left_Attach   : @b{in} Gint;
   Right_Attach  : @b{in} Gint;
   Top_Attach    : @b{in} Gint;
   Bottom_Attach : @b{in} Gint;
   Xoptions      : @b{in} Gtk_Attach_Options;
   Yoptions      : @b{in} Gtk_Attach_Options;
   Xpadding      : @b{in} Gint;
   Ypadding      : @b{in} Gint);

@b{procedure} Attach_Defaults
  (Table         : @b{access} Gtk_Table_Record;
   Widget        : @b{access} Gtk.Widget.Gtk_Widget_Record'@b{Class};
   Left_Attach   : @b{in} Gint;
   Right_Attach  : @b{in} Gint;
   Top_Attach    : @b{in} Gint;
   Bottom_Attach : @b{in} Gint);
@c @end cartouche
@c @end group
@end example

Attach the widget @code{Child} to the position indicated by
@code{Left_Attach, Right_Attach, Top_Attach} and
@code{Bottom_Attach}.
These indexes start from 0 to the number of column or rows specified at
table creation. The origin (0, 0) of the frontiers is located in upper left.

@example
@c @group
@c @cartouche
    0          1          2
   0+----------+----------+
    |          |          |
   1+----------+----------+
    |          |          |
   2+----------+----------+
@c @end cartouche
@c @end group
@end example

The values of @code{Xoptions} and @code{Yoptions} can be a logical @var{or} of
several values:
@itemize @bullet
@item [Gtk.Enums.Expand] The table will use all the remaining space in the
 window.
@item [Gtk.Enums.Shrink] If the widget has less space than needed, it will
 shrink instead of disappearing.
@item [Gtk.Enums.Fill] The widget takes the whole space that has been allocated
 for it.
@end itemize

@code{Xpadding} and @code{Ypadding} give the widths in pixels of the
 free space reserved around the widget.

For the @code{Attach_Defaults} procedure, the default values of @code{Xoptions}
and @code{Yoptions} are equals to @code{Expand or Fill} and those of
@code{Xpadding} and @code{Ypadding} are 0.

@node Package Gtk.Scrolled_Window
@section Package Gtk.Scrolled_Window
@example
@c @group
@c @cartouche
@b{type} Gtk_Scrolled_Window_Record @b{is new} Container.Gtk_Container_Record
  @b{with private};
@b{type} Gtk_Scrolled_Window @b{is access all} Gtk_Scrolled_Window_Record'@b{Class};
@c @end cartouche
@c @end group
@end example

To create a scrollable zone in which you can put any kind of widget, like
e.g a table of buttons.
If the window is too small, all the widgets won't be visible, but they will
remain accessible using the scrollbars.
@example
@c @group
@c @cartouche
@b{procedure} Gtk_New
  (Scrolled_Window :    @b{out} Gtk_Scrolled_Window;
   Hadjustment     : @b{access} Adjustment.Gtk_Adjustment_Record'@b{Class}
     := Adjustment.Null_Adjustment;
   Vadjustment     : @b{access} Adjustment.Gtk_Adjustment_Record'@b{Class}
     := Adjustment.Null_Adjustment);
@c @end cartouche
@c @end group
@end example

Create a @code{Gtk_Scrolled_Window} by optionally specifying adjustment rules.

To get the adjustment rules (to attach scrollbars).
@example
@c @group
@c @cartouche
@b{function} Get_Hadjustment
  (Scrolled_Window : @b{access} Gtk_Scrolled_Window_Record)
   @b{return} Adjustment.Gtk_Adjustment;

@b{function} Get_Vadjustment
  (Scrolled_Window : @b{access} Gtk_Scrolled_Window_Record)
   @b{return} Adjustment.Gtk_Adjustment;
@c @end cartouche
@c @end group
@end example

@c Package Gtk.Paned:
@c    @b{type} Gtk_Paned_Record is new Gtk.Container.Gtk_Container_Record
@c      with private;
@c    @b{type} Gtk_Paned is @b{access} all Gtk_Paned_Record'@b{Class};

@c Package Gtk.Tree:
@c    @b{type} Gtk_Tree_Record is new Gtk.Container.Gtk_Container_Record with private;
@c    @b{type} Gtk_Tree is @b{access} all Gtk_Tree_Record'@b{Class};

@c Package Gtk.Menu_Shell:
@c    @b{type} Gtk_Menu_Shell_Record is new Gtk.Container.Gtk_Container_Record
@c      with private;
@c    @b{type} Gtk_Menu_Shell is @b{access} all Gtk_Menu_Shell_Record'@b{Class};

@c Package Gtk.Menu:
@c    @b{type} Gtk_Menu_Record is new Gtk.Menu_Shell.Gtk_Menu_Shell_Record
@c      with private;
@c    @b{type} Gtk_Menu is @b{access} all Gtk_Menu_Record'@b{Class};

@c Package Gtk.Menu_Bar:
@c    @b{type} Gtk_Menu_Bar_Record is new Gtk.Menu_Shell.Gtk_Menu_Shell_Record
@c      with private;
@c    @b{type} Gtk_Menu_Bar is @b{access} all Gtk_Menu_Bar_Record'@b{Class};

@c Package Gtk.List:
@c    @b{type} Gtk_List_Record is new Gtk.Container.Gtk_Container_Record with private;
@c    @b{type} Gtk_List is @b{access} all Gtk_List_Record'@b{Class};

@c Package Gtk.Fixed:
@c    @b{type} Gtk_Fixed_Record is new Gtk.Container.Gtk_Container_Record
@c      with private;
@c    @b{type} Gtk_Fixed is @b{access} all Gtk_Fixed_Record'@b{Class};

@node Package Gtk.Notebook
@section Package Gtk.Notebook
@example
@c @group
@c @cartouche
@b{type} Gtk_Notebook_Record @b{is new} Gtk.Container.Gtk_Container_Record
  @b{with private};
@b{type} Gtk_Notebook @b{is access all} Gtk_Notebook_Record'@b{Class};
@c @end cartouche
@c @end group
@end example

The NoteBook Widget is a collection of @var{pages} that overlap each other,
each page containing different information.
This widget has become more common lately in GUI programming,
and it is a good way to show blocks of similar information that warrant
separation in their display. 

@c Package Gtk.CList:
@c    @b{type} Gtk_Clist_Record is new Gtk.Container.Gtk_Container_Record
@c      with private;
@c    @b{type} Gtk_Clist is @b{access} all Gtk_Clist_Record'@b{Class};

@node Package Gtk.Box
@section Package Gtk.Box
@example
@c @group
@c @cartouche
@b{type} Gtk_Box_Record @b{is new}
  Gtk.Container.Gtk_Container_Record @b{with private};
@b{type} Gtk_Box @b{is access all} Gtk_Box_Record'@b{Class};
@b{subtype} Gtk_Vbox @b{is} Gtk_Box;
@b{subtype} Gtk_Hbox @b{is} Gtk_Box;
@c @end cartouche
@c @end group
@end example

Horizontal (@code{Gtk_New_Hbox}) and vertical (@code{Gtk_New_Vbox}) boxes
that can contain several widgets.
you can add widgets from

@itemize @bullet
@item the left to the right starting from the beginning (@code{Pack_Start})
@item the right to the left, starting from the end (@code{Pack_End})
@end itemize

@example
@c @group
@c @cartouche
@b{procedure} Gtk_New_Vbox
  (Box         : @b{in} out Gtk_Box;
   Homogeneous : @b{in}  Boolean;
   Spacing     : @b{in}  Gint);
@b{procedure} Initialize_Vbox
  (Box         : @b{access} Gtk_Box_Record;
   Homogeneous : @b{in}  Boolean;
   Spacing     : @b{in}  Gint);

@b{procedure} Gtk_New_Hbox
  (Box         : @b{in} out Gtk_Box;
   Homogeneous : @b{in}  Boolean;
   Spacing     : @b{in}  Gint);
@b{procedure} Initialize_Hbox
  (Box         : @b{access} Gtk_Box_Record;
   Homogeneous : @b{in}  Boolean;
   Spacing     : @b{in}  Gint);

@b{procedure} Pack_Start
  (In_Box  : @b{access} Gtk_Box_Record;
   Child   : @b{access} Gtk.Widget.Gtk_Widget_Record'@b{Class};
   Expand  : @b{in} Boolean := True;
   Fill    : @b{in} Boolean := True;
   Padding : @b{in} Gint    := 0);

@b{procedure} Pack_End
  (In_Box  : @b{access} Gtk_Box_Record;
   Child   : @b{access} Gtk.Widget.Gtk_Widget_Record'@b{Class};
   Expand  : @b{in} Boolean := True;
   Fill    : @b{in} Boolean := True;
   Padding : @b{in} Gint    := 0);
@c @end cartouche
@c @end group
@end example

@xref{Package Gtk.Table}

@c Package Gtk.Status_Bar:
@c    @b{type} Gtk_Status_Bar_Record is new Gtk.Box.Gtk_Box_Record with private;
@c    @b{type} Gtk_Status_Bar is @b{access} all Gtk_Status_Bar_Record'@b{Class};

@c Package Gtk.Color_Selection:
@c    @b{type} Gtk_Color_Selection_Record is new Gtk.Box.Gtk_Box_Record with private;
@c    @b{type} Gtk_Color_Selection is @b{access} all Gtk_Color_Selection_Record'@b{Class};

@c Package Gtk.Button_Box:
@c    @b{type} Gtk_Button_Box_Record is new Gtk.Box.Gtk_Box_Record with private;
@c    @b{type} Gtk_Button_Box is @b{access} all Gtk_Button_Box_Record'@b{Class};

@c Package Gtk.VButton_Box:
@c    @b{type} Gtk_VButton_Box_Record is new Gtk.Button_Box.Gtk_Button_Box_Record
@c      with private;
@c    @b{type} Gtk_VButton_Box is @b{access} all Gtk_VButton_Box_Record'@b{Class};

@c Package Gtk.HButton_Box:
@c    @b{type} Gtk_Hbutton_Box_Record is new Gtk.Button_Box.Gtk_Button_Box_Record
@c      with private;
@c    @b{type} Gtk_Hbutton_Box is @b{access} all Gtk_Hbutton_Box_Record'@b{Class};

@c Package Gtk.Gamma_Curve:
@c    @b{type} Gtk_Gamma_Curve_Record is new Gtk.Box.Gtk_Box_Record with private;
@c    @b{type} Gtk_Gamma_Curve is @b{access} all Gtk_Gamma_Curve_Record'@b{Class};

@c Package Gtk.Combo:
@c    @b{type} Gtk_Combo_Record is new Gtk.Box.Gtk_Box_Record with private;
@c    @b{type} Gtk_Combo is @b{access} all Gtk_Combo_Record'@b{Class};

@node Package Gtk.Button
@section Package Gtk.Button
@example
@c @group
@c @cartouche
@b{type} Gtk_Button_Record @b{is new} Bin.Gtk_Bin_Record @b{with private};
@b{type} Gtk_Button @b{is access all} Gtk_Button_Record'@b{Class};
@c @end cartouche
@c @end group
@end example

A simple button with a label and signals (e.g @code{clicked}).

@c Package Gtk.Option_Menu:
@c    @b{type} Gtk_Option_Menu_Record is new Button.Gtk_Button_Record with private;
@c    @b{type} Gtk_Option_Menu is @b{access} all Gtk_Option_Menu_Record'@b{Class};

@node Package Gtk.Toggle_Button
@section Package Gtk.Toggle_Button
@example
@c @group
@c @cartouche
@b{type} Gtk_Toggle_Button_Record @b{is new} Gtk.Button.Gtk_Button_Record
  @b{with private};
@b{type} Gtk_Toggle_Button @b{is access all} Gtk_Toggle_Button_Record'@b{Class};
@c @end cartouche
@c @end group
@end example

Toggle buttons are very similar to normal buttons, except they will always
be in one of two states, alternated by a click. They may be depressed,
and when you click again, they will pop back up.  Click again, and they will
pop back down.

@node Package Gtk.Check_Button
@section Package Gtk.Check_Button
@example
@c @group
@c @cartouche
@b{type} Gtk_Check_Button_Record @b{is new}
  Toggle_Button.Gtk_Toggle_Button_Record @b{with private};
@b{type} Gtk_Check_Button @b{is access all} Gtk_Check_Button_Record'@b{Class};
@c @end cartouche
@c @end group
@end example

Check buttons inherit many properties and @b{function}s from the the toggle
buttons above, but look a little different.
Rather than being buttons with text inside them, they are small squares with
the text to the right of them. These are often seen for toggling
options on and off in applications. 

@node Package Gtk.Event_Box
@section Package Gtk.Event_Box
@example
@c @group
@c @cartouche
@b{type} Gtk_Event_Box_Record @b{is new} Gtk.Bin.Gtk_Bin_Record @b{with private};
@b{type} Gtk_Event_Box @b{is access all} Gtk_Event_Box_Record'@b{Class};
@c @end cartouche
@c @end group
@end example

To associate a callback or clip a widget that is not able to do it, like
labels for example. Note that this container can have only one child.

@example
@c @group
@c @cartouche
@b{procedure} Gtk_New (Widget : @b{out} Gtk_Event_Box);
@c @end cartouche
@c @end group
@end example

This widget is a child of @code{Gtk_Container} and inherits in particular of:

@example
@c @group
@c @cartouche
@b{procedure} Add (Container : @b{access} Gtk_Container_Record;
               Widget    : @b{access} Gtk.Widget.Gtk_Widget_Record'@b{Class});
@c @end cartouche
@c @end group
@end example

@c Package Gtk.Viewport:
@c    @b{type} Gtk_Viewport_Record is new Gtk.Bin.Gtk_Bin_Record with private;
@c    @b{type} Gtk_Viewport is @b{access} all Gtk_Viewport_Record'@b{Class};

@node Package Gtk.Window
@section Package Gtk.Window
@example
@c @group
@c @cartouche
@b{type} Gtk_Window_Record @b{is new} Bin.Gtk_Bin_Record @b{with private};
@b{type} Gtk_Window @b{is access all} Gtk_Window_Record'@b{Class};
@c @end cartouche
@c @end group
@end example

The base window, emits the signals @code{"destroy", "delete_event"}.

@c Package Gtk.Color_Selection_Dialog:
@c    @b{type} Gtk_Color_Selection_Dialog_Record is new Gtk.Window.Gtk_Window_Record
@c      with private;
@c    @b{type} Gtk_Color_Selection_Dialog
@c      is @b{access} all Gtk_Color_Selection_Dialog_Record'@b{Class};

@node Package Gtk.File_Selection
@section Package Gtk.File_Selection
@example
@c @group
@c @cartouche
@b{type} Gtk_File_Selection_Record is new Gtk.Window.Gtk_Window_Record
  with private;
@b{type} Gtk_File_Selection is @b{access} all Gtk_File_Selection_Record'@b{Class};
@c @end cartouche
@c @end group
@end example

To select a file in the directories tree. Nothing special to know about
it, just use it!
There are three buttons @code{Ok, Cancel and Help}.
You can modify these buttons (e.g change the labels, connect callbacks, @dots{})
with the various @code{Get_..._Button} @b{function}s.

@example
@c @group
@c @cartouche
@b{procedure} Gtk_New
  (File_Selection : @b{out} Gtk_File_Selection; Title : @b{in} String);
@c @end cartouche
@c @end group
@end example

To associate a callback with the buttons of the file selector:
@example
@c @group
@c @cartouche
@b{function} Get_Ok_Button
  (File_Selection : @b{access} Gtk_File_Selection_Record)
   @b{return} Gtk.Button.Gtk_Button;

@b{function} Get_Cancel_Button
  (File_Selection : @b{access} Gtk_File_Selection_Record)
   @b{return} Gtk.Button.Gtk_Button;
@c @end cartouche
@c @end group
@end example

To consult or set the filename:
@example
@c @group
@c @cartouche
@b{function} Get_Filename
  (File_Selection : @b{access} Gtk_File_Selection_Record)
   @b{return} String;

@b{procedure} Set_Filename
  (File_Selection : @b{access} Gtk_File_Selection_Record;
   Filename : @b{in} String);
@c @end cartouche
@c @end group
@end example

To hide the file manipulation buttons (destruction, @dots{}):

@example
@c @group
@c @cartouche
@b{procedure} Hide_Fileop_Buttons
  (File_Selection : @b{access} Gtk_File_Selection_Record);
@c @end cartouche
@c @end group
@end example

@c Package Gtk.Dialog:
@c    @b{type} Gtk_Dialog_Record is new Gtk.Window.Gtk_Window_Record with private;
@c    @b{type} Gtk_Dialog is @b{access} all Gtk_Dialog_Record'@b{Class};

@c Package Gtk.Input_Dialog:
@c    @b{type} Gtk_Input_Dialog_Record is new Dialog.Gtk_Dialog_Record with private;
@c    @b{type} Gtk_Input_Dialog is @b{access} all Gtk_Input_Dialog_Record'@b{Class};

@c Package Gtk.Alignment:
@c    @b{type} Gtk_Alignment_Record is new Gtk.Bin.Gtk_Bin_Record with private;
@c    @b{type} Gtk_Alignment is @b{access} Gtk_Alignment_Record'@b{Class};

@node Package Gtk.Enums
@section Package Gtk.Enums
This package defines all the enumerated @b{type}s used by the GTK hierarchy.

@node Description of the GDK hierarchy
@chapter Description of the GDK hierarchy
GTK is based on a lower level layer called GDK that contains some simple
drawing and window primitives.

@menu
* Package Gdk.Color::
* Package Gdk.Point::
* Package Gdk.Window::
* Package Gdk.Drawable::
* Package Gdk.GC::
* Package Gdk.Font::
* Draw in a widget::
@end menu

@node Package Gdk.Color
@section Package Gdk.Color
Color types and table of colors:
@example
@c @group
@c @cartouche
@b{type} Gdk_Color @b{is private};
@b{type} Gdk_Colormap @b{is new} Root_Type @b{with private};
@c @end cartouche
@c @end group
@end example

Allows one to get black and white colors by asking the
@code{Gdk_Colormap} of a widget:
@example
@c @group
@c @cartouche
@b{function} White (Colormap : @b{in} Gdk_Colormap) @b{return} Gdk_Color;
@b{function} Black (Colormap : @b{in} Gdk_Colormap) @b{return} Gdk_Color;
Wrong_Color : @b{exception};
@c @end cartouche
@c @end group
@end example

See for example @code{Get_Default_Colormap}.

You can of course create your own colors (provided your screen can
display them), by calling the following functions :

@example
@b{declare}
   Color : Gdk_Color;
   Name  : String := "brown";  --  the name of the color to be created
@b{begin}
   --  First, create a color from its name
   Color := Gdk.Color.Parse (Name);
   Gdk.Color.Alloc (Gtk.Widget.Get_Default_Colormap, Color);

   --  Or create a color from its values
   Gdk.Color.Set_Rgb (Color,
                      Red   => 20000, 
                      Green => 20000,
                      Blue  => 65500);
   Gdk.Color.Alloc (Gtk.Widget.Get_Default_Colormap, Color);
@b{end}; 
@end example

@node Package Gdk.Point
@section Package Gdk.Point
@example
@c @group
@c @cartouche
@b{type} Gdk_Point @b{is private};
@c @end cartouche
@c @end group
@end example

Used to describe polygons.

@example
@c @group
@c @cartouche
@b{type} Gdk_Points_Array @b{is array} (Positive @b{range} <>) @b{of} Gdk_Point;

@b{function} Get_X (Point : @b{in} Gdk_Point) @b{return} Glib.Gint16;
@b{function} Get_Y (Point : @b{in} Gdk_Point) @b{return} Glib.Gint16;
@b{procedure} Set_X (Point : @b{in out} Gdk_Point; X : Glib.Gint16);
@b{procedure} Set_Y (Point : @b{in out} Gdk_Point; Y : Glib.Gint16);
@c @end cartouche
@c @end group
@end example
 
@node Package Gdk.Window
@section Package Gdk.Window
@example
@c @group
@c @cartouche
@b{type} Gdk_Window @b{is new} Root_Type @b{with private};
@c @end cartouche
@c @end group
@end example

To clear a window (e.g before drawing ):
@example
@c @group
@c @cartouche
@b{procedure} Clear (Window : @b{in out} Gdk_Window);
@c @end cartouche
@c @end group
@end example
 
@node Package Gdk.Drawable
@section Package Gdk.Drawable
@example
@c @group
@c @cartouche
@b{subtype} Gdk_Drawable @b{is} Gdk.Window.Gdk_Window;
@c @end cartouche
@c @end group
@end example

@example
@c @group
@c @cartouche
   @b{procedure} Draw_Rectangle (Drawable : @b{in} Gdk_Drawable'@b{Class};
                             Gc       : @b{in} Gdk.GC.Gdk_GC'@b{Class};
                             Filled   : @b{in} Boolean := False;
                             X        : @b{in} Gint;
                             Y        : @b{in} Gint;
                             Width    : @b{in} Gint;
                             Height   : @b{in} Gint);
 
   @b{procedure} Draw_Point (Drawable : @b{in} Gdk_Drawable'@b{Class};
                         Gc       : @b{in} Gdk.GC.Gdk_GC'@b{Class};
                         X        : @b{in} Gint;
                         Y        : @b{in} Gint);
 
   @b{procedure} Draw_Line (Drawable : @b{in} Gdk_Drawable'@b{Class};
 
   @b{procedure} Draw_Line (Drawable : @b{in} Gdk_Drawable'@b{Class};
                        Gc       : @b{in} Gdk.GC.Gdk_GC'@b{Class};
                        X1       : @b{in} Gint;
                        Y1       : @b{in} Gint;
                        X2       : @b{in} Gint;
                        Y2       : @b{in} Gint);
 
   @b{procedure} Draw_Arc (Drawable : @b{in} Gdk_Drawable'@b{Class};
                       Gc       : @b{in} Gdk.GC.Gdk_GC'@b{Class};
                       Filled   : @b{in} Boolean := False;
                       X        : @b{in} Gint;
                       Y        : @b{in} Gint;
                       Width    : @b{in} Gint;
                       Height   : @b{in} Gint;
                       Angle1   : @b{in} Gint;
                       Angle2   : @b{in} Gint);
 
   @b{procedure} Draw_Polygon (Drawable : @b{in} Gdk_Drawable'@b{Class};
                           Gc       : @b{in} Gdk.GC.Gdk_GC'@b{Class};
                           Filled   : @b{in} Boolean;
                           Points   : @b{in} Gdk.Point.Gdk_Points_Array);
   @b{procedure} Draw_Text
     (Drawable    : @b{in} Gdk_Drawable'@b{Class};
      Font        : @b{in} Gdk.Font.Gdk_Font;
      Gc          : @b{in} Gdk.GC.Gdk_GC;
      X           : @b{in} Glib.Gint;
      Y           : @b{in} Glib.Gint;
      Text        : @b{in} String);
@c @end cartouche
@c @end group
@end example

for all the procedures (in particular @code{Draw_Arc}), the parameters are:
@itemize @bullet
 
@item [X, Y] Position of the point or of the upper left corner or the rectangle.
 
@item [Width, Height] Width and height of the rectangle or of the rectangle
containing an ellipse.
 
@item [Angle1]  Starting angle of the arc in 1/64th degrees.
 
@item [Angle2]  Ending angle relative to Angle1 in 1/64th degrees.

@item [Font]  A font, that can be loaded using @code{Gdk.Font.Load}.
              For example:
@example
@c @group
@c @cartouche
   Gdk.Font.Load
     (Font, "-adobe-courier-medium-i-*-*-15-*-*-*-*-*-*-*");
@c @end cartouche
@c @end group
@end example
@end itemize

@node Package Gdk.GC
@section Package Gdk.GC
A @code{Gdk_GC} is a graphic context that must be associated, during its
creation, with a @code{Gdk_Window}, and which is needed for each drawing
primitive of @code{Gdk_Drawable}.
A @code{Gdk_GC} let you, for example, set the colors to use for a drawing.

@example
@c @group
@c @cartouche
   @b{type} Gdk_GC @b{is new} Root_Type @b{with private};
 
   @b{procedure} Gdk_New (GC     :    @b{out} Gdk_GC;
                      Window : @b{in}     Gdk.Window.Gdk_Window'@b{Class});
 
   @b{procedure} Destroy (GC : @b{in out} Gdk_GC);
 
   @b{procedure} Set_Foreground (GC    : @b{in out} Gdk_GC;
                             Color : @b{in}     Gdk.Color.Gdk_Color);
 
   @b{procedure} Set_Background (GC    : @b{in out} Gdk_GC;
                             Color : @b{in}     Gdk.Color.Gdk_Color);
 
   @b{procedure} Set_Font (GC   : @b{in out} Gdk_GC;
                       Font : @b{in}     Gdk.Font.Gdk_Font'@b{Class});
@c @end cartouche
@c @end group
@end example
 
@node Package Gdk.Font
@section Package Gdk.Font
A font describes the graphical aspect of the characters, their size,
kind, @dots{}.

Under @code{X11}, each font has a name of the form:
@example
@c @group
@c @cartouche
"-adobe-courier-medium-i-*-*-15-*-*-*-*-*-*-*"
@c @end cartouche
@c @end group
@end example

The X command @code{xfontsel} lets you select a font and build its associated
name automatically.
 
@example
@c @group
@c @cartouche
   @b{type} Gdk_Font @b{is new} Root_Type @b{with private};
 
   @b{procedure} Load
     (Font      :    @b{out} Gdk_Font;
      Font_Name : @b{in}     String);
 
   @b{procedure} Fontset_Load
     (Font         :   @b{out} Gdk_Font;
      Fontset_Name : @b{in}    String);
 
   @b{function} Id (Font : @b{in} Gdk_Font) @b{return} Gint;
 
   @b{function} "=" (Fonta, Fontb : @b{in} Gdk_Font) @b{return} Boolean;
 
   @b{function} String_Width
     (Font : @b{in} Gdk_Font;
      Str  : @b{in} String) @b{return} Gint;
 
   @b{function} Text_Width
     (Font : @b{in} Gdk_Font;
      Text : @b{in} String) @b{return} Gint;
 
   @b{function} Char_Width
     (Font : @b{in} Gdk_Font;
      Char : @b{in} Character) @b{return} Gint;
 
   @b{function} String_Measure
     (Font : @b{in} Gdk_Font;
      Str  : @b{in} String) @b{return} Gint;
 
   @b{function} Text_Measure
     (Font : @b{in} Gdk_Font;
      Text : @b{in} String) @b{return} Gint;
 
   @b{function} Char_Measure
     (Font : @b{in} Gdk_Font;
      Char : @b{in} Character) @b{return} Gint;
@c @end cartouche
@c @end group
@end example

@code{Width} gives the sum of the characters' widths,
@code{Measure} gives a value similar to @code{Width} except that it takes
into account the attributes of the font (e.g @code{italic}).

@node Draw in a widget
@section Draw in a widget

To select a drawing area, use a @code{Gtk_Drawing_Area} widget.
The drawing procedures apply to the Gdk window
(see @code{Gdk_Window} and @code{Gdk_Drawable}) of the
@code{Gtk_Drawing_Area} widget via a graphic context (see @code{Gtk_Gc}).

Typically the code will look like:

@example
@c @group
@c @cartouche
@b{with} Glib;
@b{with} Gdk.Window;
@b{with} Gdk.Drawable;
@b{with} Gdk.GC;
@b{with} Gdk.Font;

@b{procedure} Draw (Drawing : @b{in} @b{out} Gtk.Drawing_Area.Gtk_Drawing_Area) @b{is}
   Gdkw : Gdk.Window.Gdk_Window;
   GC   : Gdk.GC.Gdk_GC;
   Font : Gdk.Font.Gdk_Font;
   @b{use} @b{type} Glib.Gint;

@b{begin}
   -- Get the Gdk window

   Gdkw := Gtk.Drawing_Area.Get_Window (Drawing) ;

   -- Clear the window

   GDK.Window.Clear (Gdkw) ;

   -- Create a graphic context associated with this window

   Gdk.GC.Gdk_New (GC, Gdkw);

   -- Draw a line in this window

   Gdk.Drawable.Draw_Line
     (Drawable => Gdkw,
      GC => GC,
      X1 =>   0, Y1 =>   0,
      X2 => 100, Y2 => 100);

   -- Draw an arc

   Gdk.Drawable.Draw_Arc
     (Drawable => Gdkw,
      Gc       => gc,
      Filled   => True,
      X        => 100,
      Y        => 100,
      Width    => 200,
      Height   => 100,
      Angle1   => 0 * 64,
      Angle2   => 270 * 64);

   -- Ask for a given font

   Gdk.Font.Load (Font, "-adobe-courier-medium-i-*-*-15-*-*-*-*-*-*-*");
   Gdk.Drawable.Draw_Text
     (Drawable    => Gdkw,
      Font        => Font,
      Gc          => gc,
      X           => 50,
      Y           => 50,
      Text        => "Hello World");
   Gdk.Font.Destroy (Font);
   Gdk.GC.Destroy (GC);
@b{end} Draw;
@c @end cartouche
@c @end group
@end example

@node Description of the Glib hierarchy
@chapter Description of the Glib hierarchy

Glib is the low-level layer and provides various @b{type}s such as
@code{Gint, Guint}, @dots{}.

It also provides access to lists and double-linked lists. Some functions
in GtkAda return lists of Widgets or lists of integer, so it might be
useful to know how to traverse the list.

Here are the functions available (note that the packages in Glib are
generics that you need to instanciate first).

@example
@b{function} First (List : @b{in out} Glist);
@b{function} Next (List : @b{in} Glist) @b{return} Glist;
@b{function} Last (List : @b{in} Glist) @b{return} Glist;
@end example

These three functions allow you to traverse the list: get the first
element, then loop while the current element is different from Last.
For instance, here is how you would get the selection in a
@code{Gtk_List} widget:

@example
@b{declare}
   @b{use type} Widget_List.Glist;
   Selection : Widget_List.Glist := Gtk.List.Get_Selection (Widget);
   Current   : Widget_List.Glist := Widget_List.First (Selection);
   Item      : Gtk_Widget;
@b{begin}
   @b{while} Current /= Widget_List.Last (Selection) @b{loop}
       Item := Widget_List.Get_Data (Current);
       --  use Item however you want
       Current := Widget_List.Next (Current);
   @b{end loop};
@b{end};
@end example   


@c Glib.XML

@node Resource files
@chapter Resource files

Resource files let you parametrize the aspect of the widgets of a GtkAda
application without having to recompile it.

A resource file needs to be loaded (@code{Gtk.Rc.Parse}) @var{before} setting
the corresponding window.

In this file, it is possible to specify the visual characteristics of the
widgets (colors, fonts, @dots{}).
Under X, the @code{xfontsel} command allows you to easily select a font.
The FontSelection widget is also a simple way to select fonts.

Here is an example of a resource file:
@example
# application.rc
#
# resource file for "Application"

# Buttons style
style "button"
@{
# BackGround Colors
#                  Red  Green  Blue
  bg[PRELIGHT] = @{ 0.0,  0.75, 0.0 @} # Green when the mouse is on
                                     # the button
  bg[ACTIVE]   = @{ 0.75, 0.0,  0.0 @} # Red on click
# ForeGround Colors
#                  Red  Green  Blue
  fg[PRELIGHT] = @{ 1.0,  1.0,  1.0 @} # White when the mouse is on
                                     # the button
  fg[ACTIVE]   = @{ 1.0,  1.0,  1.0 @} # White on click
@}

# All the buttons will have the style "button"
widget_class "*GtkButton*" style "button"

# Text style
style "text"
@{
  font = "-adobe-courier-medium-r-normal-*-15-*-*-*-*-*-*-*"
  text[NORMAL] = @{ 0.0, 0.0, 0.0 @} # black
  fg[NORMAL]   = @{ 0.0, 0.0, 0.0 @} # black
  base[NORMAL] = @{ 1.0, 1.0, 1.0 @} # white : background color
@}

# All Gtk_Text will have the "text" style
widget_class "*GtkText" style "text"
@end example


@node Creating and Binding new widgets
@chapter Creating and Binding new widgets

New since version 0.6, GtkAda has now a basic support for creating new
widgets directly in Ada (although you can't create your own signals
yet, we are still working on it).

Since GtkAda has an object oriented conception (well, at least you can
program by extension), it is easy, if you want to associate your
own data with a widget, to create your own type. See the
examples below. You should also have a look at the @code{testgtk/}
 directory.

We provide a Perl script to help you create a binding to a C widget
(this is the script we have used ourselves).  This will not fully
automate the process, although it should really speed things up. You
will probably need less than 15 min to create a new binding once you
will get used to the way GtkAda works. Note that your C file should have
the same format as the one used by Gtk+ itself, as far as indentation
and style are concerned.

Here are the steps to create a new binding:

@itemize @bullet
@item Give the @code{generate.pl} script the C header file

@item The perl script should ask you for every field in the C structure if
you want to create a function to make it accessible from Ada. Answer
@var{y} or @var{n} (the default value is @var{n}, just press ENTER).

@example
@c @group
@c @cartouche
$ perl generate.pl ../include/gtk/gtkbutton.h > temporary
  Create a function for the field child (of type GtkWidget*) [n]?
  Create a function for the field in_button (of type guint) [n]?
  Create a function for the field button_down (of type guint) [n]?
@c @end cartouche
@c @end group
@end example

@item If you answered yes to at least one of the above questions, create a
new C file, and move the C part of the @var{temporary} file created by
generate.pl to this C file.

@item Do a gnatchop on the @var{temporary} file created by generate.pl, after
deleting the C part from above.

@example
@c @group
@c @cartouche
$ gnatchop temporary
@c @end cartouche
@c @end group
@end example

This should create two Ada files (specification and body)

@item Edit these two files if needed (to change some parameters
  from Gint to Boolean for instance). It can be a little bit tricky
  when one of your functions returns a GList* or a GSList*. Please have
  a look at gtk-combo.ads for examples how to do this.
@end itemize

@node Threads
@chapter Threads

The 1.2 series of Gtk+ are now thread safe. The
usage of tasks inside programs using this toolkit should not cause any
problem provided that you protect your Gtk calls with Gdk.Threads.Enter/
Leave and that your windowing system (e.g X) is thread-safe.

We recommend however that you read the section related to this topic in the
GTK+ documentation.

@node How to report bugs
@chapter How to report bugs

This library is still considered beta code, and it is thus likely that
you will  find bugs.  We  have tried to  test it as much  as possible,
essentially  by  converting  the  testgtk.c  file  found  in  the  gtk
distribution.   We   have  been  able   to  rewrite  nearly   all  the
tests. Please have a look at the  testgtk, which can give you a lot of
examples of how to use this toolkit.

For more general questions about gtk itself, please ask your questions
to the  gtk  mailing list. The  authors of  this toolkit  are far from
being specialists of gtk, as it was one of our first projects with gtk.

There are two kinds of problems you can encounter:
@itemize @bullet
@item If the gtk library itself was compiled with warnings turned on, you
may get some  warnings messages,  mainly because of types problems.
These warnings should not appear, as we have tried to be as type safe
as possible  in this package. To know exactly where the problem is,
compile your program with debug information, run gdb, and set a
breakpoint on the function @code{g_warning}. Then run your program as usual,
using the @code{run} command. Then send us the result of the @code{where}
command. Here is a summary:

@example
@c @group
@c @cartouche
$ gnatmake -f -g <your_program_name> `gtkada-config`
$ gdb <your_program_name>
(gdb) break main
(gdb) run
(gdb) break g_warning
(gdb) continue
....
(gdb) where
@c @end cartouche
@c @end group
@end example

@item In  some  (hopefully) rare cases,   you can even get a  segmentation
fault within gtk.  That means there is definitly something wrong either
in your program or in the toolkit.  Please check your program carefully,
and if you think this is a problem in GtkAda itself, send us an e-mail.
@end itemize

To report errors, send a mail to the authors (@uref{mailto:gtkada@@ada.eu.org})
explaining exactly what your
are  doing,  what  is  the  expected  result  and  what  you  actually
get. Please include the required sources to reproduce the problem, in
a  format usable  by @code{gnatchop}  (basically, insert  all  the required
sources at  the end of  the mail). Please  try to provide a  subset of
your sources as small as possible.

Of course, we will  welcome any patch   you can provide, so  that this
toolkit is as useful as possible.

@node New tagged type scheme
@chapter New tagged type scheme

GtkAda 0.6 is an almost complete rewrite of GtkAda. Whereas widgets
used to be record types, they now are implemented as access types.
This change has two benefits:
@itemize @bullet
@item It is now clearer, when you pass an object to a function or as
  an argument to a callback, that you are still working with the
  widget you created before.
@item Most important, it is now possible to extend existing types directly
  in Ada (see the section below).
@end itemize

Your existing code might have to be modified a little though (sorry
about that, this is for the better!).
@itemize @bullet
@item Although @code{Gtk_New} now creates access types (and allocate memory for
  them), you do not have to free this memory yourself. This is
  automatically taken care of by gtk itself, which is one of the
  strong points of the new scheme.
@item The only part of your code that is actually modified are the
  callbacks. The changes should be easy to handle (We did it
  for testgtk itself :-).
  When instanciating a callback generic, the first parameter should be
  modified like this:

@example
@c @group
@c @cartouche
package My_Cb is new Signal.Void_Callback (Gtk_Widget_Record);
                                                     ^^^^^^^
@c @end cartouche
@c @end group
@end example

  Then you have to modify the spec of the subprogram iself:

@example
@c @group
@c @cartouche
@b{procedure} My_Func (Button : @b{access} Gtk.Button.Gtk_Button_Record;
                   Data   : @b{in} Gint);
@c @end cartouche
@c @end group
@end example

  Note that the first parameter is an anonymous access to a record
  type, and the second parameter is an "in" parameter.
@end itemize

The last things that have changed in this new version of the toolkit are some
of the names of the parameters in the subprograms. This
is part of a major cleanup we are doing so that things can be more
homogeneous within GtkAda.

@node Using tagged types to extend Gtk widgets
@chapter Using tagged types to extend Gtk widgets

Since version 0.6 of this toolkit, it is possible to associate your
own data with existing widgets, simply by creating new @b{type}s. This
section will show you a simple example, but you should rather read the
source code in testgtk/ where we used this feature instead of using
@code{user_data} as in the C version.

@example
@c @group
@c @cartouche
@b{type} My_Button_Record @b{is new} Gtk_Button_Record @b{with record}
    --  whatever data you want to associate with your button
@b{end record};
@b{type} My_Button @b{is access all} My_Button_Record'@b{Class};
@c @end cartouche
@c @end group
@end example

With the above statements, your new type is defined. Every function
available for @code{Gtk_Button} is also available for @code{My_Button}.
Of course, as with every tagged type in Ada, you can create your own
primitive functions, with the following prototype:

@example
@c @group
@c @cartouche
@b{procedure} My_Primitive_Func (Myb : @b{access} My_Button_Record);
@c @end cartouche
@c @end group
@end example

To instanciate an object of type @code{My_Button} in your application, do
the following:

@example
@c @group
@c @cartouche
@b{declare}
   Myb : My_Button;
@b{begin}
   Myb := @b{new} My_Button_Record;
   Initialize (Myb);   --  from Gtk.Button
@b{end};
@c @end cartouche
@c @end group
@end example

The first line creates the Ada type, whereas the @code{Initialize} call
actually creates the C widget and associates it with the Ada type.

@node Creating new widgets in Ada
@chapter Creating new widgets in Ada

With GtkAda, you can now create widgets directly in Ada. These new
widgets can be used directly, as if they were part of gtk itself.

Creating new widgets is a way to create reuseable components. You can
apply to them the same functions as would for any other widget, such as
Show, Hide, ...

This section will present how to create two types of widgets, composite
widgets and widgets created from scratch. Two examples are provided with
GtkAda, in the directories @file{examples/composite_widget} and
@file{examples/base_widget}. Please also refer to the gtk+ tutorial,
that describes the basic mechanisms that you need to know to create
a widget (even if the Ada code is really different from the C code...)

@menu
* Creating composite widgets::
* Creating widgets from scratch::
@end menu

@node Creating composite widgets
@section Creating composite widgets

A composite widget is a widget that does not do much by itself. This is
more a collection of subwidgets, grouped into a more general entity.
For instance, among the standard widgets, @code{Gtk_File_Selection}
and @code{Gtk_Font_Selection} belong to this category.

The good news is that there is nothing special to know. Just create a
new tagged type, that extends one of the standard widgets (or even another
of your own widgets), provide a @code{Gtk_New} function that allocates
memory for this widget, and call the @code{Initialize} function that does
the actual creation of the widget and the subwidgets.
There is only one thing to do: @code{Initialize} should the call the
parent class's @code{Initialize} function, to create the underlying C
widget.

The example directory @file{examples/composite_widget} reimplements the
@code{Gtk_Dialog} widget as was written in C by the creators of gtk+.

@node Creating widgets from scratch
@section Creating widgets from scratch

First, an important note: please do not read this if this is your first
time using GtkAda, or if you don't really understand the signal mechanism.
Creating a nice and working widget really takes a lot of messing with the
low level signals.

Creating a widget from scratch is what you want to do if your widget should
be drawn in a special way, should create and emit new signals, ...
The example we give in @file{examples/base_widget} is a small target, on
which the user can click, and that sends one of two signals "bullseye" or
"missed" depending on where the user has clicked.

Once again, the only two functions that you must create are @code{Gtk_New}
and @code{Initialize}.
This time, @code{Initialize} has to do two things:

@example
   Parent_Package.Initialize
       (Parent_Widget_Record (Widget.@b{all})'@b{Access});

   --  The above line calls the Initialize function from the parent.
   --  This creates the underlying C widget, which we are going to
   --  modify with the following call:

   Gtk.Object.Initialize_Class_Record
       (Widget, Signals, Class_Record);
   --  This initializes the "class record" for the widget and
   --  creates the signals.
@end example

In the above example, the new part is the second call. It takes three
arguments:
@itemize @bullet
@item Widget
This is the widget that you want to initialize
@item Signals
This is an array of string access that contains the name of the signals
you want to create. For instance, you could create Signals with
@example
   Signals      : Gtk.Object.Signal_Array (0 .. 1) :=
     (0 => @b{new} String'("bullseye" & Ascii.NUL),
      1 => @b{new} String'("missed" & Ascii.NUL));
@end example
This will create two signals, named "bullseye" and "missed", whose callbacks
do not take any argument (apart from the usual user's data). This is the only
restriction from GtkAda compared to gtk+: all the callbacks are created
automatically, but you can not specify additionnal parameters that are sent
automatically by GtkAda.

@item Class_Record
Every widget in C is associated with two records. The first one, which exists
only once per widget type, is the "class record". It contains the list of
signals that are known by this widget type, the list of default callbacks for
the signals, ...; the second record is an "instance record", which contains
each instance specific data.
In GtkAda, the "instance record" is simply your tagged type and its fields.
The call to @code{Initialize_Class_Record} is provided to initialize the
"class record". As we said, there should be only one such record per widget
type. This parameter "Class_Record" will point to this records, once it is
created, and will be reused for every instanciation of the widget.

@end itemize

Then of course @code{Initialize} should set up some signal handlers for
the functions you want to redefine.
Three signals are especially useful:

@itemize @bullet

@item "size_request"

This callback is passed one parameter, as in :
@example
   @b{procedure} Size_Request
      (Widget      : @b{access} My_Widget_Record;
       Requisition : @b{in out} Gtk.Widget.Gtk_Requisition);
@end example
This function should modify Requisition to specify what would be the
ideal size of the widget. This might not be the exact size that will be
set, since some containers might decide to enlarge or to shrink it.

@item "size_allocate"

This callback is called every time the widget is moved in its parent
window, or is resize. It is passed one paramater, as in :
@example
   @b{procedure} Size_Allocate
      (Widget     : @b{access} My_Widget_Record;
       Allocation : @b{in out} Gtk.Widget.Gtk_Allocation)
@end example
This function should take the responsability to move the widget, using
for instance @code{Gdk.Window.Move_Resize}.

@item "expose_event"

This callback is called every time the widget needs to be redrawn.
It is passed one parameter, the area that is necessary to be redrawn (to
speed things up, you don't need to redraw the whole widget, just this
area).

@end itemize


@node Support for Glade the Gtk GUI builder
@chapter Support for Glade, the Gtk GUI builder

GtkAda now comes with a support for the GUI builder Glade (this is not
the glade released with Gnat for distributed systems).
Not all widgets are supported yet, but we eventually hope to have all
of them. If you really need one, it is easy to add the two required
functions @dots{} (and to send us patches...)

We actually provide two versions: a dynamic one and a static one. In
both cases, you first need to get and install glade (http://glade.pn.org).
Then start a new project (or edit an old one). It is easy enough to use,
simply select the widget you want to add to your interface, and click!

For now, you can not directly create Ada files from Glade (although this
should be in the next version). In the meanwhile, save your project as
an XML file.

@itemize @bullet
@item DGATE (Dynamic Glade Ada Translator and Evaluator) is the dynamic
version of our support. This is an Ada program that takes the XML file
in argument. It also provides default callbacks for your application, we
recommand using it while you are trying to design your interface.

@item GATE is the static version of our support. This tool
takes the XML file in argument and generates a set of Ada files that,
when compiled, will recreate the interface you just designed with Glade.
@end itemize

The most important file created by Gate is called
@code{callback_<project_name>.adb}.
It contains stubs for all the callbacks you declared in Glade.

Note that you can easily go back to Glade any time, modify your interface,
and have GATE re-generate a set of files. All your modifications will be
kept in the new files. For that, GATE creates a directory @code{.gate/} in the
current directory. Please do not delete it if you want GATE to be able to
keep your changes from one version to the next.

Also note that to be able to keep track of your modifications, gate
relies on @code{patch} and @code{diff} being available on your system.
If you don't have a working set of @code{diff/patch}, @code{configure}
will simply replace them by null operations.

@node A complete example
@chapter A complete example
A window is created with 3 buttons that shows the 3 different types of
callbacks provided.
One interesting thing is that @code{Callbacks.Bye} is
connected three times: on the @code{"Quit"} button and two times on the
main window.

@example
@c @group
@c @cartouche
@b{with} Gtk.Signal;
@b{with} Gtk.Button;
@b{with} Gtk.Window;

@b{package} Callbacks @b{is}

   @b{package} Button_Callback @b{is new} Gtk.Signal.Void_Callback
     (Widget_Type => Gtk.Button.Gtk_Button_Record);
   @b{procedure} Increment (Widget : @b{access} Gtk.Button.Gtk_Button_Record);

   @b{package} Button_Message @b{is new} Gtk.Signal.Callback
     (Widget_Type => Gtk.Button.Gtk_Button_Record,
      Data_Type => String);

   @b{procedure} Message
     (Widget : @b{access} Gtk.Button.Gtk_Button_Record; Data : @b{in} String);

   package Window_Callback @b{is new} Gtk.Signal.Object_Callback
     (Widget_Type => Gtk.Window.Gtk_Window_Record);

   @b{procedure} Bye (Window : @b{access} Gtk.Window.Gtk_Window_Record);

@b{end} Callbacks;

@b{with} Gtk.Main;
@b{with} Ada.Text_Io;

@b{package body} Callbacks @b{is}

   Counter : Natural := 0;

   @b{procedure} Increment (Widget : @b{access} Gtk.Button.Gtk_Button_Record) @b{is}
   @b{begin}
      Counter := Counter + 1;
      Ada.Text_Io.Put_Line (Natural'Image (Counter));
   @b{end} Increment;

   @b{procedure} Message
     (Widget : @b{access} Gtk.Button.Gtk_Button_Record; Data : @b{in} String) @b{is}
   @b{begin}
      Ada.Text_Io.Put_Line (Data);
   @b{end} Message;

   @b{procedure} Bye (Window : @b{access} Gtk.Window.Gtk_Window_Record) @b{is}
   @b{begin}
      Gtk.Window.Destroy (Window);
      Gtk.Main.Main_Quit;
   @b{end} Bye;

@b{end} Callbacks;

@b{with} Gtk.Rc;
@b{with} Gtk.Main;
@b{with} Gtk.Enums;
@b{with} Gtk.Window;
@b{with} Gtk.Box;
@b{with} Gtk.Label;
@b{with} Gtk.Button;
@b{with} Callbacks;
@b{with} Glib;

@b{procedure} Example @b{is}

   @b{procedure} Fix_Label
     (Box : @b{access} Gtk.Box.Gtk_Box_Record; Str : String)
   @b{is}
      Label : Gtk.Label.Gtk_Label;
   @b{begin}
      Gtk.Label.Gtk_New (Label => Label, Str => Str);
      Gtk.Box.Pack_Start
        (In_Box => Box, Child => Label, Expand => False, Fill => False);
   @b{end} Fix_Label;

   @b{procedure} Create_Box
     (W : @b{access} Gtk.Window.Gtk_Window_Record;
      Str : String)
   @b{is}
      Box    : Gtk.Box.Gtk_Box;
      Button : Gtk.Button.Gtk_Button;
      Cb_Id  : Glib.Guint;

   @b{begin}
      Gtk.Box.Gtk_New_Vbox
        (Widget => Box, Homogeneous => True, Spacing => 0);
      Gtk.Window.Add (Container => W, Widget => Box);

      Fix_Label (Box, Str);

      Gtk.Button.Gtk_New (Widget => Button, Label => "Increment");
      Gtk.Box.Pack_Start (In_Box => Box, Child => Button);
      Cb_Id := Callbacks.Button_Callback.Connect
        (Obj => Button,
         Name => "clicked",
         Func => Callbacks.Increment'Access);

      Gtk.Button.Gtk_New (Widget => Button, Label => "Message");
      Gtk.Box.Pack_Start (In_Box => Box, Child => Button);
      Cb_Id := Callbacks.Button_Message.Connect
        (Obj => Button,
         Name => "clicked",
         Func => Callbacks.Message'Access,
         Func_Data => "Button message clicked");

      Gtk.Button.Gtk_New (Widget => Button, Label => "Quit");
      Gtk.Box.Pack_Start (In_Box => Box, Child => Button);
      Cb_Id := Callbacks.Window_Callback.Connect
        (Obj => Button,
         Name => "clicked",
         Func => Callbacks.Bye'Access,
         Slot_Object => W);
   @b{end} Create_Box;

   @b{procedure} Window @b{is}
      Main_Window : Gtk.Window.Gtk_Window;
      Cb_Id : Glib.Guint;

   @b{begin}
      Gtk.Window.Gtk_New
        (Window => Main_Window, The_Type => Gtk.Enums.Window_Toplevel);

      --  Inherited from Gtk.Widget:

      Gtk.Window.Set_Title
        (Window => Main_Window, Title => "Some Title");
      Create_Box (Main_Window, "my box") ;

      --  Connect the Callbacks

      Cb_Id := Callbacks.Window_Callback.Connect
        (Obj => Main_Window,
         Name => "destroy",
         Func => Callbacks.Bye'Access,
         Slot_Object => Main_Window);
      Cb_Id := Callbacks.Window_Callback.Connect
        (Obj => Main_Window,
         Name => "delete_event",
         Func => Callbacks.Bye'Access,
         Slot_Object => Main_Window);
      Gtk.Window.Show_All (Main_Window);
   @b{end} Window;

@b{begin}
   Gtk.Main.Set_Locale;
   Gtk.Main.Init;
   Gtk.Rc.Parse ("example.rc"); 
   Window;
   Gtk.Main.Main;
@b{end} Example;
@c @end cartouche
@c @end group
@end example

@contents
@bye
