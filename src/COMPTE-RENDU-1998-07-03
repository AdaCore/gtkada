Nom des packages :
  Gtk.Widget.
  Gtk.Container
  Gtk.Button
On ne met pas tout l'arbre de l'heritage dans le nom.
----------------------------------------------------------------------
Testgtk :
Joel fait le skelette, puis chaque bouton appelera une proc qui
sera construite en separate.

----------------------------------------------------------------------
Joel :
Rajoute des \ dans les commentaire "mapping" si ceux-ci tiennent sur
plus d'une ligne.

----------------------------------------------------------------------
Les procedures qui emettent des signaux (ex gtk_button_clicked). On
les implemente toutes.

----------------------------------------------------------------------
Pour Joel : cvs update pour mettre a jour.

----------------------------------------------------------------------
"in" vs "in out" : on met ce qui 'logiquement' convient le mieux.

----------------------------------------------------------------------
On ne peut pas faire de type enumere pour les signaux (ie Clicked au lieu
de "clicked") car les nouveaux widget doivent pouvoir creer de nouveaux
signaux comme ils veulent.

----------------------------------------------------------------------
Pour les fonctions C qui sont importees, on met "in" ou "out" suivant
les cas, ya pas de regle.

----------------------------------------------------------------------
Joel :
bon, decision : je vire Gtk.Types, Gtk_True avec et je mets To_Boolean
(et pas To_BOOLean car on dirait qu'on va convertir vers un type C) dans
la partie private de gtk.
mettre Inline (To_Boolean)

----------------------------------------------------------------------
Passer le type Gtk.Object dans un package a part : package Gtk.Object

----------------------------------------------------------------------
Pour les types, on les nomme Gtk_Nom-de-la-widget.
Pour les noms de proc/fonction, on vire tout le preambule, et on
ne met que la partie utile (ex/ gtk_button_set_mode devient Set_Mode).
L'exception : Quand le nom donne un mot reserve de Ada95, on
met Gtk_ devant. (Ex/ gtk_button_new devient Gtk_New).

----------------------------------------------------------------------
Manu :
Dans le callback, il faudrait trouver un moyen de transformer une
widget en une widget de plus haut niveau. Par ex, si on sait que c'est
un bouton, il faudrait pouvoir le convertir en bouton.

----------------------------------------------------------------------
Joel :
Dans Gtk_Toggle_Buttons :
Changer Get_State pour Is_Selected qui renvoie un Boolean
        Set_State pour Set_State (To_Selected : Boolean) pour eliminer
          l'utilsation du type enumere

----------------------------------------------------------------------
Joel : 
Mettre un gros commentaire la ou j'ai mis les extern pour la gestion
de la ligne de commande.

----------------------------------------------------------------------
Faire une ficheir commun misc.c qui contienne pour le moment
#include "misc-manu.c"
#include "misc-joel.c"
Solution temporaire, pour ensuite tout regrouper soit de temps
en temps (tous les week-ends?) soit a la fin.

----------------------------------------------------------------------
Pour la fonction gtk_init () qui utilise les variables externes GNAT,
la mettre dans le fichier misc-gnat.c

----------------------------------------------------------------------
Joel :
Finir Gtk.Widget et Gtk.Container.
Faire les widget de facon a creer Gtk.Menu_Item

----------------------------------------------------------------------
Voir 6.3.1 pour type conformance et subtype conformance.
