(Legende : -  a faire    * done)

Date : 30/06/1998

- Mapping des noms de fonction : on supprime le gtk_ et aussi le nom de la widget.
  seule exception : pour gtk_*_new, qui devient Gtk_New
- Les commentaires se feront en anglais.
- On n'implemente que les fonctions qui sont correctement documentees.
- Tous : Pour tester le binding, on va refaire le test_gtk.
- Ne pas mettre les fonctions ou les macros C qui sont la pour emuler
  la programmation OO.
- Faire attention a la portabilite.
- On oublie le Inline des differentes fonctions du mapping pour le moment,
  mais on n'est pas tout a fait sur. (en plus la compilation est plus longue).

* Joel : Regarder comment passer la ligne de commande a gtk_init, et comment
          recuperer la ligne de commande epuree apres gtk_init
* Joel : Faire les GtkButtons
- Joel : Jeter un oeil au mapping de gdk

- Manu : Liberation de la memoire pour les callback.
- Manu : Faire les GtkBox
* Manu : Se renseigner pour l'utilisation des Inline pour les fonctions du binging
 

Date : 03/07/1998

- Nom des packages :  Gtk.<Nom_Du_Widget>    ex/ Gtk.Widget Gtk.Container Gtk.Button
  On ne met pas tout l'arbre de l'heritage dans le nom.

- Joel : fait le skelette de testgtk
- Tous : Pour testgtk, les differents boutons sont implementes comme des packages 'separate',
         ou chacun developpe les packages pour tester ses widgets.
* Joel : Rajoute des \ dans les commentaire "mapping" si ceux-ci tiennent sur
         plus d'une ligne.
- Tous : Les procedures qui emettent des signaux (ex gtk_button_clicked). On
         les implemente toutes.
- Tous : Utiliser cvs update pour mettre a jour (et pas cvs checkout)
- Tous : choix du mode pour les parametres : 
         "in" vs "in out" : on met ce qui 'logiquement' convient le mieux.
* Tous : On ne peut pas faire de type enumere pour les signaux (ie Clicked au lieu
         de "clicked") car les nouveaux widget doivent pouvoir creer de nouveaux
         signaux comme ils veulent.
- Tous : Pour les fonctions C qui sont importees, on met "in" ou "out" suivant
         les cas, ya pas de regle. Adopter en fonction des passages de parametre entre
         C et Ada.
* Joel : je vire Gtk.Types, Gtk_True avec et je mets To_Boolean dans 
         la partie private de gtk.
          mettre Inline (To_Boolean)
- Tous : Passer le type Gtk.Object dans un package a part : package Gtk.Object
- Tous : Pour les types, on les nomme Gtk_<Nom-du-widget>.
         Pour les noms de proc/fonction, on vire tout le preambule, et on
         ne met que la partie utile (ex/ gtk_button_set_mode devient Set_Mode).
         L'exception : Quand le nom donne un mot reserve de Ada95, on
         met Gtk_ devant. (Ex/ gtk_button_new devient Gtk_New).
* Manu : Dans le callback, il faudrait trouver un moyen de transformer une
         widget en une widget de plus haut niveau. Par ex, si on sait que c'est
         un bouton, il faudrait pouvoir le convertir en bouton.
- Joel : Dans Gtk_Toggle_Buttons :
         Changer Get_State pour Is_Selected qui renvoie un Boolean
         Set_State pour Set_State (To_Selected : Boolean) pour eliminer
            l'utilsation du type enumere
* Joel : Mettre un gros commentaire la ou j'ai mis les extern pour la gestion
         de la ligne de commande. (en fait, on cree plutot un fichier misc-gnat.c)
- Tous : implementation de fonctions C :
         Faire une fichier commun misc.c qui contienne pour le moment
            #include "misc-manu.c"
            #include "misc-joel.c"
         Solution temporaire, pour ensuite tout regrouper soit de temps
         en temps (tous les week-ends?) soit a la fin.
* Joel : Finir Gtk.Widget et Gtk.Container.
* Joel : Faire les widget de facon a creer Gtk.Menu_Item


Date : 08/07/1998

* Joel : Update du Makefile avec le gtk-config
* Joel : Faire les marge pour remettre a jour tous les fichiers. Manu fera juste un ftp ensuite :-)
- Manu : Utiliser les memes noms de parametres que dans gtk
- Tous : Regrouper les gktenums dans Gtk.ads
- Manu : Gtk_Color_Selection_Dialog herite de Gtk_Window.
- Joel : Creer un type abstract Gtk_Root pour le cas des objects qui n'heritent pas de Gtk_Object.
- Joel : Respecter les types abstracts quand il y en a (lire la doc de gtk pour savoir)
- Joel : Gtk.Object est considere au meme titre que les autres, donc on le met dans un fichier 
         a part entiere. Il doit heriter de Gtk_Root.

