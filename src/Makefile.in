all: dirs libs tools

# Whether to build GtkExtra and OpenGL. Position these to "yes" to enable.
GTKEXTRA_SUPPORT=no
GL_SUPPORT=no

BUILD_OBJC=@BUILD_OBJC@

## This line restricts to the Gtk3 API. Comment it out to compile with Gtk2.
RESTRICT_FLAGS = \
 -DGTK_DISABLE_DEPRECATED -DGSEAL_ENABLE -DGTK_DISABLE_SINGLE_INCLUDES \
 -DGDK_DISABLE_DEPRECATED

CFLAGS = -DG_DISABLE_ASSERT -DG_DISABLE_CHECKS -DG_DISABLE_CAST_CHECKS \
 @CFLAGS@ $(RESTRICT_FLAGS) -Wall @GTK_CFLAGS@ -I.. $(FPIC)

GETTEXT_INTL=@GETTEXT_INTL@
HAVE_GETTEXT=@HAVE_GETTEXT@

OBJ_DIR=lib-obj
INC_SUBDIR=.

LIBNAME       = libgtkada$(SO_EXT)
ifeq ($(OS),Windows_NT)
SONAME        = libgtkada-$(MAJOR).$(MINOR)$(SO_EXT)
else
SONAME        = libgtkada-$(MAJOR).$(MINOR)$(SO_EXT).$(MICRO)
endif
ARCHIVENAME   = libgtkada.a

ifeq ($(GL_SUPPORT),yes)
opengl_libs = opengl
else
opengl_libs =
endif

c_objects = misc.o misc_generated.o
c_objects_dir= ${c_objects:%=${OBJ_DIR}/%}

ifeq ($(BUILD_OBJC),yes)
objc_objects = misc_osx.o
objc_objects_dir= ${objc_objects:%=${OBJ_DIR}/%}
else
objc_objects =
objc_objects_dir =
endif

SRC_FILES=glib*.o gdk*.o gtk*.o pango*.o cairo*.o ${c_objects} ${objc_objects}
GTKADA_LIBS=
EXTERNAL_LIBS=
include Makefile.common

## These cannot be shared in Makefile.common, since relative paths might be
## generated for configure (../install-sh), or absolute paths (/usr/bin/install)
INSTALL         = @INSTALL@
INSTALL_DATA    = @INSTALL_DATA@
INSTALL_PROGRAM = @INSTALL_PROGRAM@
INSTALL_SCRIPT  = @INSTALL_SCRIPT@

## General and public targets

libs: ada ${c_objects_dir} $(objc_objects_dir)
ifeq ($(BUILD_SHARED),yes)
libs: ${OBJ_DIR}/$(SONAME)
endif
ifeq ($(BUILD_STATIC),yes)
libs: ${OBJ_DIR}/${ARCHIVENAME}
endif
libs: ${opengl_libs}

ifeq (${HAVE_GTKEXTRA},yes)
libs: gtkextra
endif

opengl gtkextra tools: force
	$(MAKE) -C $@

## Private targets

dirs:: force
	-$(MKDIR) $(OBJ_DIR)

ada: gtkada-intl.adb force
	${GNATMAKE} -Pgtkada_src -u ${FPIC} ${GPR_BUILD}

gtkada-intl.adb: gtkada-intl.gpb Makefile
	gnatprep -DGETTEXT_INTL=$(GETTEXT_INTL) \
	  -DHAVE_GETTEXT=$(HAVE_GETTEXT) gtkada-intl.gpb gtkada-intl.adb

install: force
	@if [ "${DESTDIR}$(prefix)" != `pwd` ]; then \
	   echo Installing GtkAda in ${DESTDIR}$(prefix); \
	   $(MKDIR) "${DESTDIR}$(bindir)"; \
	   $(MKDIR) "${DESTDIR}$(libdir)"; \
	   $(MKDIR) "${DESTDIR}$(incdir)"; \
	   if [ ${BUILD_STATIC} = yes ]; then \
	      $(MKDIR) "${DESTDIR}$(alidir)/static"; \
	      $(INSTALL_DATA) ${OBJ_DIR}/$(ARCHIVENAME) "${DESTDIR}$(alidir)/static"; \
	      $(RM) "${DESTDIR}$(libdir)/$(ARCHIVENAME)"; \
	      if [ -f /usr/bin/$(RANLIB) -o -f /bin/$(RANLIB) ]; then \
	         $(RANLIB) "${DESTDIR}$(alidir)/static/$(ARCHIVENAME)"; \
	      fi; \
	   fi; \
	   if [ $(BUILD_SHARED) = yes ]; then \
	        $(MKDIR) "${DESTDIR}$(alidir)/relocatable"; \
		if [ "$(OS)" = "Windows_NT" ]; then \
		     $(INSTALL_DATA) ${OBJ_DIR}/$(SONAME) "${DESTDIR}$(bindir)"; \
		     $(CHMOD) +x "${DESTDIR}$(bindir)/$(SONAME)"; \
		else \
	             $(INSTALL_PROGRAM) ${OBJ_DIR}/$(SONAME) "${DESTDIR}$(alidir)/relocatable"; \
		     $(RM) "${DESTDIR}$(libdir)/$(LIBNAME)"; \
		     $(LN) $(SONAME) "${DESTDIR}$(alidir)/relocatable/$(LIBNAME)"; \
		     $(LN) gtkada/relocatable/$(SONAME) "${DESTDIR}$(libdir)/$(LIBNAME)"; \
		     $(LN) gtkada/relocatable/$(SONAME) "${DESTDIR}$(libdir)/$(SONAME)"; \
		fi; \
	        $(CP) $(OBJ_DIR)/glib*.ali $(OBJ_DIR)/gdk*.ali "${DESTDIR}$(alidir)/relocatable"; \
	        $(CP) $(OBJ_DIR)/gtk*.ali $(OBJ_DIR)/pango*.ali "${DESTDIR}$(alidir)/relocatable"; \
	        $(CP) $(OBJ_DIR)/cairo*.ali "${DESTDIR}$(alidir)/relocatable"; \
	   fi; \
	   $(CP) glib*.ads glib*.adb $(MESA_SPECS) "${DESTDIR}$(incdir)"; \
	   $(CP) gdk*.ads gdk*.adb "${DESTDIR}$(incdir)"; \
	   $(CP) gtk*.ads gtk*.adb "${DESTDIR}$(incdir)"; \
	   $(CP) pango*.ads pango*.adb "${DESTDIR}$(incdir)"; \
	   $(CP) cairo*.ads cairo*.adb "${DESTDIR}$(incdir)"; \
		$(CP) generated/*.ad? "${DESTDIR}${incdir}"; \
	   if [ ${BUILD_STATIC} = yes ]; then \
	      $(CP) $(OBJ_DIR)/glib*.ali $(OBJ_DIR)/gdk*.ali "${DESTDIR}$(alidir)/static"; \
	      $(CP) $(OBJ_DIR)/gtk*.ali $(OBJ_DIR)/pango*.ali "${DESTDIR}$(alidir)/static"; \
	      $(CP) $(OBJ_DIR)/cairo*.ali "${DESTDIR}$(alidir)/static"; \
	   fi; \
           $(MAKE) -C opengl install; \
           $(MAKE) -C tools install; \
           $(MAKE) -C gtkextra install; \
	   if [ ${BUILD_STATIC} = yes ]; then \
	      $(CHMOD) ugo-w "${DESTDIR}$(alidir)/static"/*.ali; \
	   fi; \
	   if [ $(BUILD_SHARED) = yes ]; then \
	      $(CHMOD) ugo-w "${DESTDIR}$(alidir)/relocatable"/*.ali; \
	   fi; \
	fi

clean:
	-${RM} *.o *.ali *~ b_*.c b~*.ad? core gtkada-intl.adb
	-$(RM) $(OBJ_DIR)/*
	-${RM} .\#*
	$(MAKE) -C gtkextra clean
	$(MAKE) -C opengl clean
	$(MAKE) -C tools clean

distclean: force
	-${RM} Makefile
	$(MAKE) -C gtkextra distclean
	$(MAKE) -C opengl distclean
	$(MAKE) -C tools distclean
	-$(RM) Makefile.common

## Building the C files: they all depend on the c file in the source directory
## The dependencies on the .h files have to be given explicitly

$(c_objects_dir): $(OBJ_DIR)/%.o : %.c
	$(CC) -o $@ -c $(CFLAGS) $<

$(objc_objects_dir): $(OBJ_DIR)/%.o : %.m
	$(CC) -x objective-c -o $@ -c $(CFLAGS) $(OBJC_EXTRA_FLAGS) $<

force:

